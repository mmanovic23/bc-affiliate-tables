// function _classCallCheck(instance, Constructor) {
//     if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function")
// }

// function _classCallCheck(instance, Constructor) {
//     if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function")
// }

// function _classCallCheck(instance, Constructor) {
//     if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function")
// }

function scrollToCollapseTop() {
    var jQueryitemHolder = jQuery(".item-holder"),
        jQuerycollapse = jQuery(".collapse", jQueryitemHolder);
    jQuerycollapse.on("hide.bs.collapse", function() {
        var jQuerythis = jQuery(this),
            jQueryitem = jQuery(this).closest(jQueryitemHolder).find(".item"),
            itemHeight = (jQuerythis.outerHeight(), jQueryitem.outerHeight());
        jQuery("html, body").animate({
            scrollTop: jQuerythis.offset().top - itemHeight - 57
        }, 500)
    })
}

// function rate() {
//     jQuery().rateYo && jQuery(".rate").rateYo({
//         readOnly: is.not.desktop(),
//         onSet: function() {
//             var jQuerythis = jQuery(this);
//             jQuerythis.addClass("rated")
//         },
//         starSvg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 34 32"><path d="M33.566 12.308l-11.636-1.79-5.147-10.517-5.147 10.517-11.636 1.79 8.28 8.28-2.014 11.636 10.294-5.371 10.294 5.371-2.014-11.636 8.727-8.28z"></path></svg>',
//         starSvgEmpty: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 34 32"><path d="M33.566 12.308l-11.636-1.79-5.147-10.517-5.147 10.517-11.636 1.79 8.28 8.28-2.014 11.636 10.294-5.371 10.294 5.371-2.014-11.636 8.727-8.28zM16.783 24.168l-7.832 4.252 1.566-8.727-6.266-6.042 8.727-1.343 3.804-7.832 3.804 7.832 8.727 1.343-6.266 6.042 1.566 8.727-7.832-4.252z"></path></svg>'
//     })
// }

// function smoothScroll() {
//     jQuery().smoothScroll && jQuery(".smooth-scroll").smoothScroll({
//         offset: -60
//     })
// }

// function rating() {}

// function slider() {
//     function sliderCheck() {
//         window.innerWidth < breakpoint && 1 != sliderInited && (sliderInit(), sliderInited = !0), window.innerWidth >= breakpoint && 1 == sliderInited && (jQueryslider.slick("destroy"), sliderInited = !1)
//     }

//     function sliderInit() {
//         jQueryslider.slick({
//             dots: !0,
//             adaptiveHeight: !0,
//             slidesToShow: 1,
//             slidesToScroll: 1
//         })
//     }
//     if (jQuery().slick) {
//         var jQueryslider = jQuery(".slider-promo"),
//             breakpoint = 992,
//             sliderInited = !1;
//         jQuery(window).on("resize", function() {
//             sliderCheck()
//         }), sliderCheck()
//     }
// }

// function stickySidebar() {
//     function sticky_kit() {
//         var jQuerysidebar = jQuery(".col-sidebar"),
//             windowWidth = 1200;
//         if (jQuerysidebar.length && !(window.innerWidth >= windowWidth && jQuerysidebar.hasClass("is_stuck")))
//             if (window.innerWidth < windowWidth) jQuerysidebar.trigger("sticky_kit:detach");
//             else {
//                 var sidebarHeight = jQuerysidebar.outerHeight(!0),
//                     marginBottomDefault = parseInt(jQuerysidebar.css("margin-bottom")),
//                     headerHeight = jQuery(".header").outerHeight();
//                 jQuerysidebar.stick_in_parent({
//                     parent: ".main-review",
//                     spacer: !1,
//                     offset_top: -jQuerysidebar.outerHeight() + jQuerysidebar.position().top + headerHeight
//                 }), jQuerysidebar.on("sticky_kit:stick sticky_kit:unstick", function(e) {
//                     "sticky_kit:stick" == e.type ? (jQuerysidebar.css("top", jQuery(".header").outerHeight() + 16), jQuery(this).css({
//                         "margin-bottom": sidebarHeight
//                     }), jQuerysidebar.trigger("sticky_kit:recalc_height"), setTimeout(function() {
//                         jQuerysidebar.addClass("show")
//                     }, 100)) : jQuery(this).css({
//                         "margin-bottom": marginBottomDefault
//                     }).removeClass("show")
//                 }).on("sticky_kit:bottom sticky_kit:unbottom", function(e) {
//                     "sticky_kit:bottom" == e.type ? jQuery(this).css({
//                         top: jQuery(".main-review").height() - jQuery(".main-review").offset().top - jQuerysidebar.outerHeight() + marginBottomDefault,
//                         "margin-bottom": marginBottomDefault,
//                         bottom: "auto"
//                     }) : jQuery(this).css({
//                         top: headerHeight + 16,
//                         "margin-bottom": marginBottomDefault
//                     })
//                 })
//             }
//     }
//     jQuery().stick_in_parent && (sticky_kit(), jQuery(window).on("resize", function() {
//         sticky_kit()
//     }))
// }

// function stickyFooter() {
//     var jQuerysticky = jQuery(".footer-sticky"),
//         jQueryclose = jQuery(".btn-sticky-close");
//     setTimeout(function() {
//         jQuerysticky.addClass("is-active")
//     }, 7e3), jQueryclose.on("click", function() {
//         var jQuerythis = jQuery(this);
//         jQuerythis.closest(jQuerysticky).removeClass("is-active")
//     }), jQuery(window).on("scroll", function() {
//         var scrollPos = Math.ceil(jQuery(this).scrollTop()) + jQuery(this).height(),
//             atBottom = scrollPos == jQuery(document).height();
//         jQuerysticky.toggleClass("at-bottom", atBottom)
//     })
// }

// function countdown() {
//     if (jQuery().countdown) {
//         var time = jQuery("#countdown").data("time");
//         jQuery("#countdown").countdown(time, function(event) {
//             jQuery(this).html(event.strftime("%Dd %H:%M:%S"))
//         })
//     }
// }

function tooltipster() {
    if (jQuery().tooltipster) {
        var jQuerytooltipsterScreen = jQuery(".tooltipster-screen");
        jQuery(".tooltipster-popover").tooltipster({
            contentCloning: !0,
            side: ["right", "left", "top", "bottom"],
            interactive: "true",
            maxWidth: "320",
            theme: ["tooltipster-popover"],
            zIndex: 999,
            trigger: "custom",
            triggerOpen: {
                mouseenter: !0,
                touchstart: !0,
                click: !0,
                tap: !0
            },
            triggerClose: {
                click: !0,
                scroll: !0,
                tap: !0,
                mouseleave: !0,
                originClick: !0,
                touchleave: !0
            },
            functionReady: function(instance, helper) {
                jQuery(instance._jQuerytooltip).on("click", ".close", function() {
                    instance.close()
                })
            }
        }), jQuery(".tooltipster-text").tooltipster({
            minWidth: "100",
            delay: "0",
            theme: ["tooltipster-text"],
            side: ["right", "left"],
            trigger: "custom",
            triggerOpen: {
                mouseenter: !0,
                touchstart: !0,
                tap: !0
            },
            triggerClose: {
                mouseleave: !0,
                originClick: !0,
                touchleave: !0,
                tap: !0
            }
        }), jQuerytooltipsterScreen.tooltipster({
            contentCloning: !0,
            maxWidth: 420,
            plugins: ["follower"],
            anchor: "right-center",
            delay: "0",
            theme: ["tooltipster-screen"],
            offset: [0, 0],
            repositionOnScroll: !0,
            trigger: "custom",
            triggerOpen: {
                mouseenter: !0,
                touchstart: !0,
                tap: !0
            },
            triggerClose: {
                scroll: !0,
                tap: !0,
                mouseleave: !0,
                touchleave: !0
            }
        }), jQuery(window).on("resize", function() {
            var windowWidth = 992;
            window.innerWidth >= windowWidth ? jQuerytooltipsterScreen.tooltipster("enable") : jQuerytooltipsterScreen.tooltipster("disable")
        })
    }
}

// function headerMenu() {
//     function openMenu() {
//         jQuerybody.addClass("panel-open"), jQuerybody.css("padding-right", getScrollBarWidth()), event.preventDefault(), jQuerynavPanel.addClass("is-visible")
//     }

//     function closeMenu() {
//         jQuerybody.removeClass("panel-open"), jQuerybody.removeAttr("style"), jQuerynavPanel.removeClass("is-visible"), jQuery(".panel-ovarlay").remove()
//     }
//     var jQuerynavPanel = (jQuery("header"), jQuery(".nav-panel")),
//         jQuerybtnPanel = jQuery(".panel-btn");
//     jQuerybtnPanel.on("click", function(event) {
//         openMenu()
//     }), jQuerynavPanel.on("click", function(event) {
//         (jQuery(event.target).closest(".panel-close").length || jQuery(event.target).is(jQuerynavPanel)) && (closeMenu(), event.preventDefault())
//     }), jQuery(window).on("resize", function() {
//         var windowWidth = window.innerWidth;
//         windowWidth >= 992 && jQuerybody.hasClass("panel-open") && closeMenu()
//     })
// }

// function dropdownOpenClick() {
//     var jQueryitem = jQuery(".item-dropdown"),
//         jQuerytoggle = jQuery(".dropdown-toggle", jQueryitem);
//     jQuery(".dropdown-menu", jQueryitem);
//     is.touchDevice() ? jQuerytoggle.on("click", function() {
//         var jQuerythis = jQuery(this);
//         return jQuerythis.closest(jQueryitem).toggleClass("dropdown-show"), !1
//     }) : jQueryitem.on("mouseenter mouseleave", function() {
//         var jQuerythis = jQuery(this);
//         return jQuerythis.toggleClass("dropdown-show"), !1
//     })
// }

// function getScrollBarWidth() {
//     var jQueryouter = jQuery("<div>").css({
//             visibility: "hidden",
//             width: 100,
//             overflow: "scroll"
//         }).appendTo("body"),
//         widthWithScroll = jQuery("<div>").css({
//             width: "100%"
//         }).appendTo(jQueryouter).outerWidth();
//     return jQueryouter.remove(), 100 - widthWithScroll
// }

// function modalShow() {
//     function scrollHandler() {
//         0 == jQuery(this).scrollTop() && fired === !1 && (jQuerymodal.modal("show"), fired = !0, destroy())
//     }

//     function destroy() {
//         jQuery(window).off("scroll", scrollHandler)
//     }

//     function exitIntentHandler() {
//         ouibounce_inited = !0, _ouibounce = ouibounce(!1, {
//             aggressive: !0,
//             sensitivity: 40,
//             callback: function() {
//                 jQuerymodal.modal("show")
//             }
//         })
//     }
//     var _ouibounce, jQuerymodal = jQuery("#modal-exit"),
//         ouibounce_inited = !1,
//         fired = !1;
//     is.touchDevice() ? (ouibounce_inited && (_ouibounce.disable(), ouibounce_inited = !1), jQuery(window).on("scroll", function() {
//         setTimeout(function() {
//             scrollHandler()
//         }, 10)
//     })) : exitIntentHandler()
// }

// function modal_center() {
//     var jQueryheaderFixed = jQuery(".header.fixed-top");
//     jQuery(document).on("show.bs.modal", ".modal", function() {
//         setTimeout(function() {
//             centerModal()
//         }, 200), jQueryheaderFixed.css("right", getScrollBarWidth())
//     }).on("hidden.bs.modal", ".modal", function() {
//         jQueryheaderFixed.css("right", 0)
//     }).keydown(function(eventObject) {
//         27 == eventObject.which && jQuery(".modal").modal("hide")
//     }), jQuery(window).on("resize", function() {
//         jQuery(".modal:visible").each(centerModal)
//     })
// }

// function spot() {
//     var headerHeight = jQuery(".header").outerHeight(),
//         jQueryspot = jQuery(".spot-page .spot-fixed"),
//         spotTop = function() {
//             return jQuery(".spot-page .block-table.block-table-mod").offset().top - headerHeight
//         };
//     jQueryspot.css({
//         top: spotTop,
//         display: "block"
//     }).stick_in_parent({
//         offset_top: headerHeight
//     }).on("sticky_kit:unstick", function() {
//         jQuery(this).css({
//             top: spotTop
//         })
//     }), jQuery(window).on("resize", function() {
//         jQueryspot.hasClass("is_stuck") || jQueryspot.css({
//             top: spotTop
//         })
//     })
// }

// var _createClass = function() {
//         function defineProperties(target, props) {
//             for (var i = 0; i < props.length; i++) {
//                 var descriptor = props[i];
//                 descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor)
//             }
//         }
//         return function(Constructor, protoProps, staticProps) {
//             return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor
//         }
//     }(),
//     Dropdown = function(jQuery) {
//         var NAME = "dropdown",
//             VERSION = "4.0.0-alpha.6",
//             DATA_KEY = "bs.dropdown",
//             EVENT_KEY = "." + DATA_KEY,
//             DATA_API_KEY = ".data-api",
//             JQUERY_NO_CONFLICT = jQuery.fn[NAME],
//             ESCAPE_KEYCODE = 27,
//             ARROW_UP_KEYCODE = 38,
//             ARROW_DOWN_KEYCODE = 40,
//             RIGHT_MOUSE_BUTTON_WHICH = 3,
//             Event = {
//                 HIDE: "hide" + EVENT_KEY,
//                 HIDDEN: "hidden" + EVENT_KEY,
//                 SHOW: "show" + EVENT_KEY,
//                 SHOWN: "shown" + EVENT_KEY,
//                 CLICK: "click" + EVENT_KEY,
//                 CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
//                 FOCUSIN_DATA_API: "focusin" + EVENT_KEY + DATA_API_KEY,
//                 KEYDOWN_DATA_API: "keydown" + EVENT_KEY + DATA_API_KEY
//             },
//             ClassName = {
//                 BACKDROP: "dropdown-backdrop",
//                 DISABLED: "disabled",
//                 SHOW: "show"
//             },
//             Selector = {
//                 BACKDROP: ".dropdown-backdrop",
//                 DATA_TOGGLE: '[data-toggle="dropdown"]',
//                 FORM_CHILD: ".dropdown form",
//                 ROLE_MENU: '[role="menu"]',
//                 ROLE_LISTBOX: '[role="listbox"]',
//                 NAVBAR_NAV: ".navbar-nav",
//                 VISIBLE_ITEMS: '[role="menu"] li:not(.disabled) a, [role="listbox"] li:not(.disabled) a'
//             },
//             Dropdown = function() {
//                 function Dropdown(element) {
//                     _classCallCheck(this, Dropdown), this._element = element, this._addEventListeners()
//                 }
//                 return Dropdown.prototype.toggle = function() {
//                     if (this.disabled || jQuery(this).hasClass(ClassName.DISABLED)) return !1;
//                     var parent = Dropdown._getParentFromElement(this),
//                         isActive = jQuery(parent).hasClass(ClassName.SHOW);
//                     if (Dropdown._clearMenus(), isActive) return !1;
//                     if ("ontouchstart" in document.documentElement && !jQuery(parent).closest(Selector.NAVBAR_NAV).length) {
//                         var dropdown = document.createElement("div");
//                         dropdown.className = ClassName.BACKDROP, jQuery(dropdown).insertBefore(this), jQuery(dropdown).on("click", Dropdown._clearMenus)
//                     }
//                     var relatedTarget = {
//                             relatedTarget: this
//                         },
//                         showEvent = jQuery.Event(Event.SHOW, relatedTarget);
//                     return jQuery(parent).trigger(showEvent), !showEvent.isDefaultPrevented() && (this.focus(), this.setAttribute("aria-expanded", !0), jQuery(parent).toggleClass(ClassName.SHOW), jQuery(parent).trigger(jQuery.Event(Event.SHOWN, relatedTarget)), !1)
//                 }, Dropdown.prototype.dispose = function() {
//                     jQuery.removeData(this._element, DATA_KEY), jQuery(this._element).off(EVENT_KEY), this._element = null
//                 }, Dropdown.prototype._addEventListeners = function() {
//                     jQuery(this._element).on(Event.CLICK, this.toggle)
//                 }, Dropdown._jQueryInterface = function(config) {
//                     return this.each(function() {
//                         var data = jQuery(this).data(DATA_KEY);
//                         if (data || (data = new Dropdown(this), jQuery(this).data(DATA_KEY, data)), "string" == typeof config) {
//                             if (void 0 === data[config]) throw new Error('No method named "' + config + '"');
//                             data[config].call(this)
//                         }
//                     })
//                 }, Dropdown._clearMenus = function(event) {
//                     if (!event || event.which !== RIGHT_MOUSE_BUTTON_WHICH) {
//                         var backdrop = jQuery(Selector.BACKDROP)[0];
//                         backdrop && backdrop.parentNode.removeChild(backdrop);
//                         for (var toggles = jQuery.makeArray(jQuery(Selector.DATA_TOGGLE)), i = 0; i < toggles.length; i++) {
//                             var parent = Dropdown._getParentFromElement(toggles[i]),
//                                 relatedTarget = {
//                                     relatedTarget: toggles[i]
//                                 };
//                             if (jQuery(parent).hasClass(ClassName.SHOW) && !(event && ("click" === event.type && /input|textarea/i.test(event.target.tagName) || "focusin" === event.type) && jQuery.contains(parent, event.target))) {
//                                 var hideEvent = jQuery.Event(Event.HIDE, relatedTarget);
//                                 jQuery(parent).trigger(hideEvent), hideEvent.isDefaultPrevented() || (toggles[i].setAttribute("aria-expanded", "false"), jQuery(parent).removeClass(ClassName.SHOW).trigger(jQuery.Event(Event.HIDDEN, relatedTarget)))
//                             }
//                         }
//                     }
//                 }, Dropdown._getParentFromElement = function(element) {
//                     var parent = void 0,
//                         selector = Util.getSelectorFromElement(element);
//                     return selector && (parent = jQuery(selector)[0]), parent || element.parentNode
//                 }, Dropdown._dataApiKeydownHandler = function(event) {
//                     if (/(38|40|27|32)/.test(event.which) && !/input|textarea/i.test(event.target.tagName) && (event.preventDefault(), event.stopPropagation(), !this.disabled && !jQuery(this).hasClass(ClassName.DISABLED))) {
//                         var parent = Dropdown._getParentFromElement(this),
//                             isActive = jQuery(parent).hasClass(ClassName.SHOW);
//                         if (!isActive && event.which !== ESCAPE_KEYCODE || isActive && event.which === ESCAPE_KEYCODE) {
//                             if (event.which === ESCAPE_KEYCODE) {
//                                 var toggle = jQuery(parent).find(Selector.DATA_TOGGLE)[0];
//                                 jQuery(toggle).trigger("focus")
//                             }
//                             return void jQuery(this).trigger("click")
//                         }
//                         var items = jQuery(parent).find(Selector.VISIBLE_ITEMS).get();
//                         if (items.length) {
//                             var index = items.indexOf(event.target);
//                             event.which === ARROW_UP_KEYCODE && index > 0 && index--, event.which === ARROW_DOWN_KEYCODE && index < items.length - 1 && index++, index < 0 && (index = 0), items[index].focus()
//                         }
//                     }
//                 }, _createClass(Dropdown, null, [{
//                     key: "VERSION",
//                     get: function() {
//                         return VERSION
//                     }
//                 }]), Dropdown
//             }();
//         return jQuery(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.ROLE_MENU, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.ROLE_LISTBOX, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API + " " + Event.FOCUSIN_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, Dropdown.prototype.toggle).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function(e) {
//             e.stopPropagation()
//         }), jQuery.fn[NAME] = Dropdown._jQueryInterface, jQuery.fn[NAME].Constructor = Dropdown, jQuery.fn[NAME].noConflict = function() {
//             return jQuery.fn[NAME] = JQUERY_NO_CONFLICT, Dropdown._jQueryInterface
//         }, Dropdown
//     }(jQuery);
// ! function(root, factory) {
//     "function" == typeof define && define.amd ? define(function() {
//         return root.is = factory()
//     }) : "object" == typeof exports ? module.exports = factory() : root.is = factory()
// }(this, function() {
//     function not(func) {
//         return function() {
//             return !func.apply(null, slice.call(arguments))
//         }
//     }

//     function all(func) {
//         return function() {
//             for (var params = getParams(arguments), length = params.length, i = 0; i < length; i++)
//                 if (!func.call(null, params[i])) return !1;
//             return !0
//         }
//     }

//     function any(func) {
//         return function() {
//             for (var params = getParams(arguments), length = params.length, i = 0; i < length; i++)
//                 if (func.call(null, params[i])) return !0;
//             return !1
//         }
//     }

//     function compareVersion(version, range) {
//         var string = range + "",
//             n = +(string.match(/\d+/) || NaN),
//             op = string.match(/^[<>]=?|/)[0];
//         return comparator[op] ? comparator[op](version, n) : version == n || n !== n
//     }

//     function getParams(args) {
//         var params = slice.call(args),
//             length = params.length;
//         return 1 === length && is.array(params[0]) && (params = params[0]), params
//     }

//     function regexpCheck(regexp, regexes) {
//         is[regexp] = function(value) {
//             return is.existy(value) && regexes[regexp].test(value)
//         }
//     }

//     function setInterfaces() {
//         var options = is;
//         for (var option in options)
//             if (hasOwnProperty.call(options, option) && is["function"](options[option]))
//                 for (var interfaces = options[option].api || ["not", "all", "any"], i = 0; i < interfaces.length; i++) "not" === interfaces[i] && (is.not[option] = not(is[option])), "all" === interfaces[i] && (is.all[option] = all(is[option])), "any" === interfaces[i] && (is.any[option] = any(is[option]))
//     }
//     var is = {};
//     is.VERSION = "0.9.0", is.not = {}, is.all = {}, is.any = {};
//     var toString = Object.prototype.toString,
//         slice = Array.prototype.slice,
//         hasOwnProperty = Object.prototype.hasOwnProperty,
//         comparator = {
//             "<": function(a, b) {
//                 return a < b
//             },
//             "<=": function(a, b) {
//                 return a <= b
//             },
//             ">": function(a, b) {
//                 return a > b
//             },
//             ">=": function(a, b) {
//                 return a >= b
//             }
//         };
//     is.arguments = function(value) {
//         return "[object Arguments]" === toString.call(value) || null != value && "object" == typeof value && "callee" in value
//     }, is.array = Array.isArray || function(value) {
//         return "[object Array]" === toString.call(value)
//     }, is["boolean"] = function(value) {
//         return value === !0 || value === !1 || "[object Boolean]" === toString.call(value)
//     }, is["char"] = function(value) {
//         return is.string(value) && 1 === value.length
//     }, is.date = function(value) {
//         return "[object Date]" === toString.call(value)
//     }, is.domNode = function(object) {
//         return is.object(object) && object.nodeType > 0
//     }, is.error = function(value) {
//         return "[object Error]" === toString.call(value)
//     }, is["function"] = function(value) {
//         return "[object Function]" === toString.call(value) || "function" == typeof value
//     }, is.json = function(value) {
//         return "[object Object]" === toString.call(value)
//     }, is.nan = function(value) {
//         return value !== value
//     }, is["null"] = function(value) {
//         return null === value
//     }, is.number = function(value) {
//         return is.not.nan(value) && "[object Number]" === toString.call(value)
//     }, is.object = function(value) {
//         return Object(value) === value
//     }, is.regexp = function(value) {
//         return "[object RegExp]" === toString.call(value)
//     }, is.sameType = function(value, other) {
//         var tag = toString.call(value);
//         return tag === toString.call(other) && ("[object Number]" !== tag || (!is.any.nan(value, other) || is.all.nan(value, other)))
//     }, is.sameType.api = ["not"], is.string = function(value) {
//         return "[object String]" === toString.call(value)
//     }, is.undefined = function(value) {
//         return void 0 === value
//     }, is.windowObject = function(value) {
//         return null != value && "object" == typeof value && "setInterval" in value
//     }, is.empty = function(value) {
//         if (is.object(value)) {
//             var length = Object.getOwnPropertyNames(value).length;
//             return !!(0 === length || 1 === length && is.array(value) || 2 === length && is.arguments(value))
//         }
//         return "" === value
//     }, is.existy = function(value) {
//         return null != value
//     }, is.falsy = function(value) {
//         return !value
//     }, is.truthy = not(is.falsy), is.above = function(n, min) {
//         return is.all.number(n, min) && n > min
//     }, is.above.api = ["not"], is.decimal = function(n) {
//         return is.number(n) && n % 1 !== 0
//     }, is.equal = function(value, other) {
//         return is.all.number(value, other) ? value === other && 1 / value === 1 / other : is.all.string(value, other) || is.all.regexp(value, other) ? "" + value == "" + other : !!is.all["boolean"](value, other) && value === other
//     }, is.equal.api = ["not"], is.even = function(n) {
//         return is.number(n) && n % 2 === 0
//     }, is.finite = isFinite || function(n) {
//         return is.not.infinite(n) && is.not.nan(n)
//     }, is.infinite = function(n) {
//         return n === 1 / 0 || n === -(1 / 0)
//     }, is.integer = function(n) {
//         return is.number(n) && n % 1 === 0
//     }, is.negative = function(n) {
//         return is.number(n) && n < 0
//     }, is.odd = function(n) {
//         return is.number(n) && (n % 2 === 1 || n % 2 === -1)
//     }, is.positive = function(n) {
//         return is.number(n) && n > 0
//     }, is.under = function(n, max) {
//         return is.all.number(n, max) && n < max
//     }, is.under.api = ["not"], is.within = function(n, min, max) {
//         return is.all.number(n, min, max) && n > min && n < max
//     }, is.within.api = ["not"];
//     var regexes = {
//         affirmative: /^(?:1|t(?:rue)?|y(?:es)?|ok(?:ay)?)jQuery/,
//         alphaNumeric: /^[A-Za-z0-9]+jQuery/,
//         caPostalCode: /^(?!.*[DFIOQU])[A-VXY][0-9][A-Z]\s?[0-9][A-Z][0-9]jQuery/,
//         creditCard: /^(?:(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11}))jQuery/,
//         dateString: /^(1[0-2]|0?[1-9])([\/-])(3[01]|[12][0-9]|0?[1-9])(?:\2)(?:[0-9]{2})?[0-9]{2}jQuery/,
//         email: /^((([a-z]|\d|[!#\jQuery%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\jQuery%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))jQuery/i,
//         eppPhone: /^\+[0-9]{1,3}\.[0-9]{4,14}(?:x.+)?jQuery/,
//         hexadecimal: /^(?:0x)?[0-9a-fA-F]+jQuery/,
//         hexColor: /^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})jQuery/,
//         ipv4: /^(?:(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.){3}(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])jQuery/,
//         ipv6: /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|jQuery))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})jQuery/i,
//         nanpPhone: /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})jQuery/,
//         socialSecurityNumber: /^(?!000|666)[0-8][0-9]{2}-?(?!00)[0-9]{2}-?(?!0000)[0-9]{4}jQuery/,
//         timeString: /^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])jQuery/,
//         ukPostCode: /^[A-Z]{1,2}[0-9RCHNQ][0-9A-Z]?\s?[0-9][ABD-HJLNP-UW-Z]{2}jQuery|^[A-Z]{2}-?[0-9]{4}jQuery/,
//         url: /^(?:(?:https?|ftp):\/\/)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?jQuery/i,
//         usZipCode: /^[0-9]{5}(?:-[0-9]{4})?jQuery/
//     };
//     for (var regexp in regexes) regexes.hasOwnProperty(regexp) && regexpCheck(regexp, regexes);
//     is.ip = function(value) {
//         return is.ipv4(value) || is.ipv6(value)
//     }, is.capitalized = function(string) {
//         if (is.not.string(string)) return !1;
//         for (var words = string.split(" "), i = 0; i < words.length; i++) {
//             var word = words[i];
//             if (word.length) {
//                 var chr = word.charAt(0);
//                 if (chr !== chr.toUpperCase()) return !1
//             }
//         }
//         return !0
//     }, is.endWith = function(string, target) {
//         if (is.not.string(string)) return !1;
//         target += "";
//         var position = string.length - target.length;
//         return position >= 0 && string.indexOf(target, position) === position
//     }, is.endWith.api = ["not"], is.include = function(string, target) {
//         return string.indexOf(target) > -1
//     }, is.include.api = ["not"], is.lowerCase = function(string) {
//         return is.string(string) && string === string.toLowerCase()
//     }, is.palindrome = function(string) {
//         if (is.not.string(string)) return !1;
//         string = string.replace(/[^a-zA-Z0-9]+/g, "").toLowerCase();
//         for (var length = string.length - 1, i = 0, half = Math.floor(length / 2); i <= half; i++)
//             if (string.charAt(i) !== string.charAt(length - i)) return !1;
//         return !0
//     }, is.space = function(value) {
//         if (is.not["char"](value)) return !1;
//         var charCode = value.charCodeAt(0);
//         return charCode > 8 && charCode < 14 || 32 === charCode
//     }, is.startWith = function(string, target) {
//         return is.string(string) && 0 === string.indexOf(target)
//     }, is.startWith.api = ["not"], is.upperCase = function(string) {
//         return is.string(string) && string === string.toUpperCase()
//     };
//     var days = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"],
//         months = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
//     is.day = function(date, day) {
//         return is.date(date) && day.toLowerCase() === days[date.getDay()]
//     }, is.day.api = ["not"], is.dayLightSavingTime = function(date) {
//         var january = new Date(date.getFullYear(), 0, 1),
//             july = new Date(date.getFullYear(), 6, 1),
//             stdTimezoneOffset = Math.max(january.getTimezoneOffset(), july.getTimezoneOffset());
//         return date.getTimezoneOffset() < stdTimezoneOffset
//     }, is.future = function(date) {
//         var now = new Date;
//         return is.date(date) && date.getTime() > now.getTime()
//     }, is.inDateRange = function(date, start, end) {
//         if (is.not.date(date) || is.not.date(start) || is.not.date(end)) return !1;
//         var stamp = date.getTime();
//         return stamp > start.getTime() && stamp < end.getTime()
//     }, is.inDateRange.api = ["not"], is.inLastMonth = function(date) {
//         return is.inDateRange(date, new Date((new Date).setMonth((new Date).getMonth() - 1)), new Date)
//     }, is.inLastWeek = function(date) {
//         return is.inDateRange(date, new Date((new Date).setDate((new Date).getDate() - 7)), new Date)
//     }, is.inLastYear = function(date) {
//         return is.inDateRange(date, new Date((new Date).setFullYear((new Date).getFullYear() - 1)), new Date)
//     }, is.inNextMonth = function(date) {
//         return is.inDateRange(date, new Date, new Date((new Date).setMonth((new Date).getMonth() + 1)))
//     }, is.inNextWeek = function(date) {
//         return is.inDateRange(date, new Date, new Date((new Date).setDate((new Date).getDate() + 7)))
//     }, is.inNextYear = function(date) {
//         return is.inDateRange(date, new Date, new Date((new Date).setFullYear((new Date).getFullYear() + 1)))
//     }, is.leapYear = function(year) {
//         return is.number(year) && (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0)
//     }, is.month = function(date, month) {
//         return is.date(date) && month.toLowerCase() === months[date.getMonth()]
//     }, is.month.api = ["not"], is.past = function(date) {
//         var now = new Date;
//         return is.date(date) && date.getTime() < now.getTime()
//     }, is.quarterOfYear = function(date, quarter) {
//         return is.date(date) && is.number(quarter) && quarter === Math.floor((date.getMonth() + 3) / 3)
//     }, is.quarterOfYear.api = ["not"], is.today = function(date) {
//         var now = new Date,
//             todayString = now.toDateString();
//         return is.date(date) && date.toDateString() === todayString
//     }, is.tomorrow = function(date) {
//         var now = new Date,
//             tomorrowString = new Date(now.setDate(now.getDate() + 1)).toDateString();
//         return is.date(date) && date.toDateString() === tomorrowString
//     }, is.weekend = function(date) {
//         return is.date(date) && (6 === date.getDay() || 0 === date.getDay())
//     }, is.weekday = not(is.weekend), is.year = function(date, year) {
//         return is.date(date) && is.number(year) && year === date.getFullYear()
//     }, is.year.api = ["not"], is.yesterday = function(date) {
//         var now = new Date,
//             yesterdayString = new Date(now.setDate(now.getDate() - 1)).toDateString();
//         return is.date(date) && date.toDateString() === yesterdayString
//     };
//     var freeGlobal = is.windowObject("object" == typeof global && global) && global,
//         freeSelf = is.windowObject("object" == typeof self && self) && self,
//         thisGlobal = is.windowObject("object" == typeof this && this) && this,
//         root = freeGlobal || freeSelf || thisGlobal || Function("return this")(),
//         document = freeSelf && freeSelf.document,
//         previousIs = root.is,
//         navigator = freeSelf && freeSelf.navigator,
//         appVersion = (navigator && navigator.appVersion || "").toLowerCase(),
//         userAgent = (navigator && navigator.userAgent || "").toLowerCase(),
//         vendor = (navigator && navigator.vendor || "").toLowerCase();
//     return is.android = function() {
//         return /android/.test(userAgent)
//     }, is.android.api = ["not"], is.androidPhone = function() {
//         return /android/.test(userAgent) && /mobile/.test(userAgent)
//     }, is.androidPhone.api = ["not"], is.androidTablet = function() {
//         return /android/.test(userAgent) && !/mobile/.test(userAgent)
//     }, is.androidTablet.api = ["not"], is.blackberry = function() {
//         return /blackberry/.test(userAgent) || /bb10/.test(userAgent)
//     }, is.blackberry.api = ["not"], is.chrome = function(range) {
//         var match = /google inc/.test(vendor) ? userAgent.match(/(?:chrome|crios)\/(\d+)/) : null;
//         return null !== match && is.not.opera() && compareVersion(match[1], range)
//     }, is.chrome.api = ["not"], is.desktop = function() {
//         return is.not.mobile() && is.not.tablet()
//     }, is.desktop.api = ["not"], is.edge = function(range) {
//         var match = userAgent.match(/edge\/(\d+)/);
//         return null !== match && compareVersion(match[1], range)
//     }, is.edge.api = ["not"], is.firefox = function(range) {
//         var match = userAgent.match(/(?:firefox|fxios)\/(\d+)/);
//         return null !== match && compareVersion(match[1], range)
//     }, is.firefox.api = ["not"], is.ie = function(range) {
//         var match = userAgent.match(/(?:msie |trident.+?; rv:)(\d+)/);
//         return null !== match && compareVersion(match[1], range)
//     }, is.ie.api = ["not"], is.ios = function() {
//         return is.iphone() || is.ipad() || is.ipod()
//     }, is.ios.api = ["not"], is.ipad = function(range) {
//         var match = userAgent.match(/ipad.+?os (\d+)/);
//         return null !== match && compareVersion(match[1], range)
//     }, is.ipad.api = ["not"], is.iphone = function(range) {
//         var match = is.ipad() ? null : userAgent.match(/iphone(?:.+?os (\d+))?/);
//         return null !== match && compareVersion(match[1] || 1, range)
//     }, is.iphone.api = ["not"], is.ipod = function(range) {
//         var match = userAgent.match(/ipod.+?os (\d+)/);
//         return null !== match && compareVersion(match[1], range)
//     }, is.ipod.api = ["not"], is.linux = function() {
//         return /linux/.test(appVersion)
//     }, is.linux.api = ["not"], is.mac = function() {
//         return /mac/.test(appVersion)
//     }, is.mac.api = ["not"], is.mobile = function() {
//         return is.iphone() || is.ipod() || is.androidPhone() || is.blackberry() || is.windowsPhone()
//     }, is.mobile.api = ["not"], is.offline = not(is.online), is.offline.api = ["not"], is.online = function() {
//         return !navigator || navigator.onLine === !0
//     }, is.online.api = ["not"], is.opera = function(range) {
//         var match = userAgent.match(/(?:^opera.+?version|opr)\/(\d+)/);
//         return null !== match && compareVersion(match[1], range)
//     }, is.opera.api = ["not"], is.phantom = function(range) {
//         var match = userAgent.match(/phantomjs\/(\d+)/);
//         return null !== match && compareVersion(match[1], range)
//     }, is.phantom.api = ["not"], is.safari = function(range) {
//         var match = userAgent.match(/version\/(\d+).+?safari/);
//         return null !== match && compareVersion(match[1], range)
//     }, is.safari.api = ["not"], is.tablet = function() {
//         return is.ipad() || is.androidTablet() || is.windowsTablet()
//     }, is.tablet.api = ["not"], is.touchDevice = function() {
//         return !!document && ("ontouchstart" in freeSelf || "DocumentTouch" in freeSelf && document instanceof DocumentTouch)
//     }, is.touchDevice.api = ["not"], is.windows = function() {
//         return /win/.test(appVersion)
//     }, is.windows.api = ["not"], is.windowsPhone = function() {
//         return is.windows() && /phone/.test(userAgent)
//     }, is.windowsPhone.api = ["not"], is.windowsTablet = function() {
//         return is.windows() && is.not.windowsPhone() && /touch/.test(userAgent)
//     }, is.windowsTablet.api = ["not"], is.propertyCount = function(object, count) {
//         if (is.not.object(object) || is.not.number(count)) return !1;
//         var n = 0;
//         for (var property in object)
//             if (hasOwnProperty.call(object, property) && ++n > count) return !1;
//         return n === count
//     }, is.propertyCount.api = ["not"], is.propertyDefined = function(object, property) {
//         return is.object(object) && is.string(property) && property in object
//     }, is.propertyDefined.api = ["not"], is.inArray = function(value, array) {
//         if (is.not.array(array)) return !1;
//         for (var i = 0; i < array.length; i++)
//             if (array[i] === value) return !0;
//         return !1
//     }, is.inArray.api = ["not"], is.sorted = function(array, sign) {
//         if (is.not.array(array)) return !1;
//         for (var predicate = comparator[sign] || comparator[">="], i = 1; i < array.length; i++)
//             if (!predicate(array[i], array[i - 1])) return !1;
//         return !0
//     }, setInterfaces(), is.setNamespace = function() {
//         return root.is = previousIs, this
//     }, is.setRegexp = function(regexp, name) {
//         for (var r in regexes) hasOwnProperty.call(regexes, r) && name === r && (regexes[r] = regexp)
//     }, is
// }),
// function(factory) {
//     "use strict";
//     "function" == typeof define && define.amd ? define(["jquery"], factory) : factory(jQuery)
// }(function(jQuery) {
//     "use strict";

//     function parseDateString(dateString) {
//         if (dateString instanceof Date) return dateString;
//         if (String(dateString).match(matchers)) return String(dateString).match(/^[0-9]*jQuery/) && (dateString = Number(dateString)), String(dateString).match(/\-/) && (dateString = String(dateString).replace(/\-/g, "/")), new Date(dateString);
//         throw new Error("Couldn't cast `" + dateString + "` to a date object.")
//     }

//     function escapedRegExp(str) {
//         var sanitize = str.toString().replace(/([.?*+^jQuery[\]\\(){}|-])/g, "\\jQuery1");
//         return new RegExp(sanitize)
//     }

//     function strftime(offsetObject) {
//         return function(format) {
//             var directives = format.match(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi);
//             if (directives)
//                 for (var i = 0, len = directives.length; i < len; ++i) {
//                     var directive = directives[i].match(/%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/),
//                         regexp = escapedRegExp(directive[0]),
//                         modifier = directive[1] || "",
//                         plural = directive[3] || "",
//                         value = null;
//                     directive = directive[2], DIRECTIVE_KEY_MAP.hasOwnProperty(directive) && (value = DIRECTIVE_KEY_MAP[directive], value = Number(offsetObject[value])), null !== value && ("!" === modifier && (value = pluralize(plural, value)), "" === modifier && value < 10 && (value = "0" + value.toString()), format = format.replace(regexp, value.toString()))
//                 }
//             return format = format.replace(/%%/, "%")
//         }
//     }

//     function pluralize(format, count) {
//         var plural = "s",
//             singular = "";
//         return format && (format = format.replace(/(:|;|\s)/gi, "").split(/\,/), 1 === format.length ? plural = format[0] : (singular = format[0], plural = format[1])), Math.abs(count) > 1 ? plural : singular
//     }
//     var instances = [],
//         matchers = [],
//         defaultOptions = {
//             precision: 100,
//             elapse: !1,
//             defer: !1
//         };
//     matchers.push(/^[0-9]*jQuery/.source), matchers.push(/([0-9]{1,2}\/){2}[0-9]{4}( [0-9]{1,2}(:[0-9]{2}){2})?/.source), matchers.push(/[0-9]{4}([\/\-][0-9]{1,2}){2}( [0-9]{1,2}(:[0-9]{2}){2})?/.source), matchers = new RegExp(matchers.join("|"));
//     var DIRECTIVE_KEY_MAP = {
//             Y: "years",
//             m: "months",
//             n: "daysToMonth",
//             d: "daysToWeek",
//             w: "weeks",
//             W: "weeksToMonth",
//             H: "hours",
//             M: "minutes",
//             S: "seconds",
//             D: "totalDays",
//             I: "totalHours",
//             N: "totalMinutes",
//             T: "totalSeconds"
//         },
//         Countdown = function(el, finalDate, options) {
//             this.el = el, this.jQueryel = jQuery(el), this.interval = null, this.offset = {}, this.options = jQuery.extend({}, defaultOptions), this.firstTick = !0, this.instanceNumber = instances.length, instances.push(this), this.jQueryel.data("countdown-instance", this.instanceNumber), options && ("function" == typeof options ? (this.jQueryel.on("update.countdown", options), this.jQueryel.on("stoped.countdown", options), this.jQueryel.on("finish.countdown", options)) : this.options = jQuery.extend({}, defaultOptions, options)), this.setFinalDate(finalDate), this.options.defer === !1 && this.start()
//         };
//     jQuery.extend(Countdown.prototype, {
//         start: function() {
//             null !== this.interval && clearInterval(this.interval);
//             var self = this;
//             this.update(), this.interval = setInterval(function() {
//                 self.update.call(self)
//             }, this.options.precision)
//         },
//         stop: function() {
//             clearInterval(this.interval), this.interval = null, this.dispatchEvent("stoped");
//         },
//         toggle: function() {
//             this.interval ? this.stop() : this.start()
//         },
//         pause: function() {
//             this.stop()
//         },
//         resume: function() {
//             this.start()
//         },
//         remove: function() {
//             this.stop.call(this), instances[this.instanceNumber] = null, delete this.jQueryel.data().countdownInstance
//         },
//         setFinalDate: function(value) {
//             this.finalDate = parseDateString(value)
//         },
//         update: function() {
//             if (0 === this.jQueryel.closest("html").length) return void this.remove();
//             var newTotalSecsLeft, now = new Date;
//             return newTotalSecsLeft = this.finalDate.getTime() - now.getTime(), newTotalSecsLeft = Math.ceil(newTotalSecsLeft / 1e3), newTotalSecsLeft = !this.options.elapse && newTotalSecsLeft < 0 ? 0 : Math.abs(newTotalSecsLeft), this.totalSecsLeft === newTotalSecsLeft || this.firstTick ? void(this.firstTick = !1) : (this.totalSecsLeft = newTotalSecsLeft, this.elapsed = now >= this.finalDate, this.offset = {
//                 seconds: this.totalSecsLeft % 60,
//                 minutes: Math.floor(this.totalSecsLeft / 60) % 60,
//                 hours: Math.floor(this.totalSecsLeft / 60 / 60) % 24,
//                 days: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
//                 daysToWeek: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
//                 daysToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 % 30.4368),
//                 weeks: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7),
//                 weeksToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7) % 4,
//                 months: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 30.4368),
//                 years: Math.abs(this.finalDate.getFullYear() - now.getFullYear()),
//                 totalDays: Math.floor(this.totalSecsLeft / 60 / 60 / 24),
//                 totalHours: Math.floor(this.totalSecsLeft / 60 / 60),
//                 totalMinutes: Math.floor(this.totalSecsLeft / 60),
//                 totalSeconds: this.totalSecsLeft
//             }, void(this.options.elapse || 0 !== this.totalSecsLeft ? this.dispatchEvent("update") : (this.stop(), this.dispatchEvent("finish"))))
//         },
//         dispatchEvent: function(eventName) {
//             var event = jQuery.Event(eventName + ".countdown");
//             event.finalDate = this.finalDate, event.elapsed = this.elapsed, event.offset = jQuery.extend({}, this.offset), event.strftime = strftime(this.offset), this.jQueryel.trigger(event)
//         }
//     }), jQuery.fn.countdown = function() {
//         var argumentsArray = Array.prototype.slice.call(arguments, 0);
//         return this.each(function() {
//             var instanceNumber = jQuery(this).data("countdown-instance");
//             if (void 0 !== instanceNumber) {
//                 var instance = instances[instanceNumber],
//                     method = argumentsArray[0];
//                 Countdown.prototype.hasOwnProperty(method) ? instance[method].apply(instance, argumentsArray.slice(1)) : null === String(method).match(/^[jQueryA-Z_][0-9A-Z_jQuery]*jQuery/i) ? (instance.setFinalDate.call(instance, method), instance.start()) : jQuery.error("Method %s does not exist on jQuery.countdown".replace(/\%s/gi, method))
//             } else new Countdown(this, argumentsArray[0], argumentsArray[1])
//         })
//     }
// }),
// function(jQuery) {
//     "use strict";

//     function isMobileBrowser() {
//         var check = !1;
//         return function(a) {
//             (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) && (check = !0)
//         }(navigator.userAgent || navigator.vendor || window.opera), check
//     }

//     function checkPrecision(value, minValue, maxValue) {
//         return value === minValue ? value = minValue : value === maxValue && (value = maxValue), value
//     }

//     function checkBounds(value, minValue, maxValue) {
//         var isValid = value >= minValue && value <= maxValue;
//         if (!isValid) throw Error("Invalid Rating, expected value between " + minValue + " and " + maxValue);
//         return value
//     }

//     function isDefined(value) {
//         return "undefined" != typeof value
//     }

//     function getChannelValue(startVal, endVal, percent) {
//         var newVal = (endVal - startVal) * (percent / 100);
//         return newVal = Math.round(startVal + newVal).toString(16), 1 === newVal.length && (newVal = "0" + newVal), newVal
//     }

//     function getColor(startColor, endColor, percent) {
//         if (!startColor || !endColor) return null;
//         percent = isDefined(percent) ? percent : 0, startColor = hexToRGB(startColor), endColor = hexToRGB(endColor);
//         var r = getChannelValue(startColor.r, endColor.r, percent),
//             b = getChannelValue(startColor.b, endColor.b, percent),
//             g = getChannelValue(startColor.g, endColor.g, percent);
//         return "#" + r + g + b
//     }

//     function RateYo(jQuerynode, options) {
//         function showRating(ratingVal) {
//             isDefined(ratingVal) || (ratingVal = options.rating), currentRating = ratingVal;
//             var numStarsToShow = ratingVal / step,
//                 percent = numStarsToShow * percentOfStar;
//             numStarsToShow > 1 && (percent += (Math.ceil(numStarsToShow) - 1) * percentOfSpacing), setRatedFill(options.ratedFill), percent = options.rtl ? 100 - percent : percent, percent < 0 ? percent = 0 : percent > 100 && (percent = 100), jQueryratedGroup.css("width", percent + "%")
//         }

//         function setContainerWidth() {
//             containerWidth = starWidth * options.numStars + spacing * (options.numStars - 1), percentOfStar = starWidth / containerWidth * 100, percentOfSpacing = spacing / containerWidth * 100, jQuerynode.width(containerWidth), showRating()
//         }

//         function setStarWidth(newWidth) {
//             var starHeight = options.starWidth = newWidth;
//             return starWidth = window.parseFloat(options.starWidth.replace("px", "")), jQuerynormalGroup.find("svg").attr({
//                 width: options.starWidth,
//                 height: starHeight
//             }), jQueryratedGroup.find("svg").attr({
//                 width: options.starWidth,
//                 height: starHeight
//             }), setContainerWidth(), jQuerynode
//         }

//         function setSpacing(newSpacing) {
//             return options.spacing = newSpacing, spacing = parseFloat(options.spacing.replace("px", "")), jQuerynormalGroup.find("svg:not(:first-child)").css({
//                 "margin-left": newSpacing
//             }), jQueryratedGroup.find("svg:not(:first-child)").css({
//                 "margin-left": newSpacing
//             }), setContainerWidth(), jQuerynode
//         }

//         function setNormalFill(newFill) {
//             options.normalFill = newFill;
//             var jQuerysvgs = (options.rtl ? jQueryratedGroup : jQuerynormalGroup).find("svg");
//             return jQuerysvgs.attr({
//                 fill: options.normalFill
//             }), jQuerynode
//         }

//         function setRatedFill(newFill) {
//             if (options.multiColor) {
//                 var ratingDiff = currentRating - minValue,
//                     percentCovered = ratingDiff / options.maxValue * 100,
//                     colorOpts = options.multiColor || {},
//                     startColor = colorOpts.startColor || MULTICOLOR_OPTIONS.startColor,
//                     endColor = colorOpts.endColor || MULTICOLOR_OPTIONS.endColor;
//                 newFill = getColor(startColor, endColor, percentCovered)
//             } else ratedFill = newFill;
//             options.ratedFill = newFill;
//             var jQuerysvgs = (options.rtl ? jQuerynormalGroup : jQueryratedGroup).find("svg");
//             return jQuerysvgs.attr({
//                 fill: options.ratedFill
//             }), jQuerynode
//         }

//         function setRtl(newValue) {
//             newValue = !!newValue, options.rtl = newValue, setNormalFill(options.normalFill), showRating()
//         }

//         function setMultiColor(colorOptions) {
//             options.multiColor = colorOptions, setRatedFill(colorOptions ? colorOptions : ratedFill)
//         }

//         function setNumStars(newValue) {
//             options.numStars = newValue, step = options.maxValue / options.numStars, jQuerynormalGroup.empty(), jQueryratedGroup.empty();
//             for (var i = 0; i < options.numStars; i++) jQuerynormalGroup.append(jQuery(options.starSvgEmpty || BASICSTAR)), jQueryratedGroup.append(jQuery(options.starSvg || BASICSTAR));
//             return setStarWidth(options.starWidth), setNormalFill(options.normalFill), setSpacing(options.spacing), showRating(), jQuerynode
//         }

//         function setMaxValue(newValue) {
//             return options.maxValue = newValue, step = options.maxValue / options.numStars, options.rating > newValue && setRating(newValue), showRating(), jQuerynode
//         }

//         function setPrecision(newValue) {
//             return options.precision = newValue, setRating(options.rating), jQuerynode
//         }

//         function setHalfStar(newValue) {
//             return options.halfStar = newValue, jQuerynode
//         }

//         function setFullStar(newValue) {
//             return options.fullStar = newValue, jQuerynode
//         }

//         function round(value) {
//             var remainder = value % step,
//                 halfStep = step / 2,
//                 isHalfStar = options.halfStar,
//                 isFullStar = options.fullStar;
//             return isFullStar || isHalfStar ? (isFullStar || isHalfStar && remainder > halfStep ? value += step - remainder : (value -= remainder, remainder > 0 && (value += halfStep)), value) : value
//         }

//         function calculateRating(e) {
//             var position = jQuerynormalGroup.offset(),
//                 nodeStartX = position.left,
//                 nodeEndX = nodeStartX + jQuerynormalGroup.width(),
//                 maxValue = options.maxValue,
//                 pageX = e.pageX,
//                 calculatedRating = 0;
//             if (pageX < nodeStartX) calculatedRating = minValue;
//             else if (pageX > nodeEndX) calculatedRating = maxValue;
//             else {
//                 var calcPrcnt = (pageX - nodeStartX) / (nodeEndX - nodeStartX);
//                 if (spacing > 0) {
//                     calcPrcnt *= 100;
//                     for (var remPrcnt = calcPrcnt; remPrcnt > 0;) remPrcnt > percentOfStar ? (calculatedRating += step, remPrcnt -= percentOfStar + percentOfSpacing) : (calculatedRating += remPrcnt / percentOfStar * step, remPrcnt = 0)
//                 } else calculatedRating = calcPrcnt * options.maxValue;
//                 calculatedRating = round(calculatedRating)
//             }
//             return options.rtl && (calculatedRating = maxValue - calculatedRating), parseFloat(calculatedRating)
//         }

//         function setReadOnly(newValue) {
//             return options.readOnly = newValue, jQuerynode.attr("readonly", !0), unbindEvents(), newValue || (jQuerynode.removeAttr("readonly"), bindEvents()), jQuerynode
//         }

//         function setRating(newValue) {
//             var rating = newValue,
//                 maxValue = options.maxValue;
//             return "string" == typeof rating && ("%" === rating[rating.length - 1] && (rating = rating.substr(0, rating.length - 1), maxValue = 100, setMaxValue(maxValue)), rating = parseFloat(rating)), checkBounds(rating, minValue, maxValue), rating = parseFloat(rating.toFixed(options.precision)), checkPrecision(parseFloat(rating), minValue, maxValue), options.rating = rating, showRating(), isInitialized && jQuerynode.trigger("rateyo.set", {
//                 rating: rating
//             }), jQuerynode
//         }

//         function setOnInit(method) {
//             return options.onInit = method, jQuerynode
//         }

//         function setOnSet(method) {
//             return options.onSet = method, jQuerynode
//         }

//         function setOnChange(method) {
//             return options.onChange = method, jQuerynode
//         }

//         function onMouseEnter(e) {
//             var rating = calculateRating(e).toFixed(options.precision),
//                 maxValue = options.maxValue;
//             rating = checkPrecision(parseFloat(rating), minValue, maxValue), showRating(rating), jQuerynode.trigger("rateyo.change", {
//                 rating: rating
//             })
//         }

//         function onMouseLeave() {
//             isMobileBrowser() || (showRating(), jQuerynode.trigger("rateyo.change", {
//                 rating: options.rating
//             }))
//         }

//         function onMouseClick(e) {
//             var resultantRating = calculateRating(e).toFixed(options.precision);
//             resultantRating = parseFloat(resultantRating), that.rating(resultantRating)
//         }

//         function onInit(e, data) {
//             options.onInit && "function" == typeof options.onInit && options.onInit.apply(this, [data.rating, that])
//         }

//         function onChange(e, data) {
//             options.onChange && "function" == typeof options.onChange && options.onChange.apply(this, [data.rating, that])
//         }

//         function onSet(e, data) {
//             options.onSet && "function" == typeof options.onSet && options.onSet.apply(this, [data.rating, that])
//         }

//         function bindEvents() {
//             jQuerynode.on("mousemove", onMouseEnter).on("mouseenter", onMouseEnter).on("mouseleave", onMouseLeave).on("click", onMouseClick).on("rateyo.init", onInit).on("rateyo.change", onChange).on("rateyo.set", onSet)
//         }

//         function unbindEvents() {
//             jQuerynode.off("mousemove", onMouseEnter).off("mouseenter", onMouseEnter).off("mouseleave", onMouseLeave).off("click", onMouseClick).off("rateyo.init", onInit).off("rateyo.change", onChange).off("rateyo.set", onSet)
//         }
//         this.node = jQuerynode.get(0);
//         var that = this;
//         jQuerynode.empty().addClass("jq-ry-container");
//         var step, starWidth, percentOfStar, spacing, percentOfSpacing, containerWidth, jQuerygroupWrapper = jQuery("<div/>").addClass("jq-ry-group-wrapper").appendTo(jQuerynode),
//             jQuerynormalGroup = jQuery("<div/>").addClass("jq-ry-normal-group").addClass("jq-ry-group").appendTo(jQuerygroupWrapper),
//             jQueryratedGroup = jQuery("<div/>").addClass("jq-ry-rated-group").addClass("jq-ry-group").appendTo(jQuerygroupWrapper),
//             minValue = 0,
//             currentRating = options.rating,
//             isInitialized = !1,
//             ratedFill = options.ratedFill;
//         this.rating = function(newValue) {
//             return isDefined(newValue) ? (setRating(newValue), jQuerynode) : options.rating
//         }, this.destroy = function() {
//             return options.readOnly || unbindEvents(), RateYo.prototype.collection = deleteInstance(jQuerynode.get(0), this.collection), jQuerynode.removeClass("jq-ry-container").children().remove(), jQuerynode
//         }, this.method = function(methodName) {
//             if (!methodName) throw Error("Method name not specified!");
//             if (!isDefined(this[methodName])) throw Error("Method " + methodName + " doesn't exist!");
//             var args = Array.prototype.slice.apply(arguments, []),
//                 params = args.slice(1),
//                 method = this[methodName];
//             return method.apply(this, params)
//         }, this.option = function(optionName, param) {
//             if (!isDefined(optionName)) return options;
//             var method;
//             switch (optionName) {
//                 case "starWidth":
//                     method = setStarWidth;
//                     break;
//                 case "numStars":
//                     method = setNumStars;
//                     break;
//                 case "normalFill":
//                     method = setNormalFill;
//                     break;
//                 case "ratedFill":
//                     method = setRatedFill;
//                     break;
//                 case "multiColor":
//                     method = setMultiColor;
//                     break;
//                 case "maxValue":
//                     method = setMaxValue;
//                     break;
//                 case "precision":
//                     method = setPrecision;
//                     break;
//                 case "rating":
//                     method = setRating;
//                     break;
//                 case "halfStar":
//                     method = setHalfStar;
//                     break;
//                 case "fullStar":
//                     method = setFullStar;
//                     break;
//                 case "readOnly":
//                     method = setReadOnly;
//                     break;
//                 case "spacing":
//                     method = setSpacing;
//                     break;
//                 case "rtl":
//                     method = setRtl;
//                     break;
//                 case "onInit":
//                     method = setOnInit;
//                     break;
//                 case "onSet":
//                     method = setOnSet;
//                     break;
//                 case "onChange":
//                     method = setOnChange;
//                     break;
//                 default:
//                     throw Error("No such option as " + optionName)
//             }
//             return isDefined(param) ? method(param) : options[optionName]
//         }, setNumStars(options.numStars), setReadOnly(options.readOnly), options.rtl && setRtl(options.rtl), this.collection.push(this), this.rating(options.rating, !0), isInitialized = !0, jQuerynode.trigger("rateyo.init", {
//             rating: options.rating
//         })
//     }

//     function getInstance(node, collection) {
//         var instance;
//         return jQuery.each(collection, function() {
//             if (node === this.node) return instance = this, !1
//         }), instance
//     }

//     function deleteInstance(node, collection) {
//         return jQuery.each(collection, function(index) {
//             if (node === this.node) {
//                 var firstPart = collection.slice(0, index),
//                     secondPart = collection.slice(index + 1, collection.length);
//                 return collection = firstPart.concat(secondPart), !1
//             }
//         }), collection
//     }

//     function _rateYo(options) {
//         var rateYoInstances = RateYo.prototype.collection,
//             jQuerynodes = jQuery(this);
//         if (0 === jQuerynodes.length) return jQuerynodes;
//         var args = Array.prototype.slice.apply(arguments, []);
//         if (0 === args.length) options = args[0] = {};
//         else {
//             if (1 !== args.length || "object" != typeof args[0]) {
//                 if (args.length >= 1 && "string" == typeof args[0]) {
//                     var methodName = args[0],
//                         params = args.slice(1),
//                         result = [];
//                     return jQuery.each(jQuerynodes, function(i, node) {
//                         var existingInstance = getInstance(node, rateYoInstances);
//                         if (!existingInstance) throw Error("Trying to set options before even initialization");
//                         var method = existingInstance[methodName];
//                         if (!method) throw Error("Method " + methodName + " does not exist!");
//                         var returnVal = method.apply(existingInstance, params);
//                         result.push(returnVal)
//                     }), result = 1 === result.length ? result[0] : result
//                 }
//                 throw Error("Invalid Arguments")
//             }
//             options = args[0]
//         }
//         return options = jQuery.extend({}, DEFAULTS, options), jQuery.each(jQuerynodes, function() {
//             var existingInstance = getInstance(this, rateYoInstances);
//             if (existingInstance) return existingInstance;
//             var jQuerynode = jQuery(this),
//                 dataAttrs = {},
//                 optionsCopy = jQuery.extend({}, options);
//             return jQuery.each(jQuerynode.data(), function(key, value) {
//                 if (0 === key.indexOf("rateyo")) {
//                     var optionName = key.replace(/^rateyo/, "");
//                     optionName = optionName[0].toLowerCase() + optionName.slice(1), dataAttrs[optionName] = value, delete optionsCopy[optionName]
//                 }
//             }), new RateYo(jQuery(this), jQuery.extend({}, dataAttrs, optionsCopy))
//         })
//     }

//     function rateYo() {
//         return _rateYo.apply(this, Array.prototype.slice.apply(arguments, []))
//     }
//     var BASICSTAR = '<?xml version="1.0" encoding="utf-8"?><svg version="1.1"xmlns="http://www.w3.org/2000/svg"viewBox="0 12.705 512 486.59"x="0px" y="0px"xml:space="preserve"><polygon points="256.814,12.705 317.205,198.566 512.631,198.566 354.529,313.435 414.918,499.295 256.814,384.427 98.713,499.295 159.102,313.435 1,198.566 196.426,198.566 "/></svg>',
//         DEFAULTS = {
//             starWidth: "32px",
//             normalFill: "gray",
//             ratedFill: "#f39c12",
//             numStars: 5,
//             maxValue: 5,
//             precision: 1,
//             rating: 0,
//             fullStar: !1,
//             halfStar: !1,
//             readOnly: !1,
//             spacing: "0px",
//             rtl: !1,
//             multiColor: null,
//             onInit: null,
//             onChange: null,
//             onSet: null,
//             starSvgEmpty: null,
//             starSvg: null
//         },
//         MULTICOLOR_OPTIONS = {
//             startColor: "#c0392b",
//             endColor: "#f1c40f"
//         },
//         hexRegex = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})jQuery/i,
//         hexToRGB = function(hex) {
//             if (!hexRegex.test(hex)) return null;
//             var hexValues = hexRegex.exec(hex),
//                 r = parseInt(hexValues[1], 16),
//                 g = parseInt(hexValues[2], 16),
//                 b = parseInt(hexValues[3], 16);
//             return {
//                 r: r,
//                 g: g,
//                 b: b
//             }
//         };
//     RateYo.prototype.collection = [], window.RateYo = RateYo, jQuery.fn.rateYo = rateYo
// }(window.jQuery),
// function(jQuery) {
//     jQuery.fn.ratings = function() {
//         var ns = {
//             enable: function(elms, silent) {
//                 return elms.each(function() {
//                     jQuery(this).removeClass("disabled"), silent !== !0 && jQuery(this).trigger("ratings:enabled", [this.__ratings])
//                 }), ns.set(elms, "enabled", !0, silent)
//             },
//             disable: function(elms, silent) {
//                 return elms.each(function() {
//                     jQuery(this).addClass("disabled"), silent !== !0 && jQuery(this).trigger("ratings:disabled", [this.__ratings])
//                 }), ns.set(elms, "enabled", !1, silent)
//             },
//             draw: function(elm) {
//                 jQuery(elm).html("");
//                 for (var conf = elm.__ratings, contEmpty = jQuery('<span class="ratings-empty" />').appendTo(jQuery(elm)), contFull = jQuery('<span class="ratings-full" />').appendTo(jQuery(elm)), countFull = (conf.max - countFull, Math.ceil(conf.value)), i = 0; i < conf.max; i++) contEmpty.append(conf.icons.empty), contFull.append(conf.icons.full);
//                 var per = conf.value / conf.max,
//                     w = per * contEmpty.innerWidth(),
//                     h = contEmpty.innerHeight();
//                 return jQuery(elm).css({
//                     opacity: 1,
//                     width: contEmpty.innerWidth(),
//                     height: contEmpty.innerHeight()
//                 }), contFull.css({
//                     width: w + "px",
//                     height: h + "px"
//                 }), elm
//             },
//             init: function(elms, params) {
//                 return elms.each(function() {
//                     var defaults = {
//                             enabled: !0,
//                             max: 5,
//                             icons: {
//                                 empty: '<svg width="32" height="32" viewBox="0 0 32 32"><path d="M16 23l9 6-4-10 9-6h-10l-4-10-4 10h-10l9 6-4 10 9-6zM16 21.753l-6.8 4.547 3.2-7.7-7.2-4.6h7.5l3.3-8.5 3.3 8.5h7.5l-7.2 4.6 3.2 7.7-6.8-4.547z"></path></svg>',
//                                 full: '<svg width="32" height="32" viewBox="0 0 32 32"><path d="M16 23l-9 6 4-10-9-6h10l4-10 4 10h10l-9 6 4 10z"></path></svg>'
//                             },
//                             value: 0
//                         },
//                         d = jQuery(this).data("ratings");
//                     this.__ratings = jQuery.extend(defaults, params), this.__ratings = jQuery.extend(this.__ratings, d);
//                     var conf = this.__ratings,
//                         exp = new RegExp(/<\/?[\w\s="\/.':;#-\/\?]+>/gi),
//                         ratingsEmpty = exp.test(conf.icons.empty) === !0 ? conf.icons.empty : jQuery(this).find(conf.icons.empty).html(),
//                         ratingsFull = exp.test(conf.icons.full) === !0 ? conf.icons.full : jQuery(this).find(conf.icons.full).html();
//                     this.__ratings.icons.empty = ratingsEmpty, this.__ratings.icons.full = ratingsFull, ns.draw(this), jQuery(this).on("mousemove", ns.onMouseMove), jQuery(this).on("mouseout", ns.onMouseOut), jQuery(this).on("mouseup", ns.onMouseUp)
//                 })
//             },
//             onMouseMove: function(e) {
//                 if (!(e.buttons < 1)) {
//                     var conf = jQuery(this)[0].__ratings;
//                     conf.enabled === !0 && ns.rate(jQuery(this)[0], e, !0)
//                 }
//             },
//             onMouseOut: function(e) {
//                 if (!(e.buttons < 1)) {
//                     var conf = jQuery(this)[0].__ratings;
//                     conf.enabled === !0 && ns.rate(jQuery(this)[0], e)
//                 }
//             },
//             onMouseUp: function(e) {
//                 var conf = jQuery(this)[0].__ratings;
//                 conf.enabled === !0 && ns.rate(jQuery(this)[0], e)
//             },
//             rate: function(elm, e, silent) {
//                 var conf = elm.__ratings;
//                 if ("undefined" != typeof conf) {
//                     var x = e.pageX - jQuery(elm).offset().left,
//                         p = x / jQuery(elm).outerWidth(),
//                         v = Number(conf.max * p);
//                     v = Number((Math.round(2 * v) / 2).toFixed(1)), jQuery(elm).ratings("value", v, !0), silent !== !0 && jQuery(elm).trigger("ratings:change", [v])
//                 }
//             },
//             redraw: function(elms, silent) {
//                 elms.each(function() {
//                     ns.draw(this), silent !== !0 && jQuery(this).trigger("ratings:redrawn", [this.__ratings])
//                 })
//             },
//             resize: function(elm) {
//                 var conf = elm.__ratings;
//                 if ("undefined" != typeof conf) {
//                     var contEmpty = jQuery(elm).find(".ratings-empty"),
//                         contFull = jQuery(elm).find(".ratings-full");
//                     if (!(contFull.length < 1 || contEmpty.length < 1)) {
//                         var per = conf.value / conf.max,
//                             w = per * contEmpty.innerWidth();
//                         w = Math.ceil(w), jQuery(elm).css({
//                             opacity: 1
//                         }), contFull.css({
//                             width: w + "px"
//                         })
//                     }
//                 }
//             },
//             set: function(elms, property, newValue, silent) {
//                 return elms.each(function() {
//                     this.__ratings[property] = newValue, "max" === property && (this.__ratings.value = Math.min(this.__ratings.value, this.__ratings.max)), "value" === property ? (this.__ratings.value = Math.min(this.__ratings.value, this.__ratings.max), ns.resize(this)) : ns.draw(this), silent !== !0 && (jQuery(this).trigger("ratings:update", [this.__ratings]), jQuery(this).trigger("ratings:update." + property, [this.__ratings]))
//                 })
//             }
//         };
//         switch (arguments[0]) {
//             case "disable":
//                 return ns.disable(this, arguments[1]);
//             case "enable":
//                 return ns.enable(this, arguments[1]);
//             case "get":
//                 return this[0].__ratings[arguments[1]];
//             case "max":
//                 return ns.set(this, "max", arguments[1], arguments[2]);
//             case "redraw":
//                 return ns.redraw(this, arguments[1]);
//             case "value":
//                 return ns.set(this, "value", arguments[1], arguments[2]);
//             default:
//                 return ns.init(this, arguments[0])
//         }
//     }, jQuery("[data-ratings]").ratings()
// }(window.jQuery),
// function(factory) {
//     "function" == typeof define && define.amd ? define(["jquery"], factory) : factory("object" == typeof module && module.exports ? require("jquery") : jQuery)
// }(function(jQuery) {
//     var version = "2.2.0",
//         optionOverrides = {},
//         defaults = {
//             exclude: [],
//             excludeWithin: [],
//             offset: 0,
//             direction: "top",
//             delegateSelector: null,
//             scrollElement: null,
//             scrollTarget: null,
//             autoFocus: !1,
//             beforeScroll: function() {},
//             afterScroll: function() {},
//             easing: "swing",
//             speed: 400,
//             autoCoefficient: 2,
//             preventDefault: !0
//         },
//         getScrollable = function(opts) {
//             var scrollable = [],
//                 scrolled = !1,
//                 dir = opts.dir && "left" === opts.dir ? "scrollLeft" : "scrollTop";
//             return this.each(function() {
//                 var el = jQuery(this);
//                 if (this !== document && this !== window) return !document.scrollingElement || this !== document.documentElement && this !== document.body ? void(el[dir]() > 0 ? scrollable.push(this) : (el[dir](1), scrolled = el[dir]() > 0, scrolled && scrollable.push(this), el[dir](0))) : (scrollable.push(document.scrollingElement), !1)
//             }), scrollable.length || this.each(function() {
//                 this === document.documentElement && "smooth" === jQuery(this).css("scrollBehavior") && (scrollable = [this]), scrollable.length || "BODY" !== this.nodeName || (scrollable = [this])
//             }), "first" === opts.el && scrollable.length > 1 && (scrollable = [scrollable[0]]), scrollable
//         },
//         rRelative = /^([\-\+]=)(\d+)/;
//     jQuery.fn.extend({
//         scrollable: function(dir) {
//             var scrl = getScrollable.call(this, {
//                 dir: dir
//             });
//             return this.pushStack(scrl)
//         },
//         firstScrollable: function(dir) {
//             var scrl = getScrollable.call(this, {
//                 el: "first",
//                 dir: dir
//             });
//             return this.pushStack(scrl)
//         },
//         smoothScroll: function(options, extra) {
//             if (options = options || {}, "options" === options) return extra ? this.each(function() {
//                 var jQuerythis = jQuery(this),
//                     opts = jQuery.extend(jQuerythis.data("ssOpts") || {}, extra);
//                 jQuery(this).data("ssOpts", opts)
//             }) : this.first().data("ssOpts");
//             var opts = jQuery.extend({}, jQuery.fn.smoothScroll.defaults, options),
//                 clickHandler = function(event) {
//                     var escapeSelector = function(str) {
//                             return str.replace(/(:|\.|\/)/g, "\\jQuery1")
//                         },
//                         link = this,
//                         jQuerylink = jQuery(this),
//                         thisOpts = jQuery.extend({}, opts, jQuerylink.data("ssOpts") || {}),
//                         exclude = opts.exclude,
//                         excludeWithin = thisOpts.excludeWithin,
//                         elCounter = 0,
//                         ewlCounter = 0,
//                         include = !0,
//                         clickOpts = {},
//                         locationPath = jQuery.smoothScroll.filterPath(location.pathname),
//                         linkPath = jQuery.smoothScroll.filterPath(link.pathname),
//                         hostMatch = location.hostname === link.hostname || !link.hostname,
//                         pathMatch = thisOpts.scrollTarget || linkPath === locationPath,
//                         thisHash = escapeSelector(link.hash);
//                     if (thisHash && !jQuery(thisHash).length && (include = !1), thisOpts.scrollTarget || hostMatch && pathMatch && thisHash) {
//                         for (; include && elCounter < exclude.length;) jQuerylink.is(escapeSelector(exclude[elCounter++])) && (include = !1);
//                         for (; include && ewlCounter < excludeWithin.length;) jQuerylink.closest(excludeWithin[ewlCounter++]).length && (include = !1)
//                     } else include = !1;
//                     include && (thisOpts.preventDefault && event.preventDefault(), jQuery.extend(clickOpts, thisOpts, {
//                         scrollTarget: thisOpts.scrollTarget || thisHash,
//                         link: link
//                     }), jQuery.smoothScroll(clickOpts))
//                 };
//             return null !== options.delegateSelector ? this.off("click.smoothscroll", options.delegateSelector).on("click.smoothscroll", options.delegateSelector, clickHandler) : this.off("click.smoothscroll").on("click.smoothscroll", clickHandler), this
//         }
//     });
//     var getExplicitOffset = function(val) {
//             var explicit = {
//                     relative: ""
//                 },
//                 parts = "string" == typeof val && rRelative.exec(val);
//             return "number" == typeof val ? explicit.px = val : parts && (explicit.relative = parts[1], explicit.px = parseFloat(parts[2]) || 0), explicit
//         },
//         onAfterScroll = function(opts) {
//             var jQuerytgt = jQuery(opts.scrollTarget);
//             opts.autoFocus && jQuerytgt.length && (jQuerytgt[0].focus(), jQuerytgt.is(document.activeElement) || (jQuerytgt.prop({
//                 tabIndex: -1
//             }), jQuerytgt[0].focus())), opts.afterScroll.call(opts.link, opts)
//         };
//     jQuery.smoothScroll = function(options, px) {
//         if ("options" === options && "object" == typeof px) return jQuery.extend(optionOverrides, px);
//         var opts, jQueryscroller, speed, delta, explicitOffset = getExplicitOffset(options),
//             scrollTargetOffset = {},
//             scrollerOffset = 0,
//             offPos = "offset",
//             scrollDir = "scrollTop",
//             aniProps = {},
//             aniOpts = {};
//         explicitOffset.px ? opts = jQuery.extend({
//             link: null
//         }, jQuery.fn.smoothScroll.defaults, optionOverrides) : (opts = jQuery.extend({
//             link: null
//         }, jQuery.fn.smoothScroll.defaults, options || {}, optionOverrides), opts.scrollElement && (offPos = "position", "static" === opts.scrollElement.css("position") && opts.scrollElement.css("position", "relative")), px && (explicitOffset = getExplicitOffset(px))), scrollDir = "left" === opts.direction ? "scrollLeft" : scrollDir, opts.scrollElement ? (jQueryscroller = opts.scrollElement, explicitOffset.px || /^(?:HTML|BODY)jQuery/.test(jQueryscroller[0].nodeName) || (scrollerOffset = jQueryscroller[scrollDir]())) : jQueryscroller = jQuery("html, body").firstScrollable(opts.direction), opts.beforeScroll.call(jQueryscroller, opts), scrollTargetOffset = explicitOffset.px ? explicitOffset : {
//             relative: "",
//             px: jQuery(opts.scrollTarget)[offPos]() && jQuery(opts.scrollTarget)[offPos]()[opts.direction] || 0
//         }, aniProps[scrollDir] = scrollTargetOffset.relative + (scrollTargetOffset.px + scrollerOffset + opts.offset), speed = opts.speed, "auto" === speed && (delta = Math.abs(aniProps[scrollDir] - jQueryscroller[scrollDir]()), speed = delta / opts.autoCoefficient), aniOpts = {
//             duration: speed,
//             easing: opts.easing,
//             complete: function() {
//                 onAfterScroll(opts)
//             }
//         }, opts.step && (aniOpts.step = opts.step), jQueryscroller.length ? jQueryscroller.stop().animate(aniProps, aniOpts) : onAfterScroll(opts)
//     }, jQuery.smoothScroll.version = version, jQuery.smoothScroll.filterPath = function(string) {
//         return string = string || "", string.replace(/^\//, "").replace(/(?:index|default).[a-zA-Z]{3,4}jQuery/, "").replace(/\/jQuery/, "")
//     }, jQuery.fn.smoothScroll.defaults = defaults
// });
// var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
//         return typeof obj
//     } : function(obj) {
//         return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
//     },
//     _createClass = function() {
//         function defineProperties(target, props) {
//             for (var i = 0; i < props.length; i++) {
//                 var descriptor = props[i];
//                 descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor)
//             }
//         }
//         return function(Constructor, protoProps, staticProps) {
//             return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor
//         }
//     }(),
//     Modal = function(jQuery) {
//         var NAME = "modal",
//             VERSION = "4.0.0-alpha.6",
//             DATA_KEY = "bs.modal",
//             EVENT_KEY = "." + DATA_KEY,
//             DATA_API_KEY = ".data-api",
//             JQUERY_NO_CONFLICT = jQuery.fn[NAME],
//             TRANSITION_DURATION = 300,
//             BACKDROP_TRANSITION_DURATION = 150,
//             ESCAPE_KEYCODE = 27,
//             Default = {
//                 backdrop: !0,
//                 keyboard: !0,
//                 focus: !0,
//                 show: !0
//             },
//             DefaultType = {
//                 backdrop: "(boolean|string)",
//                 keyboard: "boolean",
//                 focus: "boolean",
//                 show: "boolean"
//             },
//             Event = {
//                 HIDE: "hide" + EVENT_KEY,
//                 HIDDEN: "hidden" + EVENT_KEY,
//                 SHOW: "show" + EVENT_KEY,
//                 SHOWN: "shown" + EVENT_KEY,
//                 FOCUSIN: "focusin" + EVENT_KEY,
//                 RESIZE: "resize" + EVENT_KEY,
//                 CLICK_DISMISS: "click.dismiss" + EVENT_KEY,
//                 KEYDOWN_DISMISS: "keydown.dismiss" + EVENT_KEY,
//                 MOUSEUP_DISMISS: "mouseup.dismiss" + EVENT_KEY,
//                 MOUSEDOWN_DISMISS: "mousedown.dismiss" + EVENT_KEY,
//                 CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
//             },
//             ClassName = {
//                 SCROLLBAR_MEASURER: "modal-scrollbar-measure",
//                 BACKDROP: "modal-backdrop",
//                 OPEN: "modal-open",
//                 FADE: "fade",
//                 SHOW: "show"
//             },
//             Selector = {
//                 DIALOG: ".modal-dialog",
//                 DATA_TOGGLE: '[data-toggle="modal"]',
//                 DATA_DISMISS: '[data-dismiss="modal"]',
//                 FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"
//             },
//             Modal = function() {
//                 function Modal(element, config) {
//                     _classCallCheck(this, Modal), this._config = this._getConfig(config), this._element = element, this._dialog = jQuery(element).find(Selector.DIALOG)[0], this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._originalBodyPadding = 0, this._scrollbarWidth = 0
//                 }
//                 return Modal.prototype.toggle = function(relatedTarget) {
//                     return this._isShown ? this.hide() : this.show(relatedTarget)
//                 }, Modal.prototype.show = function(relatedTarget) {
//                     var _this = this;
//                     if (this._isTransitioning) throw new Error("Modal is transitioning");
//                     Util.supportsTransitionEnd() && jQuery(this._element).hasClass(ClassName.FADE) && (this._isTransitioning = !0);
//                     var showEvent = jQuery.Event(Event.SHOW, {
//                         relatedTarget: relatedTarget
//                     });
//                     jQuery(this._element).trigger(showEvent), this._isShown || showEvent.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), jQuery(document.body).addClass(ClassName.OPEN), this._setEscapeEvent(), this._setResizeEvent(), jQuery(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function(event) {
//                         return _this.hide(event)
//                     }), jQuery(this._dialog).on(Event.MOUSEDOWN_DISMISS, function() {
//                         jQuery(_this._element).one(Event.MOUSEUP_DISMISS, function(event) {
//                             jQuery(event.target).is(_this._element) && (_this._ignoreBackdropClick = !0)
//                         })
//                     }), this._showBackdrop(function() {
//                         return _this._showElement(relatedTarget)
//                     }))
//                 }, Modal.prototype.hide = function(event) {
//                     var _this2 = this;
//                     if (event && event.preventDefault(), this._isTransitioning) throw new Error("Modal is transitioning");
//                     var transition = Util.supportsTransitionEnd() && jQuery(this._element).hasClass(ClassName.FADE);
//                     transition && (this._isTransitioning = !0);
//                     var hideEvent = jQuery.Event(Event.HIDE);
//                     jQuery(this._element).trigger(hideEvent), this._isShown && !hideEvent.isDefaultPrevented() && (this._isShown = !1, this._setEscapeEvent(), this._setResizeEvent(), jQuery(document).off(Event.FOCUSIN), jQuery(this._element).removeClass(ClassName.SHOW), jQuery(this._element).off(Event.CLICK_DISMISS), jQuery(this._dialog).off(Event.MOUSEDOWN_DISMISS), transition ? jQuery(this._element).one(Util.TRANSITION_END, function(event) {
//                         return _this2._hideModal(event)
//                     }).emulateTransitionEnd(TRANSITION_DURATION) : this._hideModal())
//                 }, Modal.prototype.dispose = function() {
//                     jQuery.removeData(this._element, DATA_KEY), jQuery(window, document, this._element, this._backdrop).off(EVENT_KEY), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._originalBodyPadding = null, this._scrollbarWidth = null
//                 }, Modal.prototype._getConfig = function(config) {
//                     return config = jQuery.extend({}, Default, config), Util.typeCheckConfig(NAME, config, DefaultType), config
//                 }, Modal.prototype._showElement = function(relatedTarget) {
//                     var _this3 = this,
//                         transition = Util.supportsTransitionEnd() && jQuery(this._element).hasClass(ClassName.FADE);
//                     this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.scrollTop = 0, transition && Util.reflow(this._element), jQuery(this._element).addClass(ClassName.SHOW), this._config.focus && this._enforceFocus();
//                     var shownEvent = jQuery.Event(Event.SHOWN, {
//                             relatedTarget: relatedTarget
//                         }),
//                         transitionComplete = function() {
//                             _this3._config.focus && _this3._element.focus(), _this3._isTransitioning = !1, jQuery(_this3._element).trigger(shownEvent)
//                         };
//                     transition ? jQuery(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(TRANSITION_DURATION) : transitionComplete()
//                 }, Modal.prototype._enforceFocus = function() {
//                     var _this4 = this;
//                     jQuery(document).off(Event.FOCUSIN).on(Event.FOCUSIN, function(event) {
//                         document === event.target || _this4._element === event.target || jQuery(_this4._element).has(event.target).length || _this4._element.focus()
//                     })
//                 }, Modal.prototype._setEscapeEvent = function() {
//                     var _this5 = this;
//                     this._isShown && this._config.keyboard ? jQuery(this._element).on(Event.KEYDOWN_DISMISS, function(event) {
//                         event.which === ESCAPE_KEYCODE && _this5.hide()
//                     }) : this._isShown || jQuery(this._element).off(Event.KEYDOWN_DISMISS)
//                 }, Modal.prototype._setResizeEvent = function() {
//                     var _this6 = this;
//                     this._isShown ? jQuery(window).on(Event.RESIZE, function(event) {
//                         return _this6._handleUpdate(event)
//                     }) : jQuery(window).off(Event.RESIZE)
//                 }, Modal.prototype._hideModal = function() {
//                     var _this7 = this;
//                     this._element.style.display = "none", this._element.setAttribute("aria-hidden", "true"), this._isTransitioning = !1,
//                         this._showBackdrop(function() {
//                             jQuery(document.body).removeClass(ClassName.OPEN), _this7._resetAdjustments(), _this7._resetScrollbar(), jQuery(_this7._element).trigger(Event.HIDDEN)
//                         })
//                 }, Modal.prototype._removeBackdrop = function() {
//                     this._backdrop && (jQuery(this._backdrop).remove(), this._backdrop = null)
//                 }, Modal.prototype._showBackdrop = function(callback) {
//                     var _this8 = this,
//                         animate = jQuery(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : "";
//                     if (this._isShown && this._config.backdrop) {
//                         var doAnimate = Util.supportsTransitionEnd() && animate;
//                         if (this._backdrop = document.createElement("div"), this._backdrop.className = ClassName.BACKDROP, animate && jQuery(this._backdrop).addClass(animate), jQuery(this._backdrop).appendTo(document.body), jQuery(this._element).on(Event.CLICK_DISMISS, function(event) {
//                                 return _this8._ignoreBackdropClick ? void(_this8._ignoreBackdropClick = !1) : void(event.target === event.currentTarget && ("static" === _this8._config.backdrop ? _this8._element.focus() : _this8.hide()))
//                             }), doAnimate && Util.reflow(this._backdrop), jQuery(this._backdrop).addClass(ClassName.SHOW), !callback) return;
//                         if (!doAnimate) return void callback();
//                         jQuery(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION)
//                     } else if (!this._isShown && this._backdrop) {
//                         jQuery(this._backdrop).removeClass(ClassName.SHOW);
//                         var callbackRemove = function() {
//                             _this8._removeBackdrop(), callback && callback()
//                         };
//                         Util.supportsTransitionEnd() && jQuery(this._element).hasClass(ClassName.FADE) ? jQuery(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION) : callbackRemove()
//                     } else callback && callback()
//                 }, Modal.prototype._handleUpdate = function() {
//                     this._adjustDialog()
//                 }, Modal.prototype._adjustDialog = function() {
//                     var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
//                     !this._isBodyOverflowing && isModalOverflowing && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !isModalOverflowing && (this._element.style.paddingRight = this._scrollbarWidth + "px")
//                 }, Modal.prototype._resetAdjustments = function() {
//                     this._element.style.paddingLeft = "", this._element.style.paddingRight = ""
//                 }, Modal.prototype._checkScrollbar = function() {
//                     this._isBodyOverflowing = document.body.clientWidth < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth()
//                 }, Modal.prototype._setScrollbar = function() {
//                     var bodyPadding = parseInt(jQuery(Selector.FIXED_CONTENT).css("padding-right") || 0, 10);
//                     this._originalBodyPadding = document.body.style.paddingRight || "", this._isBodyOverflowing && (document.body.style.paddingRight = bodyPadding + this._scrollbarWidth + "px")
//                 }, Modal.prototype._resetScrollbar = function() {
//                     document.body.style.paddingRight = this._originalBodyPadding
//                 }, Modal.prototype._getScrollbarWidth = function() {
//                     var scrollDiv = document.createElement("div");
//                     scrollDiv.className = ClassName.SCROLLBAR_MEASURER, document.body.appendChild(scrollDiv);
//                     var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
//                     return document.body.removeChild(scrollDiv), scrollbarWidth
//                 }, Modal._jQueryInterface = function(config, relatedTarget) {
//                     return this.each(function() {
//                         var data = jQuery(this).data(DATA_KEY),
//                             _config = jQuery.extend({}, Modal.Default, jQuery(this).data(), "object" === ("undefined" == typeof config ? "undefined" : _typeof(config)) && config);
//                         if (data || (data = new Modal(this, _config), jQuery(this).data(DATA_KEY, data)), "string" == typeof config) {
//                             if (void 0 === data[config]) throw new Error('No method named "' + config + '"');
//                             data[config](relatedTarget)
//                         } else _config.show && data.show(relatedTarget)
//                     })
//                 }, _createClass(Modal, null, [{
//                     key: "VERSION",
//                     get: function() {
//                         return VERSION
//                     }
//                 }, {
//                     key: "Default",
//                     get: function() {
//                         return Default
//                     }
//                 }]), Modal
//             }();
//         return jQuery(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function(event) {
//             var _this9 = this,
//                 target = void 0,
//                 selector = Util.getSelectorFromElement(this);
//             selector && (target = jQuery(selector)[0]);
//             var config = jQuery(target).data(DATA_KEY) ? "toggle" : jQuery.extend({}, jQuery(target).data(), jQuery(this).data());
//             "A" !== this.tagName && "AREA" !== this.tagName || event.preventDefault();
//             var jQuerytarget = jQuery(target).one(Event.SHOW, function(showEvent) {
//                 showEvent.isDefaultPrevented() || jQuerytarget.one(Event.HIDDEN, function() {
//                     jQuery(_this9).is(":visible") && _this9.focus()
//                 })
//             });
//             Modal._jQueryInterface.call(jQuery(target), config, this)
//         }), jQuery.fn[NAME] = Modal._jQueryInterface, jQuery.fn[NAME].Constructor = Modal, jQuery.fn[NAME].noConflict = function() {
//             return jQuery.fn[NAME] = JQUERY_NO_CONFLICT, Modal._jQueryInterface
//         }, Modal
//     }(jQuery),
//     objectFitImages = function() {
//         "use strict";

//         function t(t, e) {
//             return "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='" + t + "' height='" + e + "'%3E%3C/svg%3E"
//         }

//         function e(t) {
//             if (t.srcset && !m && window.picturefill) {
//                 var e = window.picturefill._;
//                 t[e.ns] && t[e.ns].evaled || e.fillImg(t, {
//                     reselect: !0
//                 }), t[e.ns].curSrc || (t[e.ns].supported = !1, e.fillImg(t, {
//                     reselect: !0
//                 })), t.currentSrc = t[e.ns].curSrc || t.src
//             }
//         }

//         function i(t) {
//             for (var e, i = getComputedStyle(t).fontFamily, r = {}; null !== (e = l.exec(i));) r[e[1]] = e[2];
//             return r
//         }

//         function r(e, i, r) {
//             var n = t(i || 1, r || 0);
//             p.call(e, "src") !== n && b.call(e, "src", n)
//         }

//         function n(t, e) {
//             t.naturalWidth ? e(t) : setTimeout(n, 100, t, e)
//         }

//         function c(t) {
//             var c = i(t),
//                 o = t[a];
//             if (c["object-fit"] = c["object-fit"] || "fill", !o.img) {
//                 if ("fill" === c["object-fit"]) return;
//                 if (!o.skipTest && g && !c["object-position"]) return
//             }
//             if (!o.img) {
//                 o.img = new Image(t.width, t.height), o.img.srcset = p.call(t, "data-ofi-srcset") || t.srcset, o.img.src = p.call(t, "data-ofi-src") || t.src, b.call(t, "data-ofi-src", t.src), t.srcset && b.call(t, "data-ofi-srcset", t.srcset), r(t, t.naturalWidth || t.width, t.naturalHeight || t.height), t.srcset && (t.srcset = "");
//                 try {
//                     s(t)
//                 } catch (t) {
//                     window.console && void 0
//                 }
//             }
//             e(o.img), t.style.backgroundImage = 'url("' + (o.img.currentSrc || o.img.src).replace(/"/g, '\\"') + '")', t.style.backgroundPosition = c["object-position"] || "center", t.style.backgroundRepeat = "no-repeat", t.style.backgroundOrigin = "content-box", /scale-down/.test(c["object-fit"]) ? n(o.img, function() {
//                 o.img.naturalWidth > t.width || o.img.naturalHeight > t.height ? t.style.backgroundSize = "contain" : t.style.backgroundSize = "auto"
//             }) : t.style.backgroundSize = c["object-fit"].replace("none", "auto").replace("fill", "100% 100%"), n(o.img, function(e) {
//                 r(t, e.naturalWidth, e.naturalHeight)
//             })
//         }

//         function s(t) {
//             var e = {
//                 get: function(e) {
//                     return t[a].img[e || "src"]
//                 },
//                 set: function(e, i) {
//                     return t[a].img[i || "src"] = e, b.call(t, "data-ofi-" + i, e), c(t), e
//                 }
//             };
//             Object.defineProperty(t, "src", e), Object.defineProperty(t, "currentSrc", {
//                 get: function() {
//                     return e.get("currentSrc")
//                 }
//             }), Object.defineProperty(t, "srcset", {
//                 get: function() {
//                     return e.get("srcset")
//                 },
//                 set: function(t) {
//                     return e.set(t, "srcset")
//                 }
//             })
//         }

//         function o(t, e) {
//             var i = !h && !t;
//             if (e = e || {}, t = t || "img", f && !e.skipTest || !d) return !1;
//             "string" == typeof t ? t = document.querySelectorAll(t) : "length" in t || (t = [t]);
//             for (var r = 0; r < t.length; r++) t[r][a] = t[r][a] || {
//                 skipTest: e.skipTest
//             }, c(t[r]);
//             i && (document.body.addEventListener("load", function(t) {
//                 "IMG" === t.target.tagName && o(t.target, {
//                     skipTest: e.skipTest
//                 })
//             }, !0), h = !0, t = "img"), e.watchMQ && window.addEventListener("resize", o.bind(null, t, {
//                 skipTest: e.skipTest
//             }))
//         }
//         var a = "bfred-it:object-fit-images",
//             l = /(object-fit|object-position)\s*:\s*([-\w\s%]+)/g,
//             u = "undefined" == typeof Image ? {
//                 style: {
//                     "object-position": 1
//                 }
//             } : new Image,
//             g = "object-fit" in u.style,
//             f = "object-position" in u.style,
//             d = "background-size" in u.style,
//             m = "string" == typeof u.currentSrc,
//             p = u.getAttribute,
//             b = u.setAttribute,
//             h = !1;
//         return o.supportsObjectFit = g, o.supportsObjectPosition = f,
//             function() {
//                 function t(t, e) {
//                     return t[a] && t[a].img && ("src" === e || "srcset" === e) ? t[a].img : t
//                 }
//                 f || (HTMLImageElement.prototype.getAttribute = function(e) {
//                     return p.call(t(this, e), e)
//                 }, HTMLImageElement.prototype.setAttribute = function(e, i) {
//                     return b.call(t(this, e), e, String(i))
//                 })
//             }(), o
//     }();
// ! function(root, factory) {
//     "function" == typeof define && define.amd ? define(factory) : "object" == typeof exports ? module.exports = factory(require, exports, module) : root.ouibounce = factory()
// }(this, function(require, exports, module) {
//     return function(el, custom_config) {
//         "use strict";

//         function setDefault(_property, _default) {
//             return "undefined" == typeof _property ? _default : _property
//         }

//         function setDefaultCookieExpire(days) {
//             var ms = 24 * days * 60 * 60 * 1e3,
//                 date = new Date;
//             return date.setTime(date.getTime() + ms), "; expires=" + date.toUTCString()
//         }

//         function attachOuiBounce() {
//             isDisabled() || (_html.addEventListener("mouseleave", handleMouseleave), _html.addEventListener("mouseenter", handleMouseenter), _html.addEventListener("keydown", handleKeydown))
//         }

//         function handleMouseleave(e) {
//             e.clientY > sensitivity || (_delayTimer = setTimeout(fire, delay))
//         }

//         function handleMouseenter() {
//             _delayTimer && (clearTimeout(_delayTimer), _delayTimer = null)
//         }

//         function handleKeydown(e) {
//             disableKeydown || e.metaKey && 76 === e.keyCode && (disableKeydown = !0, _delayTimer = setTimeout(fire, delay))
//         }

//         function checkCookieValue(cookieName, value) {
//             return parseCookies()[cookieName] === value
//         }

//         function parseCookies() {
//             for (var cookies = document.cookie.split("; "), ret = {}, i = cookies.length - 1; i >= 0; i--) {
//                 var el = cookies[i].split("=");
//                 ret[el[0]] = el[1]
//             }
//             return ret
//         }

//         function isDisabled() {
//             return checkCookieValue(cookieName, "true") && !aggressive
//         }

//         function fire() {
//             isDisabled() || (el && (el.style.display = "block"), callback(), disable())
//         }

//         function disable(custom_options) {
//             var options = custom_options || {};
//             "undefined" != typeof options.cookieExpire && (cookieExpire = setDefaultCookieExpire(options.cookieExpire)), options.sitewide === !0 && (sitewide = ";path=/"), "undefined" != typeof options.cookieDomain && (cookieDomain = ";domain=" + options.cookieDomain), "undefined" != typeof options.cookieName && (cookieName = options.cookieName), document.cookie = cookieName + "=true" + cookieExpire + cookieDomain + sitewide, _html.removeEventListener("mouseleave", handleMouseleave), _html.removeEventListener("mouseenter", handleMouseenter), _html.removeEventListener("keydown", handleKeydown)
//         }
//         var config = custom_config || {},
//             aggressive = config.aggressive || !1,
//             sensitivity = setDefault(config.sensitivity, 20),
//             timer = setDefault(config.timer, 1e3),
//             delay = setDefault(config.delay, 0),
//             callback = config.callback || function() {},
//             cookieExpire = setDefaultCookieExpire(config.cookieExpire) || "",
//             cookieDomain = config.cookieDomain ? ";domain=" + config.cookieDomain : "",
//             cookieName = config.cookieName ? config.cookieName : "viewedOuibounceModal",
//             sitewide = config.sitewide === !0 ? ";path=/" : "",
//             _delayTimer = null,
//             _html = document.documentElement;
//         setTimeout(attachOuiBounce, timer);
//         var disableKeydown = !1;
//         return {
//             fire: fire,
//             disable: disable,
//             isDisabled: isDisabled
//         }
//     }
// }),
// function(factory) {
//     "use strict";
//     "function" == typeof define && define.amd ? define(["jquery"], factory) : "undefined" != typeof exports ? module.exports = factory(require("jquery")) : factory(jQuery)
// }(function(jQuery) {
//     "use strict";
//     var Slick = window.Slick || {};
//     Slick = function() {
//         function Slick(element, settings) {
//             var dataSettings, _ = this;
//             _.defaults = {
//                 accessibility: !0,
//                 adaptiveHeight: !1,
//                 appendArrows: jQuery(element),
//                 appendDots: jQuery(element),
//                 arrows: !0,
//                 asNavFor: null,
//                 prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
//                 nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
//                 autoplay: !1,
//                 autoplaySpeed: 3e3,
//                 centerMode: !1,
//                 centerPadding: "50px",
//                 cssEase: "ease",
//                 customPaging: function(slider, i) {
//                     return jQuery('<button type="button" />').text(i + 1)
//                 },
//                 dots: !1,
//                 dotsClass: "slick-dots",
//                 draggable: !0,
//                 easing: "linear",
//                 edgeFriction: .35,
//                 fade: !1,
//                 focusOnSelect: !1,
//                 focusOnChange: !1,
//                 infinite: !0,
//                 initialSlide: 0,
//                 lazyLoad: "ondemand",
//                 mobileFirst: !1,
//                 pauseOnHover: !0,
//                 pauseOnFocus: !0,
//                 pauseOnDotsHover: !1,
//                 respondTo: "window",
//                 responsive: null,
//                 rows: 1,
//                 rtl: !1,
//                 slide: "",
//                 slidesPerRow: 1,
//                 slidesToShow: 1,
//                 slidesToScroll: 1,
//                 speed: 500,
//                 swipe: !0,
//                 swipeToSlide: !1,
//                 touchMove: !0,
//                 touchThreshold: 5,
//                 useCSS: !0,
//                 useTransform: !0,
//                 variableWidth: !1,
//                 vertical: !1,
//                 verticalSwiping: !1,
//                 waitForAnimate: !0,
//                 zIndex: 1e3
//             }, _.initials = {
//                 animating: !1,
//                 dragging: !1,
//                 autoPlayTimer: null,
//                 currentDirection: 0,
//                 currentLeft: null,
//                 currentSlide: 0,
//                 direction: 1,
//                 jQuerydots: null,
//                 listWidth: null,
//                 listHeight: null,
//                 loadIndex: 0,
//                 jQuerynextArrow: null,
//                 jQueryprevArrow: null,
//                 scrolling: !1,
//                 slideCount: null,
//                 slideWidth: null,
//                 jQueryslideTrack: null,
//                 jQueryslides: null,
//                 sliding: !1,
//                 slideOffset: 0,
//                 swipeLeft: null,
//                 swiping: !1,
//                 jQuerylist: null,
//                 touchObject: {},
//                 transformsEnabled: !1,
//                 unslicked: !1
//             }, jQuery.extend(_, _.initials), _.activeBreakpoint = null, _.animType = null, _.animProp = null, _.breakpoints = [], _.breakpointSettings = [], _.cssTransitions = !1, _.focussed = !1, _.interrupted = !1, _.hidden = "hidden", _.paused = !0, _.positionProp = null, _.respondTo = null, _.rowCount = 1, _.shouldClick = !0, _.jQueryslider = jQuery(element), _.jQueryslidesCache = null, _.transformType = null, _.transitionType = null, _.visibilityChange = "visibilitychange", _.windowWidth = 0, _.windowTimer = null, dataSettings = jQuery(element).data("slick") || {}, _.options = jQuery.extend({}, _.defaults, settings, dataSettings), _.currentSlide = _.options.initialSlide, _.originalSettings = _.options, "undefined" != typeof document.mozHidden ? (_.hidden = "mozHidden", _.visibilityChange = "mozvisibilitychange") : "undefined" != typeof document.webkitHidden && (_.hidden = "webkitHidden", _.visibilityChange = "webkitvisibilitychange"), _.autoPlay = jQuery.proxy(_.autoPlay, _), _.autoPlayClear = jQuery.proxy(_.autoPlayClear, _), _.autoPlayIterator = jQuery.proxy(_.autoPlayIterator, _), _.changeSlide = jQuery.proxy(_.changeSlide, _), _.clickHandler = jQuery.proxy(_.clickHandler, _), _.selectHandler = jQuery.proxy(_.selectHandler, _), _.setPosition = jQuery.proxy(_.setPosition, _), _.swipeHandler = jQuery.proxy(_.swipeHandler, _), _.dragHandler = jQuery.proxy(_.dragHandler, _), _.keyHandler = jQuery.proxy(_.keyHandler, _), _.instanceUid = instanceUid++, _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)jQuery/, _.registerBreakpoints(), _.init(!0)
//         }
//         var instanceUid = 0;
//         return Slick
//     }(), Slick.prototype.activateADA = function() {
//         var _ = this;
//         _.jQueryslideTrack.find(".slick-active").attr({
//             "aria-hidden": "false"
//         }).find("a, input, button, select").attr({
//             tabindex: "0"
//         })
//     }, Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {
//         var _ = this;
//         if ("boolean" == typeof index) addBefore = index, index = null;
//         else if (index < 0 || index >= _.slideCount) return !1;
//         _.unload(), "number" == typeof index ? 0 === index && 0 === _.jQueryslides.length ? jQuery(markup).appendTo(_.jQueryslideTrack) : addBefore ? jQuery(markup).insertBefore(_.jQueryslides.eq(index)) : jQuery(markup).insertAfter(_.jQueryslides.eq(index)) : addBefore === !0 ? jQuery(markup).prependTo(_.jQueryslideTrack) : jQuery(markup).appendTo(_.jQueryslideTrack), _.jQueryslides = _.jQueryslideTrack.children(this.options.slide), _.jQueryslideTrack.children(this.options.slide).detach(), _.jQueryslideTrack.append(_.jQueryslides), _.jQueryslides.each(function(index, element) {
//             jQuery(element).attr("data-slick-index", index)
//         }), _.jQueryslidesCache = _.jQueryslides, _.reinit()
//     }, Slick.prototype.animateHeight = function() {
//         var _ = this;
//         if (1 === _.options.slidesToShow && _.options.adaptiveHeight === !0 && _.options.vertical === !1) {
//             var targetHeight = _.jQueryslides.eq(_.currentSlide).outerHeight(!0);
//             _.jQuerylist.animate({
//                 height: targetHeight
//             }, _.options.speed)
//         }
//     }, Slick.prototype.animateSlide = function(targetLeft, callback) {
//         var animProps = {},
//             _ = this;
//         _.animateHeight(), _.options.rtl === !0 && _.options.vertical === !1 && (targetLeft = -targetLeft), _.transformsEnabled === !1 ? _.options.vertical === !1 ? _.jQueryslideTrack.animate({
//             left: targetLeft
//         }, _.options.speed, _.options.easing, callback) : _.jQueryslideTrack.animate({
//             top: targetLeft
//         }, _.options.speed, _.options.easing, callback) : _.cssTransitions === !1 ? (_.options.rtl === !0 && (_.currentLeft = -_.currentLeft), jQuery({
//             animStart: _.currentLeft
//         }).animate({
//             animStart: targetLeft
//         }, {
//             duration: _.options.speed,
//             easing: _.options.easing,
//             step: function(now) {
//                 now = Math.ceil(now), _.options.vertical === !1 ? (animProps[_.animType] = "translate(" + now + "px, 0px)", _.jQueryslideTrack.css(animProps)) : (animProps[_.animType] = "translate(0px," + now + "px)", _.jQueryslideTrack.css(animProps))
//             },
//             complete: function() {
//                 callback && callback.call()
//             }
//         })) : (_.applyTransition(), targetLeft = Math.ceil(targetLeft), _.options.vertical === !1 ? animProps[_.animType] = "translate3d(" + targetLeft + "px, 0px, 0px)" : animProps[_.animType] = "translate3d(0px," + targetLeft + "px, 0px)", _.jQueryslideTrack.css(animProps), callback && setTimeout(function() {
//             _.disableTransition(), callback.call()
//         }, _.options.speed))
//     }, Slick.prototype.getNavTarget = function() {
//         var _ = this,
//             asNavFor = _.options.asNavFor;
//         return asNavFor && null !== asNavFor && (asNavFor = jQuery(asNavFor).not(_.jQueryslider)), asNavFor
//     }, Slick.prototype.asNavFor = function(index) {
//         var _ = this,
//             asNavFor = _.getNavTarget();
//         null !== asNavFor && "object" == typeof asNavFor && asNavFor.each(function() {
//             var target = jQuery(this).slick("getSlick");
//             target.unslicked || target.slideHandler(index, !0)
//         })
//     }, Slick.prototype.applyTransition = function(slide) {
//         var _ = this,
//             transition = {};
//         _.options.fade === !1 ? transition[_.transitionType] = _.transformType + " " + _.options.speed + "ms " + _.options.cssEase : transition[_.transitionType] = "opacity " + _.options.speed + "ms " + _.options.cssEase, _.options.fade === !1 ? _.jQueryslideTrack.css(transition) : _.jQueryslides.eq(slide).css(transition)
//     }, Slick.prototype.autoPlay = function() {
//         var _ = this;
//         _.autoPlayClear(), _.slideCount > _.options.slidesToShow && (_.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed))
//     }, Slick.prototype.autoPlayClear = function() {
//         var _ = this;
//         _.autoPlayTimer && clearInterval(_.autoPlayTimer)
//     }, Slick.prototype.autoPlayIterator = function() {
//         var _ = this,
//             slideTo = _.currentSlide + _.options.slidesToScroll;
//         _.paused || _.interrupted || _.focussed || (_.options.infinite === !1 && (1 === _.direction && _.currentSlide + 1 === _.slideCount - 1 ? _.direction = 0 : 0 === _.direction && (slideTo = _.currentSlide - _.options.slidesToScroll, _.currentSlide - 1 === 0 && (_.direction = 1))), _.slideHandler(slideTo))
//     }, Slick.prototype.buildArrows = function() {
//         var _ = this;
//         _.options.arrows === !0 && (_.jQueryprevArrow = jQuery(_.options.prevArrow).addClass("slick-arrow"), _.jQuerynextArrow = jQuery(_.options.nextArrow).addClass("slick-arrow"), _.slideCount > _.options.slidesToShow ? (_.jQueryprevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), _.jQuerynextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), _.htmlExpr.test(_.options.prevArrow) && _.jQueryprevArrow.prependTo(_.options.appendArrows), _.htmlExpr.test(_.options.nextArrow) && _.jQuerynextArrow.appendTo(_.options.appendArrows), _.options.infinite !== !0 && _.jQueryprevArrow.addClass("slick-disabled").attr("aria-disabled", "true")) : _.jQueryprevArrow.add(_.jQuerynextArrow).addClass("slick-hidden").attr({
//             "aria-disabled": "true",
//             tabindex: "-1"
//         }))
//     }, Slick.prototype.buildDots = function() {
//         var i, dot, _ = this;
//         if (_.options.dots === !0) {
//             for (_.jQueryslider.addClass("slick-dotted"), dot = jQuery("<ul />").addClass(_.options.dotsClass), i = 0; i <= _.getDotCount(); i += 1) dot.append(jQuery("<li />").append(_.options.customPaging.call(this, _, i)));
//             _.jQuerydots = dot.appendTo(_.options.appendDots), _.jQuerydots.find("li").first().addClass("slick-active")
//         }
//     }, Slick.prototype.buildOut = function() {
//         var _ = this;
//         _.jQueryslides = _.jQueryslider.children(_.options.slide + ":not(.slick-cloned)").addClass("slick-slide"), _.slideCount = _.jQueryslides.length, _.jQueryslides.each(function(index, element) {
//             jQuery(element).attr("data-slick-index", index).data("originalStyling", jQuery(element).attr("style") || "")
//         }), _.jQueryslider.addClass("slick-slider"), _.jQueryslideTrack = 0 === _.slideCount ? jQuery('<div class="slick-track"/>').appendTo(_.jQueryslider) : _.jQueryslides.wrapAll('<div class="slick-track"/>').parent(), _.jQuerylist = _.jQueryslideTrack.wrap('<div class="slick-list"/>').parent(), _.jQueryslideTrack.css("opacity", 0), _.options.centerMode !== !0 && _.options.swipeToSlide !== !0 || (_.options.slidesToScroll = 1), jQuery("img[data-lazy]", _.jQueryslider).not("[src]").addClass("slick-loading"), _.setupInfinite(), _.buildArrows(), _.buildDots(), _.updateDots(), _.setSlideClasses("number" == typeof _.currentSlide ? _.currentSlide : 0), _.options.draggable === !0 && _.jQuerylist.addClass("draggable")
//     }, Slick.prototype.buildRows = function() {
//         var a, b, c, newSlides, numOfSlides, originalSlides, slidesPerSection, _ = this;
//         if (newSlides = document.createDocumentFragment(), originalSlides = _.jQueryslider.children(), _.options.rows > 1) {
//             for (slidesPerSection = _.options.slidesPerRow * _.options.rows, numOfSlides = Math.ceil(originalSlides.length / slidesPerSection), a = 0; a < numOfSlides; a++) {
//                 var slide = document.createElement("div");
//                 for (b = 0; b < _.options.rows; b++) {
//                     var row = document.createElement("div");
//                     for (c = 0; c < _.options.slidesPerRow; c++) {
//                         var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);
//                         originalSlides.get(target) && row.appendChild(originalSlides.get(target))
//                     }
//                     slide.appendChild(row)
//                 }
//                 newSlides.appendChild(slide)
//             }
//             _.jQueryslider.empty().append(newSlides), _.jQueryslider.children().children().children().css({
//                 width: 100 / _.options.slidesPerRow + "%",
//                 display: "inline-block"
//             })
//         }
//     }, Slick.prototype.checkResponsive = function(initial, forceUpdate) {
//         var breakpoint, targetBreakpoint, respondToWidth, _ = this,
//             triggerBreakpoint = !1,
//             sliderWidth = _.jQueryslider.width(),
//             windowWidth = window.innerWidth || jQuery(window).width();
//         if ("window" === _.respondTo ? respondToWidth = windowWidth : "slider" === _.respondTo ? respondToWidth = sliderWidth : "min" === _.respondTo && (respondToWidth = Math.min(windowWidth, sliderWidth)), _.options.responsive && _.options.responsive.length && null !== _.options.responsive) {
//             targetBreakpoint = null;
//             for (breakpoint in _.breakpoints) _.breakpoints.hasOwnProperty(breakpoint) && (_.originalSettings.mobileFirst === !1 ? respondToWidth < _.breakpoints[breakpoint] && (targetBreakpoint = _.breakpoints[breakpoint]) : respondToWidth > _.breakpoints[breakpoint] && (targetBreakpoint = _.breakpoints[breakpoint]));
//             null !== targetBreakpoint ? null !== _.activeBreakpoint ? (targetBreakpoint !== _.activeBreakpoint || forceUpdate) && (_.activeBreakpoint = targetBreakpoint, "unslick" === _.breakpointSettings[targetBreakpoint] ? _.unslick(targetBreakpoint) : (_.options = jQuery.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]), initial === !0 && (_.currentSlide = _.options.initialSlide), _.refresh(initial)), triggerBreakpoint = targetBreakpoint) : (_.activeBreakpoint = targetBreakpoint, "unslick" === _.breakpointSettings[targetBreakpoint] ? _.unslick(targetBreakpoint) : (_.options = jQuery.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]), initial === !0 && (_.currentSlide = _.options.initialSlide), _.refresh(initial)), triggerBreakpoint = targetBreakpoint) : null !== _.activeBreakpoint && (_.activeBreakpoint = null, _.options = _.originalSettings, initial === !0 && (_.currentSlide = _.options.initialSlide), _.refresh(initial), triggerBreakpoint = targetBreakpoint), initial || triggerBreakpoint === !1 || _.jQueryslider.trigger("breakpoint", [_, triggerBreakpoint])
//         }
//     }, Slick.prototype.changeSlide = function(event, dontAnimate) {
//         var indexOffset, slideOffset, unevenOffset, _ = this,
//             jQuerytarget = jQuery(event.currentTarget);
//         switch (jQuerytarget.is("a") && event.preventDefault(), jQuerytarget.is("li") || (jQuerytarget = jQuerytarget.closest("li")), unevenOffset = _.slideCount % _.options.slidesToScroll !== 0, indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll, event.data.message) {
//             case "previous":
//                 slideOffset = 0 === indexOffset ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset, _.slideCount > _.options.slidesToShow && _.slideHandler(_.currentSlide - slideOffset, !1, dontAnimate);
//                 break;
//             case "next":
//                 slideOffset = 0 === indexOffset ? _.options.slidesToScroll : indexOffset, _.slideCount > _.options.slidesToShow && _.slideHandler(_.currentSlide + slideOffset, !1, dontAnimate);
//                 break;
//             case "index":
//                 var index = 0 === event.data.index ? 0 : event.data.index || jQuerytarget.index() * _.options.slidesToScroll;
//                 _.slideHandler(_.checkNavigable(index), !1, dontAnimate), jQuerytarget.children().trigger("focus");
//                 break;
//             default:
//                 return
//         }
//     }, Slick.prototype.checkNavigable = function(index) {
//         var navigables, prevNavigable, _ = this;
//         if (navigables = _.getNavigableIndexes(), prevNavigable = 0, index > navigables[navigables.length - 1]) index = navigables[navigables.length - 1];
//         else
//             for (var n in navigables) {
//                 if (index < navigables[n]) {
//                     index = prevNavigable;
//                     break
//                 }
//                 prevNavigable = navigables[n]
//             }
//         return index
//     }, Slick.prototype.cleanUpEvents = function() {
//         var _ = this;
//         _.options.dots && null !== _.jQuerydots && (jQuery("li", _.jQuerydots).off("click.slick", _.changeSlide).off("mouseenter.slick", jQuery.proxy(_.interrupt, _, !0)).off("mouseleave.slick", jQuery.proxy(_.interrupt, _, !1)), _.options.accessibility === !0 && _.jQuerydots.off("keydown.slick", _.keyHandler)), _.jQueryslider.off("focus.slick blur.slick"), _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && (_.jQueryprevArrow && _.jQueryprevArrow.off("click.slick", _.changeSlide), _.jQuerynextArrow && _.jQuerynextArrow.off("click.slick", _.changeSlide), _.options.accessibility === !0 && (_.jQueryprevArrow && _.jQueryprevArrow.off("keydown.slick", _.keyHandler), _.jQuerynextArrow && _.jQuerynextArrow.off("keydown.slick", _.keyHandler))), _.jQuerylist.off("touchstart.slick mousedown.slick", _.swipeHandler), _.jQuerylist.off("touchmove.slick mousemove.slick", _.swipeHandler), _.jQuerylist.off("touchend.slick mouseup.slick", _.swipeHandler), _.jQuerylist.off("touchcancel.slick mouseleave.slick", _.swipeHandler), _.jQuerylist.off("click.slick", _.clickHandler), jQuery(document).off(_.visibilityChange, _.visibility), _.cleanUpSlideEvents(), _.options.accessibility === !0 && _.jQuerylist.off("keydown.slick", _.keyHandler), _.options.focusOnSelect === !0 && jQuery(_.jQueryslideTrack).children().off("click.slick", _.selectHandler), jQuery(window).off("orientationchange.slick.slick-" + _.instanceUid, _.orientationChange), jQuery(window).off("resize.slick.slick-" + _.instanceUid, _.resize), jQuery("[draggable!=true]", _.jQueryslideTrack).off("dragstart", _.preventDefault), jQuery(window).off("load.slick.slick-" + _.instanceUid, _.setPosition)
//     }, Slick.prototype.cleanUpSlideEvents = function() {
//         var _ = this;
//         _.jQuerylist.off("mouseenter.slick", jQuery.proxy(_.interrupt, _, !0)), _.jQuerylist.off("mouseleave.slick", jQuery.proxy(_.interrupt, _, !1))
//     }, Slick.prototype.cleanUpRows = function() {
//         var originalSlides, _ = this;
//         _.options.rows > 1 && (originalSlides = _.jQueryslides.children().children(), originalSlides.removeAttr("style"), _.jQueryslider.empty().append(originalSlides))
//     }, Slick.prototype.clickHandler = function(event) {
//         var _ = this;
//         _.shouldClick === !1 && (event.stopImmediatePropagation(), event.stopPropagation(), event.preventDefault())
//     }, Slick.prototype.destroy = function(refresh) {
//         var _ = this;
//         _.autoPlayClear(), _.touchObject = {}, _.cleanUpEvents(), jQuery(".slick-cloned", _.jQueryslider).detach(), _.jQuerydots && _.jQuerydots.remove(), _.jQueryprevArrow && _.jQueryprevArrow.length && (_.jQueryprevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), _.htmlExpr.test(_.options.prevArrow) && _.jQueryprevArrow.remove()), _.jQuerynextArrow && _.jQuerynextArrow.length && (_.jQuerynextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), _.htmlExpr.test(_.options.nextArrow) && _.jQuerynextArrow.remove()), _.jQueryslides && (_.jQueryslides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function() {
//             jQuery(this).attr("style", jQuery(this).data("originalStyling"))
//         }), _.jQueryslideTrack.children(this.options.slide).detach(), _.jQueryslideTrack.detach(), _.jQuerylist.detach(), _.jQueryslider.append(_.jQueryslides)), _.cleanUpRows(), _.jQueryslider.removeClass("slick-slider"), _.jQueryslider.removeClass("slick-initialized"), _.jQueryslider.removeClass("slick-dotted"), _.unslicked = !0, refresh || _.jQueryslider.trigger("destroy", [_])
//     }, Slick.prototype.disableTransition = function(slide) {
//         var _ = this,
//             transition = {};
//         transition[_.transitionType] = "", _.options.fade === !1 ? _.jQueryslideTrack.css(transition) : _.jQueryslides.eq(slide).css(transition)
//     }, Slick.prototype.fadeSlide = function(slideIndex, callback) {
//         var _ = this;
//         _.cssTransitions === !1 ? (_.jQueryslides.eq(slideIndex).css({
//             zIndex: _.options.zIndex
//         }), _.jQueryslides.eq(slideIndex).animate({
//             opacity: 1
//         }, _.options.speed, _.options.easing, callback)) : (_.applyTransition(slideIndex), _.jQueryslides.eq(slideIndex).css({
//             opacity: 1,
//             zIndex: _.options.zIndex
//         }), callback && setTimeout(function() {
//             _.disableTransition(slideIndex), callback.call()
//         }, _.options.speed))
//     }, Slick.prototype.fadeSlideOut = function(slideIndex) {
//         var _ = this;
//         _.cssTransitions === !1 ? _.jQueryslides.eq(slideIndex).animate({
//             opacity: 0,
//             zIndex: _.options.zIndex - 2
//         }, _.options.speed, _.options.easing) : (_.applyTransition(slideIndex), _.jQueryslides.eq(slideIndex).css({
//             opacity: 0,
//             zIndex: _.options.zIndex - 2
//         }))
//     }, Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {
//         var _ = this;
//         null !== filter && (_.jQueryslidesCache = _.jQueryslides, _.unload(), _.jQueryslideTrack.children(this.options.slide).detach(), _.jQueryslidesCache.filter(filter).appendTo(_.jQueryslideTrack), _.reinit())
//     }, Slick.prototype.focusHandler = function() {
//         var _ = this;
//         _.jQueryslider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*", function(event) {
//             event.stopImmediatePropagation();
//             var jQuerysf = jQuery(this);
//             setTimeout(function() {
//                 _.options.pauseOnFocus && (_.focussed = jQuerysf.is(":focus"), _.autoPlay())
//             }, 0)
//         })
//     }, Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {
//         var _ = this;
//         return _.currentSlide
//     }, Slick.prototype.getDotCount = function() {
//         var _ = this,
//             breakPoint = 0,
//             counter = 0,
//             pagerQty = 0;
//         if (_.options.infinite === !0)
//             if (_.slideCount <= _.options.slidesToShow) ++pagerQty;
//             else
//                 for (; breakPoint < _.slideCount;) ++pagerQty, breakPoint = counter + _.options.slidesToScroll, counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
//         else if (_.options.centerMode === !0) pagerQty = _.slideCount;
//         else if (_.options.asNavFor)
//             for (; breakPoint < _.slideCount;) ++pagerQty, breakPoint = counter + _.options.slidesToScroll, counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
//         else pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
//         return pagerQty - 1
//     }, Slick.prototype.getLeft = function(slideIndex) {
//         var targetLeft, verticalHeight, targetSlide, coef, _ = this,
//             verticalOffset = 0;
//         return _.slideOffset = 0, verticalHeight = _.jQueryslides.first().outerHeight(!0), _.options.infinite === !0 ? (_.slideCount > _.options.slidesToShow && (_.slideOffset = _.slideWidth * _.options.slidesToShow * -1, coef = -1, _.options.vertical === !0 && _.options.centerMode === !0 && (2 === _.options.slidesToShow ? coef = -1.5 : 1 === _.options.slidesToShow && (coef = -2)), verticalOffset = verticalHeight * _.options.slidesToShow * coef), _.slideCount % _.options.slidesToScroll !== 0 && slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow && (slideIndex > _.slideCount ? (_.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1, verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1) : (_.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1, verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1))) : slideIndex + _.options.slidesToShow > _.slideCount && (_.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth, verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight), _.slideCount <= _.options.slidesToShow && (_.slideOffset = 0, verticalOffset = 0), _.options.centerMode === !0 && _.slideCount <= _.options.slidesToShow ? _.slideOffset = _.slideWidth * Math.floor(_.options.slidesToShow) / 2 - _.slideWidth * _.slideCount / 2 : _.options.centerMode === !0 && _.options.infinite === !0 ? _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth : _.options.centerMode === !0 && (_.slideOffset = 0, _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2)), targetLeft = _.options.vertical === !1 ? slideIndex * _.slideWidth * -1 + _.slideOffset : slideIndex * verticalHeight * -1 + verticalOffset, _.options.variableWidth === !0 && (targetSlide = _.slideCount <= _.options.slidesToShow || _.options.infinite === !1 ? _.jQueryslideTrack.children(".slick-slide").eq(slideIndex) : _.jQueryslideTrack.children(".slick-slide").eq(slideIndex + _.options.slidesToShow), targetLeft = _.options.rtl === !0 ? targetSlide[0] ? (_.jQueryslideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1 : 0 : targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0, _.options.centerMode === !0 && (targetSlide = _.slideCount <= _.options.slidesToShow || _.options.infinite === !1 ? _.jQueryslideTrack.children(".slick-slide").eq(slideIndex) : _.jQueryslideTrack.children(".slick-slide").eq(slideIndex + _.options.slidesToShow + 1), targetLeft = _.options.rtl === !0 ? targetSlide[0] ? (_.jQueryslideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1 : 0 : targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0, targetLeft += (_.jQuerylist.width() - targetSlide.outerWidth()) / 2)), targetLeft
//     }, Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {
//         var _ = this;
//         return _.options[option]
//     }, Slick.prototype.getNavigableIndexes = function() {
//         var max, _ = this,
//             breakPoint = 0,
//             counter = 0,
//             indexes = [];
//         for (_.options.infinite === !1 ? max = _.slideCount : (breakPoint = _.options.slidesToScroll * -1, counter = _.options.slidesToScroll * -1, max = 2 * _.slideCount); breakPoint < max;) indexes.push(breakPoint), breakPoint = counter + _.options.slidesToScroll, counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
//         return indexes
//     }, Slick.prototype.getSlick = function() {
//         return this
//     }, Slick.prototype.getSlideCount = function() {
//         var slidesTraversed, swipedSlide, centerOffset, _ = this;
//         return centerOffset = _.options.centerMode === !0 ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0, _.options.swipeToSlide === !0 ? (_.jQueryslideTrack.find(".slick-slide").each(function(index, slide) {
//             if (slide.offsetLeft - centerOffset + jQuery(slide).outerWidth() / 2 > _.swipeLeft * -1) return swipedSlide = slide, !1
//         }), slidesTraversed = Math.abs(jQuery(swipedSlide).attr("data-slick-index") - _.currentSlide) || 1) : _.options.slidesToScroll
//     }, Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {
//         var _ = this;
//         _.changeSlide({
//             data: {
//                 message: "index",
//                 index: parseInt(slide)
//             }
//         }, dontAnimate)
//     }, Slick.prototype.init = function(creation) {
//         var _ = this;
//         jQuery(_.jQueryslider).hasClass("slick-initialized") || (jQuery(_.jQueryslider).addClass("slick-initialized"), _.buildRows(), _.buildOut(), _.setProps(), _.startLoad(), _.loadSlider(), _.initializeEvents(), _.updateArrows(), _.updateDots(), _.checkResponsive(!0), _.focusHandler()), creation && _.jQueryslider.trigger("init", [_]), _.options.accessibility === !0 && _.initADA(), _.options.autoplay && (_.paused = !1, _.autoPlay())
//     }, Slick.prototype.initADA = function() {
//         var _ = this,
//             numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),
//             tabControlIndexes = _.getNavigableIndexes().filter(function(val) {
//                 return val >= 0 && val < _.slideCount
//             });
//         _.jQueryslides.add(_.jQueryslideTrack.find(".slick-cloned")).attr({
//             "aria-hidden": "true",
//             tabindex: "-1"
//         }).find("a, input, button, select").attr({
//             tabindex: "-1"
//         }), null !== _.jQuerydots && (_.jQueryslides.not(_.jQueryslideTrack.find(".slick-cloned")).each(function(i) {
//             var slideControlIndex = tabControlIndexes.indexOf(i);
//             jQuery(this).attr({
//                 role: "tabpanel",
//                 id: "slick-slide" + _.instanceUid + i,
//                 tabindex: -1
//             }), slideControlIndex !== -1 && jQuery(this).attr({
//                 "aria-describedby": "slick-slide-control" + _.instanceUid + slideControlIndex
//             })
//         }), _.jQuerydots.attr("role", "tablist").find("li").each(function(i) {
//             var mappedSlideIndex = tabControlIndexes[i];
//             jQuery(this).attr({
//                 role: "presentation"
//             }), jQuery(this).find("button").first().attr({
//                 role: "tab",
//                 id: "slick-slide-control" + _.instanceUid + i,
//                 "aria-controls": "slick-slide" + _.instanceUid + mappedSlideIndex,
//                 "aria-label": i + 1 + " of " + numDotGroups,
//                 "aria-selected": null,
//                 tabindex: "-1"
//             })
//         }).eq(_.currentSlide).find("button").attr({
//             "aria-selected": "true",
//             tabindex: "0"
//         }).end());
//         for (var i = _.currentSlide, max = i + _.options.slidesToShow; i < max; i++) _.jQueryslides.eq(i).attr("tabindex", 0);
//         _.activateADA()
//     }, Slick.prototype.initArrowEvents = function() {
//         var _ = this;
//         _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && (_.jQueryprevArrow.off("click.slick").on("click.slick", {
//             message: "previous"
//         }, _.changeSlide), _.jQuerynextArrow.off("click.slick").on("click.slick", {
//             message: "next"
//         }, _.changeSlide), _.options.accessibility === !0 && (_.jQueryprevArrow.on("keydown.slick", _.keyHandler), _.jQuerynextArrow.on("keydown.slick", _.keyHandler)))
//     }, Slick.prototype.initDotEvents = function() {
//         var _ = this;
//         _.options.dots === !0 && (jQuery("li", _.jQuerydots).on("click.slick", {
//             message: "index"
//         }, _.changeSlide), _.options.accessibility === !0 && _.jQuerydots.on("keydown.slick", _.keyHandler)), _.options.dots === !0 && _.options.pauseOnDotsHover === !0 && jQuery("li", _.jQuerydots).on("mouseenter.slick", jQuery.proxy(_.interrupt, _, !0)).on("mouseleave.slick", jQuery.proxy(_.interrupt, _, !1))
//     }, Slick.prototype.initSlideEvents = function() {
//         var _ = this;
//         _.options.pauseOnHover && (_.jQuerylist.on("mouseenter.slick", jQuery.proxy(_.interrupt, _, !0)), _.jQuerylist.on("mouseleave.slick", jQuery.proxy(_.interrupt, _, !1)))
//     }, Slick.prototype.initializeEvents = function() {
//         var _ = this;
//         _.initArrowEvents(), _.initDotEvents(), _.initSlideEvents(), _.jQuerylist.on("touchstart.slick mousedown.slick", {
//             action: "start"
//         }, _.swipeHandler), _.jQuerylist.on("touchmove.slick mousemove.slick", {
//             action: "move"
//         }, _.swipeHandler), _.jQuerylist.on("touchend.slick mouseup.slick", {
//             action: "end"
//         }, _.swipeHandler), _.jQuerylist.on("touchcancel.slick mouseleave.slick", {
//             action: "end"
//         }, _.swipeHandler), _.jQuerylist.on("click.slick", _.clickHandler), jQuery(document).on(_.visibilityChange, jQuery.proxy(_.visibility, _)), _.options.accessibility === !0 && _.jQuerylist.on("keydown.slick", _.keyHandler), _.options.focusOnSelect === !0 && jQuery(_.jQueryslideTrack).children().on("click.slick", _.selectHandler), jQuery(window).on("orientationchange.slick.slick-" + _.instanceUid, jQuery.proxy(_.orientationChange, _)), jQuery(window).on("resize.slick.slick-" + _.instanceUid, jQuery.proxy(_.resize, _)), jQuery("[draggable!=true]", _.jQueryslideTrack).on("dragstart", _.preventDefault), jQuery(window).on("load.slick.slick-" + _.instanceUid, _.setPosition), jQuery(_.setPosition)
//     }, Slick.prototype.initUI = function() {
//         var _ = this;
//         _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && (_.jQueryprevArrow.show(), _.jQuerynextArrow.show()), _.options.dots === !0 && _.slideCount > _.options.slidesToShow && _.jQuerydots.show()
//     }, Slick.prototype.keyHandler = function(event) {
//         var _ = this;
//         event.target.tagName.match("TEXTAREA|INPUT|SELECT") || (37 === event.keyCode && _.options.accessibility === !0 ? _.changeSlide({
//             data: {
//                 message: _.options.rtl === !0 ? "next" : "previous"
//             }
//         }) : 39 === event.keyCode && _.options.accessibility === !0 && _.changeSlide({
//             data: {
//                 message: _.options.rtl === !0 ? "previous" : "next"
//             }
//         }))
//     }, Slick.prototype.lazyLoad = function() {
//         function loadImages(imagesScope) {
//             jQuery("img[data-lazy]", imagesScope).each(function() {
//                 var image = jQuery(this),
//                     imageSource = jQuery(this).attr("data-lazy"),
//                     imageSrcSet = jQuery(this).attr("data-srcset"),
//                     imageSizes = jQuery(this).attr("data-sizes") || _.jQueryslider.attr("data-sizes"),
//                     imageToLoad = document.createElement("img");
//                 imageToLoad.onload = function() {
//                     image.animate({
//                         opacity: 0
//                     }, 100, function() {
//                         imageSrcSet && (image.attr("srcset", imageSrcSet), imageSizes && image.attr("sizes", imageSizes)), image.attr("src", imageSource).animate({
//                             opacity: 1
//                         }, 200, function() {
//                             image.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")
//                         }), _.jQueryslider.trigger("lazyLoaded", [_, image, imageSource])
//                     })
//                 }, imageToLoad.onerror = function() {
//                     image.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), _.jQueryslider.trigger("lazyLoadError", [_, image, imageSource])
//                 }, imageToLoad.src = imageSource
//             })
//         }
//         var loadRange, cloneRange, rangeStart, rangeEnd, _ = this;
//         if (_.options.centerMode === !0 ? _.options.infinite === !0 ? (rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1), rangeEnd = rangeStart + _.options.slidesToShow + 2) : (rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1)), rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide) : (rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide, rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow), _.options.fade === !0 && (rangeStart > 0 && rangeStart--, rangeEnd <= _.slideCount && rangeEnd++)), loadRange = _.jQueryslider.find(".slick-slide").slice(rangeStart, rangeEnd), "anticipated" === _.options.lazyLoad)
//             for (var prevSlide = rangeStart - 1, nextSlide = rangeEnd, jQueryslides = _.jQueryslider.find(".slick-slide"), i = 0; i < _.options.slidesToScroll; i++) prevSlide < 0 && (prevSlide = _.slideCount - 1), loadRange = loadRange.add(jQueryslides.eq(prevSlide)), loadRange = loadRange.add(jQueryslides.eq(nextSlide)), prevSlide--, nextSlide++;
//         loadImages(loadRange), _.slideCount <= _.options.slidesToShow ? (cloneRange = _.jQueryslider.find(".slick-slide"), loadImages(cloneRange)) : _.currentSlide >= _.slideCount - _.options.slidesToShow ? (cloneRange = _.jQueryslider.find(".slick-cloned").slice(0, _.options.slidesToShow), loadImages(cloneRange)) : 0 === _.currentSlide && (cloneRange = _.jQueryslider.find(".slick-cloned").slice(_.options.slidesToShow * -1), loadImages(cloneRange))
//     }, Slick.prototype.loadSlider = function() {
//         var _ = this;
//         _.setPosition(), _.jQueryslideTrack.css({
//             opacity: 1
//         }), _.jQueryslider.removeClass("slick-loading"), _.initUI(), "progressive" === _.options.lazyLoad && _.progressiveLazyLoad()
//     }, Slick.prototype.next = Slick.prototype.slickNext = function() {
//         var _ = this;
//         _.changeSlide({
//             data: {
//                 message: "next"
//             }
//         })
//     }, Slick.prototype.orientationChange = function() {
//         var _ = this;
//         _.checkResponsive(), _.setPosition()
//     }, Slick.prototype.pause = Slick.prototype.slickPause = function() {
//         var _ = this;
//         _.autoPlayClear(), _.paused = !0
//     }, Slick.prototype.play = Slick.prototype.slickPlay = function() {
//         var _ = this;
//         _.autoPlay(), _.options.autoplay = !0, _.paused = !1, _.focussed = !1, _.interrupted = !1
//     }, Slick.prototype.postSlide = function(index) {
//         var _ = this;
//         if (!_.unslicked && (_.jQueryslider.trigger("afterChange", [_, index]), _.animating = !1, _.slideCount > _.options.slidesToShow && _.setPosition(), _.swipeLeft = null, _.options.autoplay && _.autoPlay(), _.options.accessibility === !0 && (_.initADA(), _.options.focusOnChange))) {
//             var jQuerycurrentSlide = jQuery(_.jQueryslides.get(_.currentSlide));
//             jQuerycurrentSlide.attr("tabindex", 0).focus()
//         }
//     }, Slick.prototype.prev = Slick.prototype.slickPrev = function() {
//         var _ = this;
//         _.changeSlide({
//             data: {
//                 message: "previous"
//             }
//         })
//     }, Slick.prototype.preventDefault = function(event) {
//         event.preventDefault()
//     }, Slick.prototype.progressiveLazyLoad = function(tryCount) {
//         tryCount = tryCount || 1;
//         var image, imageSource, imageSrcSet, imageSizes, imageToLoad, _ = this,
//             jQueryimgsToLoad = jQuery("img[data-lazy]", _.jQueryslider);
//         jQueryimgsToLoad.length ? (image = jQueryimgsToLoad.first(), imageSource = image.attr("data-lazy"), imageSrcSet = image.attr("data-srcset"), imageSizes = image.attr("data-sizes") || _.jQueryslider.attr("data-sizes"), imageToLoad = document.createElement("img"), imageToLoad.onload = function() {
//             imageSrcSet && (image.attr("srcset", imageSrcSet), imageSizes && image.attr("sizes", imageSizes)), image.attr("src", imageSource).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"), _.options.adaptiveHeight === !0 && _.setPosition(), _.jQueryslider.trigger("lazyLoaded", [_, image, imageSource]), _.progressiveLazyLoad()
//         }, imageToLoad.onerror = function() {
//             tryCount < 3 ? setTimeout(function() {
//                 _.progressiveLazyLoad(tryCount + 1)
//             }, 500) : (image.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), _.jQueryslider.trigger("lazyLoadError", [_, image, imageSource]), _.progressiveLazyLoad())
//         }, imageToLoad.src = imageSource) : _.jQueryslider.trigger("allImagesLoaded", [_])
//     }, Slick.prototype.refresh = function(initializing) {
//         var currentSlide, lastVisibleIndex, _ = this;
//         lastVisibleIndex = _.slideCount - _.options.slidesToShow, !_.options.infinite && _.currentSlide > lastVisibleIndex && (_.currentSlide = lastVisibleIndex), _.slideCount <= _.options.slidesToShow && (_.currentSlide = 0), currentSlide = _.currentSlide, _.destroy(!0), jQuery.extend(_, _.initials, {
//             currentSlide: currentSlide
//         }), _.init(), initializing || _.changeSlide({
//             data: {
//                 message: "index",
//                 index: currentSlide
//             }
//         }, !1)
//     }, Slick.prototype.registerBreakpoints = function() {
//         var breakpoint, currentBreakpoint, l, _ = this,
//             responsiveSettings = _.options.responsive || null;
//         if ("array" === jQuery.type(responsiveSettings) && responsiveSettings.length) {
//             _.respondTo = _.options.respondTo || "window";
//             for (breakpoint in responsiveSettings)
//                 if (l = _.breakpoints.length - 1, responsiveSettings.hasOwnProperty(breakpoint)) {
//                     for (currentBreakpoint = responsiveSettings[breakpoint].breakpoint; l >= 0;) _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint && _.breakpoints.splice(l, 1), l--;
//                     _.breakpoints.push(currentBreakpoint), _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings
//                 }
//             _.breakpoints.sort(function(a, b) {
//                 return _.options.mobileFirst ? a - b : b - a
//             })
//         }
//     }, Slick.prototype.reinit = function() {
//         var _ = this;
//         _.jQueryslides = _.jQueryslideTrack.children(_.options.slide).addClass("slick-slide"), _.slideCount = _.jQueryslides.length, _.currentSlide >= _.slideCount && 0 !== _.currentSlide && (_.currentSlide = _.currentSlide - _.options.slidesToScroll), _.slideCount <= _.options.slidesToShow && (_.currentSlide = 0), _.registerBreakpoints(), _.setProps(), _.setupInfinite(), _.buildArrows(), _.updateArrows(), _.initArrowEvents(), _.buildDots(), _.updateDots(), _.initDotEvents(), _.cleanUpSlideEvents(), _.initSlideEvents(), _.checkResponsive(!1, !0), _.options.focusOnSelect === !0 && jQuery(_.jQueryslideTrack).children().on("click.slick", _.selectHandler), _.setSlideClasses("number" == typeof _.currentSlide ? _.currentSlide : 0), _.setPosition(), _.focusHandler(), _.paused = !_.options.autoplay, _.autoPlay(), _.jQueryslider.trigger("reInit", [_])
//     }, Slick.prototype.resize = function() {
//         var _ = this;
//         jQuery(window).width() !== _.windowWidth && (clearTimeout(_.windowDelay), _.windowDelay = window.setTimeout(function() {
//             _.windowWidth = jQuery(window).width(), _.checkResponsive(), _.unslicked || _.setPosition()
//         }, 50))
//     }, Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {
//         var _ = this;
//         return "boolean" == typeof index ? (removeBefore = index, index = removeBefore === !0 ? 0 : _.slideCount - 1) : index = removeBefore === !0 ? --index : index, !(_.slideCount < 1 || index < 0 || index > _.slideCount - 1) && (_.unload(), removeAll === !0 ? _.jQueryslideTrack.children().remove() : _.jQueryslideTrack.children(this.options.slide).eq(index).remove(), _.jQueryslides = _.jQueryslideTrack.children(this.options.slide), _.jQueryslideTrack.children(this.options.slide).detach(), _.jQueryslideTrack.append(_.jQueryslides), _.jQueryslidesCache = _.jQueryslides, void _.reinit())
//     }, Slick.prototype.setCSS = function(position) {
//         var x, y, _ = this,
//             positionProps = {};
//         _.options.rtl === !0 && (position = -position), x = "left" == _.positionProp ? Math.ceil(position) + "px" : "0px", y = "top" == _.positionProp ? Math.ceil(position) + "px" : "0px", positionProps[_.positionProp] = position, _.transformsEnabled === !1 ? _.jQueryslideTrack.css(positionProps) : (positionProps = {}, _.cssTransitions === !1 ? (positionProps[_.animType] = "translate(" + x + ", " + y + ")", _.jQueryslideTrack.css(positionProps)) : (positionProps[_.animType] = "translate3d(" + x + ", " + y + ", 0px)", _.jQueryslideTrack.css(positionProps)))
//     }, Slick.prototype.setDimensions = function() {
//         var _ = this;
//         _.options.vertical === !1 ? _.options.centerMode === !0 && _.jQuerylist.css({
//             padding: "0px " + _.options.centerPadding
//         }) : (_.jQuerylist.height(_.jQueryslides.first().outerHeight(!0) * _.options.slidesToShow), _.options.centerMode === !0 && _.jQuerylist.css({
//             padding: _.options.centerPadding + " 0px"
//         })), _.listWidth = _.jQuerylist.width(), _.listHeight = _.jQuerylist.height(), _.options.vertical === !1 && _.options.variableWidth === !1 ? (_.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow), _.jQueryslideTrack.width(Math.ceil(_.slideWidth * _.jQueryslideTrack.children(".slick-slide").length))) : _.options.variableWidth === !0 ? _.jQueryslideTrack.width(5e3 * _.slideCount) : (_.slideWidth = Math.ceil(_.listWidth), _.jQueryslideTrack.height(Math.ceil(_.jQueryslides.first().outerHeight(!0) * _.jQueryslideTrack.children(".slick-slide").length)));
//         var offset = _.jQueryslides.first().outerWidth(!0) - _.jQueryslides.first().width();
//         _.options.variableWidth === !1 && _.jQueryslideTrack.children(".slick-slide").width(_.slideWidth - offset)
//     }, Slick.prototype.setFade = function() {
//         var targetLeft, _ = this;
//         _.jQueryslides.each(function(index, element) {
//             targetLeft = _.slideWidth * index * -1, _.options.rtl === !0 ? jQuery(element).css({
//                 position: "relative",
//                 right: targetLeft,
//                 top: 0,
//                 zIndex: _.options.zIndex - 2,
//                 opacity: 0
//             }) : jQuery(element).css({
//                 position: "relative",
//                 left: targetLeft,
//                 top: 0,
//                 zIndex: _.options.zIndex - 2,
//                 opacity: 0
//             })
//         }), _.jQueryslides.eq(_.currentSlide).css({
//             zIndex: _.options.zIndex - 1,
//             opacity: 1
//         })
//     }, Slick.prototype.setHeight = function() {
//         var _ = this;
//         if (1 === _.options.slidesToShow && _.options.adaptiveHeight === !0 && _.options.vertical === !1) {
//             var targetHeight = _.jQueryslides.eq(_.currentSlide).outerHeight(!0);
//             _.jQuerylist.css("height", targetHeight)
//         }
//     }, Slick.prototype.setOption = Slick.prototype.slickSetOption = function() {
//         var l, item, option, value, type, _ = this,
//             refresh = !1;
//         if ("object" === jQuery.type(arguments[0]) ? (option = arguments[0], refresh = arguments[1], type = "multiple") : "string" === jQuery.type(arguments[0]) && (option = arguments[0], value = arguments[1], refresh = arguments[2], "responsive" === arguments[0] && "array" === jQuery.type(arguments[1]) ? type = "responsive" : "undefined" != typeof arguments[1] && (type = "single")), "single" === type) _.options[option] = value;
//         else if ("multiple" === type) jQuery.each(option, function(opt, val) {
//             _.options[opt] = val
//         });
//         else if ("responsive" === type)
//             for (item in value)
//                 if ("array" !== jQuery.type(_.options.responsive)) _.options.responsive = [value[item]];
//                 else {
//                     for (l = _.options.responsive.length - 1; l >= 0;) _.options.responsive[l].breakpoint === value[item].breakpoint && _.options.responsive.splice(l, 1), l--;
//                     _.options.responsive.push(value[item])
//                 }
//         refresh && (_.unload(), _.reinit())
//     }, Slick.prototype.setPosition = function() {
//         var _ = this;
//         _.setDimensions(), _.setHeight(), _.options.fade === !1 ? _.setCSS(_.getLeft(_.currentSlide)) : _.setFade(), _.jQueryslider.trigger("setPosition", [_])
//     }, Slick.prototype.setProps = function() {
//         var _ = this,
//             bodyStyle = document.body.style;
//         _.positionProp = _.options.vertical === !0 ? "top" : "left", "top" === _.positionProp ? _.jQueryslider.addClass("slick-vertical") : _.jQueryslider.removeClass("slick-vertical"), void 0 === bodyStyle.WebkitTransition && void 0 === bodyStyle.MozTransition && void 0 === bodyStyle.msTransition || _.options.useCSS === !0 && (_.cssTransitions = !0), _.options.fade && ("number" == typeof _.options.zIndex ? _.options.zIndex < 3 && (_.options.zIndex = 3) : _.options.zIndex = _.defaults.zIndex), void 0 !== bodyStyle.OTransform && (_.animType = "OTransform", _.transformType = "-o-transform", _.transitionType = "OTransition", void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.webkitPerspective && (_.animType = !1)), void 0 !== bodyStyle.MozTransform && (_.animType = "MozTransform", _.transformType = "-moz-transform", _.transitionType = "MozTransition", void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.MozPerspective && (_.animType = !1)), void 0 !== bodyStyle.webkitTransform && (_.animType = "webkitTransform", _.transformType = "-webkit-transform", _.transitionType = "webkitTransition", void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.webkitPerspective && (_.animType = !1)), void 0 !== bodyStyle.msTransform && (_.animType = "msTransform", _.transformType = "-ms-transform", _.transitionType = "msTransition", void 0 === bodyStyle.msTransform && (_.animType = !1)), void 0 !== bodyStyle.transform && _.animType !== !1 && (_.animType = "transform", _.transformType = "transform", _.transitionType = "transition"), _.transformsEnabled = _.options.useTransform && null !== _.animType && _.animType !== !1
//     }, Slick.prototype.setSlideClasses = function(index) {
//         var centerOffset, allSlides, indexOffset, remainder, _ = this;
//         if (allSlides = _.jQueryslider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), _.jQueryslides.eq(index).addClass("slick-current"), _.options.centerMode === !0) {
//             var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;
//             centerOffset = Math.floor(_.options.slidesToShow / 2), _.options.infinite === !0 && (index >= centerOffset && index <= _.slideCount - 1 - centerOffset ? _.jQueryslides.slice(index - centerOffset + evenCoef, index + centerOffset + 1).addClass("slick-active").attr("aria-hidden", "false") : (indexOffset = _.options.slidesToShow + index, allSlides.slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2).addClass("slick-active").attr("aria-hidden", "false")), 0 === index ? allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass("slick-center") : index === _.slideCount - 1 && allSlides.eq(_.options.slidesToShow).addClass("slick-center")), _.jQueryslides.eq(index).addClass("slick-center")
//         } else index >= 0 && index <= _.slideCount - _.options.slidesToShow ? _.jQueryslides.slice(index, index + _.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false") : allSlides.length <= _.options.slidesToShow ? allSlides.addClass("slick-active").attr("aria-hidden", "false") : (remainder = _.slideCount % _.options.slidesToShow, indexOffset = _.options.infinite === !0 ? _.options.slidesToShow + index : index, _.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow ? allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass("slick-active").attr("aria-hidden", "false") : allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false"));
//         "ondemand" !== _.options.lazyLoad && "anticipated" !== _.options.lazyLoad || _.lazyLoad()
//     }, Slick.prototype.setupInfinite = function() {
//         var i, slideIndex, infiniteCount, _ = this;
//         if (_.options.fade === !0 && (_.options.centerMode = !1), _.options.infinite === !0 && _.options.fade === !1 && (slideIndex = null, _.slideCount > _.options.slidesToShow)) {
//             for (infiniteCount = _.options.centerMode === !0 ? _.options.slidesToShow + 1 : _.options.slidesToShow, i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) slideIndex = i - 1, jQuery(_.jQueryslides[slideIndex]).clone(!0).attr("id", "").attr("data-slick-index", slideIndex - _.slideCount).prependTo(_.jQueryslideTrack).addClass("slick-cloned");
//             for (i = 0; i < infiniteCount + _.slideCount; i += 1) slideIndex = i, jQuery(_.jQueryslides[slideIndex]).clone(!0).attr("id", "").attr("data-slick-index", slideIndex + _.slideCount).appendTo(_.jQueryslideTrack).addClass("slick-cloned");
//             _.jQueryslideTrack.find(".slick-cloned").find("[id]").each(function() {
//                 jQuery(this).attr("id", "")
//             })
//         }
//     }, Slick.prototype.interrupt = function(toggle) {
//         var _ = this;
//         toggle || _.autoPlay(), _.interrupted = toggle
//     }, Slick.prototype.selectHandler = function(event) {
//         var _ = this,
//             targetElement = jQuery(event.target).is(".slick-slide") ? jQuery(event.target) : jQuery(event.target).parents(".slick-slide"),
//             index = parseInt(targetElement.attr("data-slick-index"));
//         return index || (index = 0), _.slideCount <= _.options.slidesToShow ? void _.slideHandler(index, !1, !0) : void _.slideHandler(index)
//     }, Slick.prototype.slideHandler = function(index, sync, dontAnimate) {
//         var targetSlide, animSlide, oldSlide, slideLeft, navTarget, targetLeft = null,
//             _ = this;
//         if (sync = sync || !1, !(_.animating === !0 && _.options.waitForAnimate === !0 || _.options.fade === !0 && _.currentSlide === index)) return sync === !1 && _.asNavFor(index), targetSlide = index, targetLeft = _.getLeft(targetSlide), slideLeft = _.getLeft(_.currentSlide), _.currentLeft = null === _.swipeLeft ? slideLeft : _.swipeLeft, _.options.infinite === !1 && _.options.centerMode === !1 && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll) ? void(_.options.fade === !1 && (targetSlide = _.currentSlide, dontAnimate !== !0 ? _.animateSlide(slideLeft, function() {
//             _.postSlide(targetSlide)
//         }) : _.postSlide(targetSlide))) : _.options.infinite === !1 && _.options.centerMode === !0 && (index < 0 || index > _.slideCount - _.options.slidesToScroll) ? void(_.options.fade === !1 && (targetSlide = _.currentSlide, dontAnimate !== !0 ? _.animateSlide(slideLeft, function() {
//             _.postSlide(targetSlide)
//         }) : _.postSlide(targetSlide))) : (_.options.autoplay && clearInterval(_.autoPlayTimer), animSlide = targetSlide < 0 ? _.slideCount % _.options.slidesToScroll !== 0 ? _.slideCount - _.slideCount % _.options.slidesToScroll : _.slideCount + targetSlide : targetSlide >= _.slideCount ? _.slideCount % _.options.slidesToScroll !== 0 ? 0 : targetSlide - _.slideCount : targetSlide, _.animating = !0, _.jQueryslider.trigger("beforeChange", [_, _.currentSlide, animSlide]), oldSlide = _.currentSlide, _.currentSlide = animSlide, _.setSlideClasses(_.currentSlide), _.options.asNavFor && (navTarget = _.getNavTarget(), navTarget = navTarget.slick("getSlick"), navTarget.slideCount <= navTarget.options.slidesToShow && navTarget.setSlideClasses(_.currentSlide)), _.updateDots(), _.updateArrows(), _.options.fade === !0 ? (dontAnimate !== !0 ? (_.fadeSlideOut(oldSlide), _.fadeSlide(animSlide, function() {
//             _.postSlide(animSlide)
//         })) : _.postSlide(animSlide), void _.animateHeight()) : void(dontAnimate !== !0 ? _.animateSlide(targetLeft, function() {
//             _.postSlide(animSlide)
//         }) : _.postSlide(animSlide)))
//     }, Slick.prototype.startLoad = function() {
//         var _ = this;
//         _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && (_.jQueryprevArrow.hide(), _.jQuerynextArrow.hide()), _.options.dots === !0 && _.slideCount > _.options.slidesToShow && _.jQuerydots.hide(), _.jQueryslider.addClass("slick-loading")
//     }, Slick.prototype.swipeDirection = function() {
//         var xDist, yDist, r, swipeAngle, _ = this;
//         return xDist = _.touchObject.startX - _.touchObject.curX, yDist = _.touchObject.startY - _.touchObject.curY, r = Math.atan2(yDist, xDist), swipeAngle = Math.round(180 * r / Math.PI), swipeAngle < 0 && (swipeAngle = 360 - Math.abs(swipeAngle)), swipeAngle <= 45 && swipeAngle >= 0 ? _.options.rtl === !1 ? "left" : "right" : swipeAngle <= 360 && swipeAngle >= 315 ? _.options.rtl === !1 ? "left" : "right" : swipeAngle >= 135 && swipeAngle <= 225 ? _.options.rtl === !1 ? "right" : "left" : _.options.verticalSwiping === !0 ? swipeAngle >= 35 && swipeAngle <= 135 ? "down" : "up" : "vertical"
//     }, Slick.prototype.swipeEnd = function(event) {
//         var slideCount, direction, _ = this;
//         if (_.dragging = !1, _.swiping = !1, _.scrolling) return _.scrolling = !1, !1;
//         if (_.interrupted = !1, _.shouldClick = !(_.touchObject.swipeLength > 10), void 0 === _.touchObject.curX) return !1;
//         if (_.touchObject.edgeHit === !0 && _.jQueryslider.trigger("edge", [_, _.swipeDirection()]), _.touchObject.swipeLength >= _.touchObject.minSwipe) {
//             switch (direction = _.swipeDirection()) {
//                 case "left":
//                 case "down":
//                     slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount(), _.currentDirection = 0;
//                     break;
//                 case "right":
//                 case "up":
//                     slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount(), _.currentDirection = 1
//             }
//             "vertical" != direction && (_.slideHandler(slideCount), _.touchObject = {}, _.jQueryslider.trigger("swipe", [_, direction]))
//         } else _.touchObject.startX !== _.touchObject.curX && (_.slideHandler(_.currentSlide), _.touchObject = {})
//     }, Slick.prototype.swipeHandler = function(event) {
//         var _ = this;
//         if (!(_.options.swipe === !1 || "ontouchend" in document && _.options.swipe === !1 || _.options.draggable === !1 && event.type.indexOf("mouse") !== -1)) switch (_.touchObject.fingerCount = event.originalEvent && void 0 !== event.originalEvent.touches ? event.originalEvent.touches.length : 1, _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold, _.options.verticalSwiping === !0 && (_.touchObject.minSwipe = _.listHeight / _.options.touchThreshold), event.data.action) {
//             case "start":
//                 _.swipeStart(event);
//                 break;
//             case "move":
//                 _.swipeMove(event);
//                 break;
//             case "end":
//                 _.swipeEnd(event)
//         }
//     }, Slick.prototype.swipeMove = function(event) {
//         var curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength, _ = this;
//         return touches = void 0 !== event.originalEvent ? event.originalEvent.touches : null, !(!_.dragging || _.scrolling || touches && 1 !== touches.length) && (curLeft = _.getLeft(_.currentSlide), _.touchObject.curX = void 0 !== touches ? touches[0].pageX : event.clientX, _.touchObject.curY = void 0 !== touches ? touches[0].pageY : event.clientY, _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2))), verticalSwipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2))), !_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4 ? (_.scrolling = !0, !1) : (_.options.verticalSwiping === !0 && (_.touchObject.swipeLength = verticalSwipeLength), swipeDirection = _.swipeDirection(), void 0 !== event.originalEvent && _.touchObject.swipeLength > 4 && (_.swiping = !0, event.preventDefault()), positionOffset = (_.options.rtl === !1 ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1), _.options.verticalSwiping === !0 && (positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1), swipeLength = _.touchObject.swipeLength, _.touchObject.edgeHit = !1, _.options.infinite === !1 && (0 === _.currentSlide && "right" === swipeDirection || _.currentSlide >= _.getDotCount() && "left" === swipeDirection) && (swipeLength = _.touchObject.swipeLength * _.options.edgeFriction, _.touchObject.edgeHit = !0), _.options.vertical === !1 ? _.swipeLeft = curLeft + swipeLength * positionOffset : _.swipeLeft = curLeft + swipeLength * (_.jQuerylist.height() / _.listWidth) * positionOffset, _.options.verticalSwiping === !0 && (_.swipeLeft = curLeft + swipeLength * positionOffset), _.options.fade !== !0 && _.options.touchMove !== !1 && (_.animating === !0 ? (_.swipeLeft = null, !1) : void _.setCSS(_.swipeLeft))))
//     }, Slick.prototype.swipeStart = function(event) {
//         var touches, _ = this;
//         return _.interrupted = !0, 1 !== _.touchObject.fingerCount || _.slideCount <= _.options.slidesToShow ? (_.touchObject = {}, !1) : (void 0 !== event.originalEvent && void 0 !== event.originalEvent.touches && (touches = event.originalEvent.touches[0]), _.touchObject.startX = _.touchObject.curX = void 0 !== touches ? touches.pageX : event.clientX, _.touchObject.startY = _.touchObject.curY = void 0 !== touches ? touches.pageY : event.clientY, void(_.dragging = !0))
//     }, Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {
//         var _ = this;
//         null !== _.jQueryslidesCache && (_.unload(), _.jQueryslideTrack.children(this.options.slide).detach(), _.jQueryslidesCache.appendTo(_.jQueryslideTrack), _.reinit())
//     }, Slick.prototype.unload = function() {
//         var _ = this;
//         jQuery(".slick-cloned", _.jQueryslider).remove(), _.jQuerydots && _.jQuerydots.remove(), _.jQueryprevArrow && _.htmlExpr.test(_.options.prevArrow) && _.jQueryprevArrow.remove(), _.jQuerynextArrow && _.htmlExpr.test(_.options.nextArrow) && _.jQuerynextArrow.remove(), _.jQueryslides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "")
//     }, Slick.prototype.unslick = function(fromBreakpoint) {
//         var _ = this;
//         _.jQueryslider.trigger("unslick", [_, fromBreakpoint]), _.destroy()
//     }, Slick.prototype.updateArrows = function() {
//         var centerOffset, _ = this;
//         centerOffset = Math.floor(_.options.slidesToShow / 2), _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && !_.options.infinite && (_.jQueryprevArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), _.jQuerynextArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), 0 === _.currentSlide ? (_.jQueryprevArrow.addClass("slick-disabled").attr("aria-disabled", "true"), _.jQuerynextArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : _.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === !1 ? (_.jQuerynextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), _.jQueryprevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : _.currentSlide >= _.slideCount - 1 && _.options.centerMode === !0 && (_.jQuerynextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), _.jQueryprevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")))
//     }, Slick.prototype.updateDots = function() {
//         var _ = this;
//         null !== _.jQuerydots && (_.jQuerydots.find("li").removeClass("slick-active").end(), _.jQuerydots.find("li").eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass("slick-active"))
//     }, Slick.prototype.visibility = function() {
//         var _ = this;
//         _.options.autoplay && (document[_.hidden] ? _.interrupted = !0 : _.interrupted = !1)
//     }, jQuery.fn.slick = function() {
//         var i, ret, _ = this,
//             opt = arguments[0],
//             args = Array.prototype.slice.call(arguments, 1),
//             l = _.length;
//         for (i = 0; i < l; i++)
//             if ("object" == typeof opt || "undefined" == typeof opt ? _[i].slick = new Slick(_[i], opt) : ret = _[i].slick[opt].apply(_[i].slick, args), "undefined" != typeof ret) return ret;
//         return _
//     }
// }),
// function() {
//     var jQuery, win;
//     jQuery = window.jQuery, win = jQuery(window), jQuery.fn.stick_in_parent = function(opts) {
//         var doc, elm, enable_bottoming, fn, i, inner_scrolling, len, manual_spacer, offset_top, outer_width, parent_selector, recalc_every, sticky_class;
//         for (null == opts && (opts = {}), sticky_class = opts.sticky_class, inner_scrolling = opts.inner_scrolling, recalc_every = opts.recalc_every, parent_selector = opts.parent, offset_top = opts.offset_top, manual_spacer = opts.spacer, enable_bottoming = opts.bottoming, null == offset_top && (offset_top = 0), null == parent_selector && (parent_selector = void 0), null == inner_scrolling && (inner_scrolling = !0), null == sticky_class && (sticky_class = "is_stuck"), doc = jQuery(document), null == enable_bottoming && (enable_bottoming = !0), outer_width = function(el) {
//                 var _el, computed, w;
//                 return window.getComputedStyle ? (_el = el[0], computed = window.getComputedStyle(el[0]), w = parseFloat(computed.getPropertyValue("width")) + parseFloat(computed.getPropertyValue("margin-left")) + parseFloat(computed.getPropertyValue("margin-right")), "border-box" !== computed.getPropertyValue("box-sizing") && (w += parseFloat(computed.getPropertyValue("border-left-width")) + parseFloat(computed.getPropertyValue("border-right-width")) + parseFloat(computed.getPropertyValue("padding-left")) + parseFloat(computed.getPropertyValue("padding-right"))), w) : el.outerWidth(!0)
//             }, fn = function(elm, padding_bottom, parent_top, parent_height, top, height, el_float, detached) {
//                 var bottomed, detach, fixed, last_pos, last_scroll_height, offset, parent, recalc, recalc_and_tick, recalc_counter, spacer, tick, recalc_height;
//                 if (!elm.data("sticky_kit")) {
//                     if (elm.data("sticky_kit", !0), last_scroll_height = doc.height(), parent = elm.parent(), null != parent_selector && (parent = parent.closest(parent_selector)), !parent.length) throw "failed to find stick parent";
//                     if (fixed = !1, bottomed = !1, spacer = null != manual_spacer ? manual_spacer && elm.closest(manual_spacer) : jQuery("<div />"), spacer && spacer.css("position", elm.css("position")), recalc = function() {
//                             var border_top, padding_top, restore;
//                             if (!detached) return last_scroll_height = doc.height(), border_top = parseInt(parent.css("border-top-width"), 10), padding_top = parseInt(parent.css("padding-top"), 10), padding_bottom = parseInt(parent.css("padding-bottom"), 10), parent_top = parent.offset().top + border_top + padding_top, parent_height = parent.height(), fixed && (fixed = !1, bottomed = !1, null == manual_spacer && (elm.insertAfter(spacer), spacer.detach()), elm.css({
//                                 position: "",
//                                 top: "",
//                                 width: "",
//                                 bottom: ""
//                             }).removeClass(sticky_class), restore = !0), top = elm.offset().top - (parseInt(elm.css("margin-top"), 10) || 0) - offset_top, height = elm.outerHeight(!0), el_float = elm.css("float"), spacer && spacer.css({
//                                 width: outer_width(elm),
//                                 height: height,
//                                 display: elm.css("display"),
//                                 "vertical-align": elm.css("vertical-align"),
//                                 "float": el_float
//                             }), restore ? tick() : void 0
//                         }, recalc(), recalc_height = function() {
//                             height = elm.outerHeight(!0)
//                         }, height !== parent_height) return last_pos = void 0, offset = offset_top, recalc_counter = recalc_every, tick = function() {
//                         var css, delta, recalced, scroll, will_bottom, win_height;
//                         if (!detached) return recalced = !1, null != recalc_counter && (recalc_counter -= 1, recalc_counter <= 0 && (recalc_counter = recalc_every, recalc(), recalced = !0)), recalced || doc.height() === last_scroll_height || (recalc(), recalced = !0), scroll = win.scrollTop(), null != last_pos && (delta = scroll - last_pos), last_pos = scroll, fixed ? (enable_bottoming && (will_bottom = scroll + height + offset > parent_height + parent_top, bottomed && !will_bottom && (bottomed = !1, elm.css({
//                                 position: "fixed",
//                                 bottom: "",
//                                 top: offset
//                             }).trigger("sticky_kit:unbottom"))), scroll < top && (fixed = !1, offset = offset_top, null == manual_spacer && ("left" !== el_float && "right" !== el_float || elm.insertAfter(spacer), spacer.detach()), css = {
//                                 position: "",
//                                 width: "",
//                                 top: ""
//                             }, elm.css(css).removeClass(sticky_class).trigger("sticky_kit:unstick")),
//                             inner_scrolling && (win_height = win.height(), height + offset_top > win_height && (bottomed || (offset -= delta, offset = Math.max(win_height - height, offset), offset = Math.min(offset_top, offset), fixed && elm.css({
//                                 top: offset + "px"
//                             }))))) : scroll > top && (fixed = !0, css = {
//                             position: "fixed",
//                             top: offset
//                         }, css.width = "border-box" === elm.css("box-sizing") ? elm.outerWidth() + "px" : elm.width() + "px", elm.css(css).addClass(sticky_class), null == manual_spacer && (elm.after(spacer), "left" !== el_float && "right" !== el_float || spacer.append(elm)), elm.trigger("sticky_kit:stick")), fixed && enable_bottoming && (null == will_bottom && (will_bottom = scroll + height + offset > parent_height + parent_top), !bottomed && will_bottom) ? (bottomed = !0, "static" === parent.css("position") && parent.css({
//                             position: "relative"
//                         }), elm.css({
//                             position: "absolute",
//                             bottom: padding_bottom,
//                             top: "auto"
//                         }).trigger("sticky_kit:bottom")) : void 0
//                     }, recalc_and_tick = function() {
//                         return recalc(), tick()
//                     }, detach = function() {
//                         if (detached = !0, win.off("touchmove", tick), win.off("scroll", tick), win.off("resize", recalc_and_tick), jQuery(document.body).off("sticky_kit:recalc", recalc_and_tick), elm.off("sticky_kit:detach", detach), elm.removeData("sticky_kit"), elm.css({
//                                 position: "",
//                                 bottom: "",
//                                 top: "",
//                                 width: ""
//                             }), parent.position("position", ""), fixed) return null == manual_spacer && ("left" !== el_float && "right" !== el_float || elm.insertAfter(spacer), spacer.remove()), elm.removeClass(sticky_class)
//                     }, win.on("touchmove", tick), win.on("scroll", tick), win.on("resize", recalc_and_tick), jQuery(document.body).on("sticky_kit:recalc", recalc_and_tick), elm.on("sticky_kit:detach", detach), elm.on("sticky_kit:recalc_height", recalc_height), setTimeout(tick, 0)
//                 }
//             }, i = 0, len = this.length; i < len; i++) elm = this[i], fn(jQuery(elm));
//         return this
//     }
// }.call(this),
//     function(root, factory) {
//         "function" == typeof define && define.amd ? define(["jquery"], function(a0) {
//             return factory(a0)
//         }) : "object" == typeof exports ? module.exports = factory(require("jquery")) : factory(jQuery)
//     }(this, function(jQuery) {
//         function Ruler(jQuerytooltip) {
//             this.jQuerycontainer, this.constraints = null, this.__jQuerytooltip, this.__init(jQuerytooltip)
//         }

//         function areEqual(a, b) {
//             var same = !0;
//             return jQuery.each(a, function(i, _) {
//                 if (void 0 === b[i] || a[i] !== b[i]) return same = !1, !1
//             }), same
//         }

//         function bodyContains(jQueryobj) {
//             var id = jQueryobj.attr("id"),
//                 el = id ? env.window.document.getElementById(id) : null;
//             return el ? el === jQueryobj[0] : jQuery.contains(env.window.document.body, jQueryobj[0])
//         }

//         function transitionSupport() {
//             if (!win) return !1;
//             var b = win.document.body || win.document.documentElement,
//                 s = b.style,
//                 p = "transition",
//                 v = ["Moz", "Webkit", "Khtml", "O", "ms"];
//             if ("string" == typeof s[p]) return !0;
//             p = p.charAt(0).toUpperCase() + p.substr(1);
//             for (var i = 0; i < v.length; i++)
//                 if ("string" == typeof s[v[i] + p]) return !0;
//             return !1
//         }
//         var defaults = {
//                 animation: "fade",
//                 animationDuration: 350,
//                 content: null,
//                 contentAsHTML: !1,
//                 contentCloning: !1,
//                 debug: !0,
//                 delay: 300,
//                 delayTouch: [300, 500],
//                 functionInit: null,
//                 functionBefore: null,
//                 functionReady: null,
//                 functionAfter: null,
//                 functionFormat: null,
//                 IEmin: 6,
//                 interactive: !1,
//                 multiple: !1,
//                 parent: null,
//                 plugins: ["sideTip"],
//                 repositionOnScroll: !1,
//                 restoration: "none",
//                 selfDestruction: !0,
//                 theme: [],
//                 timer: 0,
//                 trackerInterval: 500,
//                 trackOrigin: !1,
//                 trackTooltip: !1,
//                 trigger: "hover",
//                 triggerClose: {
//                     click: !1,
//                     mouseleave: !1,
//                     originClick: !1,
//                     scroll: !1,
//                     tap: !1,
//                     touchleave: !1
//                 },
//                 triggerOpen: {
//                     click: !1,
//                     mouseenter: !1,
//                     tap: !1,
//                     touchstart: !1
//                 },
//                 updateAnimation: "rotate",
//                 zIndex: 9999999
//             },
//             win = "undefined" != typeof window ? window : null,
//             env = {
//                 hasTouchCapability: !(!win || !("ontouchstart" in win || win.DocumentTouch && win.document instanceof win.DocumentTouch || win.navigator.maxTouchPoints)),
//                 hasTransitions: transitionSupport(),
//                 IE: !1,
//                 semVer: "4.2.5",
//                 window: win
//             },
//             core = function() {
//                 this.__jQueryemitterPrivate = jQuery({}), this.__jQueryemitterPublic = jQuery({}), this.__instancesLatestArr = [], this.__plugins = {}, this._env = env
//             };
//         core.prototype = {
//             __bridge: function(constructor, obj, pluginName) {
//                 if (!obj[pluginName]) {
//                     var fn = function() {};
//                     fn.prototype = constructor;
//                     var pluginInstance = new fn;
//                     pluginInstance.__init && pluginInstance.__init(obj), jQuery.each(constructor, function(methodName, fn) {
//                         0 != methodName.indexOf("__") && (obj[methodName] ? defaults.debug : (obj[methodName] = function() {
//                             return pluginInstance[methodName].apply(pluginInstance, Array.prototype.slice.apply(arguments))
//                         }, obj[methodName].bridged = pluginInstance))
//                     }), obj[pluginName] = pluginInstance
//                 }
//                 return this
//             },
//             __setWindow: function(window) {
//                 return env.window = window, this
//             },
//             _getRuler: function(jQuerytooltip) {
//                 return new Ruler(jQuerytooltip)
//             },
//             _off: function() {
//                 return this.__jQueryemitterPrivate.off.apply(this.__jQueryemitterPrivate, Array.prototype.slice.apply(arguments)), this
//             },
//             _on: function() {
//                 return this.__jQueryemitterPrivate.on.apply(this.__jQueryemitterPrivate, Array.prototype.slice.apply(arguments)), this
//             },
//             _one: function() {
//                 return this.__jQueryemitterPrivate.one.apply(this.__jQueryemitterPrivate, Array.prototype.slice.apply(arguments)), this
//             },
//             _plugin: function(plugin) {
//                 var self = this;
//                 if ("string" == typeof plugin) {
//                     var pluginName = plugin,
//                         p = null;
//                     return pluginName.indexOf(".") > 0 ? p = self.__plugins[pluginName] : jQuery.each(self.__plugins, function(i, plugin) {
//                         if (plugin.name.substring(plugin.name.length - pluginName.length - 1) == "." + pluginName) return p = plugin, !1
//                     }), p
//                 }
//                 if (plugin.name.indexOf(".") < 0) throw new Error("Plugins must be namespaced");
//                 return self.__plugins[plugin.name] = plugin, plugin.core && self.__bridge(plugin.core, self, plugin.name), this
//             },
//             _trigger: function() {
//                 var args = Array.prototype.slice.apply(arguments);
//                 return "string" == typeof args[0] && (args[0] = {
//                     type: args[0]
//                 }), this.__jQueryemitterPrivate.trigger.apply(this.__jQueryemitterPrivate, args), this.__jQueryemitterPublic.trigger.apply(this.__jQueryemitterPublic, args), this
//             },
//             instances: function(selector) {
//                 var instances = [],
//                     sel = selector || ".tooltipstered";
//                 return jQuery(sel).each(function() {
//                     var jQuerythis = jQuery(this),
//                         ns = jQuerythis.data("tooltipster-ns");
//                     ns && jQuery.each(ns, function(i, namespace) {
//                         instances.push(jQuerythis.data(namespace))
//                     })
//                 }), instances
//             },
//             instancesLatest: function() {
//                 return this.__instancesLatestArr
//             },
//             off: function() {
//                 return this.__jQueryemitterPublic.off.apply(this.__jQueryemitterPublic, Array.prototype.slice.apply(arguments)), this
//             },
//             on: function() {
//                 return this.__jQueryemitterPublic.on.apply(this.__jQueryemitterPublic, Array.prototype.slice.apply(arguments)), this
//             },
//             one: function() {
//                 return this.__jQueryemitterPublic.one.apply(this.__jQueryemitterPublic, Array.prototype.slice.apply(arguments)), this
//             },
//             origins: function(selector) {
//                 var sel = selector ? selector + " " : "";
//                 return jQuery(sel + ".tooltipstered").toArray()
//             },
//             setDefaults: function(d) {
//                 return jQuery.extend(defaults, d), this
//             },
//             triggerHandler: function() {
//                 return this.__jQueryemitterPublic.triggerHandler.apply(this.__jQueryemitterPublic, Array.prototype.slice.apply(arguments)), this
//             }
//         }, jQuery.tooltipster = new core, jQuery.Tooltipster = function(element, options) {
//             this.__callbacks = {
//                 close: [],
//                 open: []
//             }, this.__closingTime, this.__Content, this.__contentBcr, this.__destroyed = !1, this.__jQueryemitterPrivate = jQuery({}), this.__jQueryemitterPublic = jQuery({}), this.__enabled = !0, this.__garbageCollector, this.__Geometry, this.__lastPosition, this.__namespace = "tooltipster-" + Math.round(1e6 * Math.random()), this.__options, this.__jQueryoriginParents, this.__pointerIsOverOrigin = !1, this.__previousThemes = [], this.__state = "closed", this.__timeouts = {
//                 close: [],
//                 open: null
//             }, this.__touchEvents = [], this.__tracker = null, this._jQueryorigin, this._jQuerytooltip, this.__init(element, options)
//         }, jQuery.Tooltipster.prototype = {
//             __init: function(origin, options) {
//                 var self = this;
//                 if (self._jQueryorigin = jQuery(origin), self.__options = jQuery.extend(!0, {}, defaults, options), self.__optionsFormat(), !env.IE || env.IE >= self.__options.IEmin) {
//                     var initialTitle = null;
//                     if (void 0 === self._jQueryorigin.data("tooltipster-initialTitle") && (initialTitle = self._jQueryorigin.attr("title"), void 0 === initialTitle && (initialTitle = null), self._jQueryorigin.data("tooltipster-initialTitle", initialTitle)), null !== self.__options.content) self.__contentSet(self.__options.content);
//                     else {
//                         var jQueryel, selector = self._jQueryorigin.attr("data-tooltip-content");
//                         selector && (jQueryel = jQuery(selector)), jQueryel && jQueryel[0] ? self.__contentSet(jQueryel.first()) : self.__contentSet(initialTitle)
//                     }
//                     self._jQueryorigin.removeAttr("title").addClass("tooltipstered"), self.__prepareOrigin(), self.__prepareGC(), jQuery.each(self.__options.plugins, function(i, pluginName) {
//                         self._plug(pluginName)
//                     }), env.hasTouchCapability && jQuery(env.window.document.body).on("touchmove." + self.__namespace + "-triggerOpen", function(event) {
//                         self._touchRecordEvent(event)
//                     }), self._on("created", function() {
//                         self.__prepareTooltip()
//                     })._on("repositioned", function(e) {
//                         self.__lastPosition = e.position
//                     })
//                 } else self.__options.disabled = !0
//             },
//             __contentInsert: function() {
//                 var self = this,
//                     jQueryel = self._jQuerytooltip.find(".tooltipster-content"),
//                     formattedContent = self.__Content,
//                     format = function(content) {
//                         formattedContent = content
//                     };
//                 return self._trigger({
//                     type: "format",
//                     content: self.__Content,
//                     format: format
//                 }), self.__options.functionFormat && (formattedContent = self.__options.functionFormat.call(self, self, {
//                     origin: self._jQueryorigin[0]
//                 }, self.__Content)), "string" != typeof formattedContent || self.__options.contentAsHTML ? jQueryel.empty().append(formattedContent) : jQueryel.text(formattedContent), self
//             },
//             __contentSet: function(content) {
//                 return content instanceof jQuery && this.__options.contentCloning && (content = content.clone(!0)), this.__Content = content, this._trigger({
//                     type: "updated",
//                     content: content
//                 }), this
//             },
//             __destroyError: function() {
//                 throw new Error("This tooltip has been destroyed and cannot execute your method call.")
//             },
//             __geometry: function() {
//                 var self = this,
//                     jQuerytarget = self._jQueryorigin,
//                     originIsArea = self._jQueryorigin.is("area");
//                 if (originIsArea) {
//                     var mapName = self._jQueryorigin.parent().attr("name");
//                     jQuerytarget = jQuery('img[usemap="#' + mapName + '"]')
//                 }
//                 var bcr = jQuerytarget[0].getBoundingClientRect(),
//                     jQuerydocument = jQuery(env.window.document),
//                     jQuerywindow = jQuery(env.window),
//                     jQueryparent = jQuerytarget,
//                     geo = {
//                         available: {
//                             document: null,
//                             window: null
//                         },
//                         document: {
//                             size: {
//                                 height: jQuerydocument.height(),
//                                 width: jQuerydocument.width()
//                             }
//                         },
//                         window: {
//                             scroll: {
//                                 left: env.window.scrollX || env.window.document.documentElement.scrollLeft,
//                                 top: env.window.scrollY || env.window.document.documentElement.scrollTop
//                             },
//                             size: {
//                                 height: jQuerywindow.height(),
//                                 width: jQuerywindow.width()
//                             }
//                         },
//                         origin: {
//                             fixedLineage: !1,
//                             offset: {},
//                             size: {
//                                 height: bcr.bottom - bcr.top,
//                                 width: bcr.right - bcr.left
//                             },
//                             usemapImage: originIsArea ? jQuerytarget[0] : null,
//                             windowOffset: {
//                                 bottom: bcr.bottom,
//                                 left: bcr.left,
//                                 right: bcr.right,
//                                 top: bcr.top
//                             }
//                         }
//                     };
//                 if (originIsArea) {
//                     var shape = self._jQueryorigin.attr("shape"),
//                         coords = self._jQueryorigin.attr("coords");
//                     if (coords && (coords = coords.split(","), jQuery.map(coords, function(val, i) {
//                             coords[i] = parseInt(val)
//                         })), "default" != shape) switch (shape) {
//                         case "circle":
//                             var circleCenterLeft = coords[0],
//                                 circleCenterTop = coords[1],
//                                 circleRadius = coords[2],
//                                 areaTopOffset = circleCenterTop - circleRadius,
//                                 areaLeftOffset = circleCenterLeft - circleRadius;
//                             geo.origin.size.height = 2 * circleRadius, geo.origin.size.width = geo.origin.size.height, geo.origin.windowOffset.left += areaLeftOffset, geo.origin.windowOffset.top += areaTopOffset;
//                             break;
//                         case "rect":
//                             var areaLeft = coords[0],
//                                 areaTop = coords[1],
//                                 areaRight = coords[2],
//                                 areaBottom = coords[3];
//                             geo.origin.size.height = areaBottom - areaTop, geo.origin.size.width = areaRight - areaLeft, geo.origin.windowOffset.left += areaLeft, geo.origin.windowOffset.top += areaTop;
//                             break;
//                         case "poly":
//                             for (var areaSmallestX = 0, areaSmallestY = 0, areaGreatestX = 0, areaGreatestY = 0, arrayAlternate = "even", i = 0; i < coords.length; i++) {
//                                 var areaNumber = coords[i];
//                                 "even" == arrayAlternate ? (areaNumber > areaGreatestX && (areaGreatestX = areaNumber, 0 === i && (areaSmallestX = areaGreatestX)), areaNumber < areaSmallestX && (areaSmallestX = areaNumber), arrayAlternate = "odd") : (areaNumber > areaGreatestY && (areaGreatestY = areaNumber, 1 == i && (areaSmallestY = areaGreatestY)), areaNumber < areaSmallestY && (areaSmallestY = areaNumber), arrayAlternate = "even")
//                             }
//                             geo.origin.size.height = areaGreatestY - areaSmallestY, geo.origin.size.width = areaGreatestX - areaSmallestX, geo.origin.windowOffset.left += areaSmallestX, geo.origin.windowOffset.top += areaSmallestY
//                     }
//                 }
//                 var edit = function(r) {
//                     geo.origin.size.height = r.height, geo.origin.windowOffset.left = r.left, geo.origin.windowOffset.top = r.top, geo.origin.size.width = r.width
//                 };
//                 for (self._trigger({
//                         type: "geometry",
//                         edit: edit,
//                         geometry: {
//                             height: geo.origin.size.height,
//                             left: geo.origin.windowOffset.left,
//                             top: geo.origin.windowOffset.top,
//                             width: geo.origin.size.width
//                         }
//                     }), geo.origin.windowOffset.right = geo.origin.windowOffset.left + geo.origin.size.width, geo.origin.windowOffset.bottom = geo.origin.windowOffset.top + geo.origin.size.height, geo.origin.offset.left = geo.origin.windowOffset.left + geo.window.scroll.left, geo.origin.offset.top = geo.origin.windowOffset.top + geo.window.scroll.top, geo.origin.offset.bottom = geo.origin.offset.top + geo.origin.size.height, geo.origin.offset.right = geo.origin.offset.left + geo.origin.size.width, geo.available.document = {
//                         bottom: {
//                             height: geo.document.size.height - geo.origin.offset.bottom,
//                             width: geo.document.size.width
//                         },
//                         left: {
//                             height: geo.document.size.height,
//                             width: geo.origin.offset.left
//                         },
//                         right: {
//                             height: geo.document.size.height,
//                             width: geo.document.size.width - geo.origin.offset.right
//                         },
//                         top: {
//                             height: geo.origin.offset.top,
//                             width: geo.document.size.width
//                         }
//                     }, geo.available.window = {
//                         bottom: {
//                             height: Math.max(geo.window.size.height - Math.max(geo.origin.windowOffset.bottom, 0), 0),
//                             width: geo.window.size.width
//                         },
//                         left: {
//                             height: geo.window.size.height,
//                             width: Math.max(geo.origin.windowOffset.left, 0)
//                         },
//                         right: {
//                             height: geo.window.size.height,
//                             width: Math.max(geo.window.size.width - Math.max(geo.origin.windowOffset.right, 0), 0)
//                         },
//                         top: {
//                             height: Math.max(geo.origin.windowOffset.top, 0),
//                             width: geo.window.size.width
//                         }
//                     };
//                     "html" != jQueryparent[0].tagName.toLowerCase();) {
//                     if ("fixed" == jQueryparent.css("position")) {
//                         geo.origin.fixedLineage = !0;
//                         break
//                     }
//                     jQueryparent = jQueryparent.parent()
//                 }
//                 return geo
//             },
//             __optionsFormat: function() {
//                 return "number" == typeof this.__options.animationDuration && (this.__options.animationDuration = [this.__options.animationDuration, this.__options.animationDuration]), "number" == typeof this.__options.delay && (this.__options.delay = [this.__options.delay, this.__options.delay]), "number" == typeof this.__options.delayTouch && (this.__options.delayTouch = [this.__options.delayTouch, this.__options.delayTouch]), "string" == typeof this.__options.theme && (this.__options.theme = [this.__options.theme]), null === this.__options.parent ? this.__options.parent = jQuery(env.window.document.body) : "string" == typeof this.__options.parent && (this.__options.parent = jQuery(this.__options.parent)), "hover" == this.__options.trigger ? (this.__options.triggerOpen = {
//                     mouseenter: !0,
//                     touchstart: !0
//                 }, this.__options.triggerClose = {
//                     mouseleave: !0,
//                     originClick: !0,
//                     touchleave: !0
//                 }) : "click" == this.__options.trigger && (this.__options.triggerOpen = {
//                     click: !0,
//                     tap: !0
//                 }, this.__options.triggerClose = {
//                     click: !0,
//                     tap: !0
//                 }), this._trigger("options"), this
//             },
//             __prepareGC: function() {
//                 var self = this;
//                 return self.__options.selfDestruction ? self.__garbageCollector = setInterval(function() {
//                     var now = (new Date).getTime();
//                     self.__touchEvents = jQuery.grep(self.__touchEvents, function(event, i) {
//                         return now - event.time > 6e4
//                     }), bodyContains(self._jQueryorigin) || self.close(function() {
//                         self.destroy()
//                     })
//                 }, 2e4) : clearInterval(self.__garbageCollector), self
//             },
//             __prepareOrigin: function() {
//                 var self = this;
//                 if (self._jQueryorigin.off("." + self.__namespace + "-triggerOpen"), env.hasTouchCapability && self._jQueryorigin.on("touchstart." + self.__namespace + "-triggerOpen touchend." + self.__namespace + "-triggerOpen touchcancel." + self.__namespace + "-triggerOpen", function(event) {
//                         self._touchRecordEvent(event)
//                     }), self.__options.triggerOpen.click || self.__options.triggerOpen.tap && env.hasTouchCapability) {
//                     var eventNames = "";
//                     self.__options.triggerOpen.click && (eventNames += "click." + self.__namespace + "-triggerOpen "), self.__options.triggerOpen.tap && env.hasTouchCapability && (eventNames += "touchend." + self.__namespace + "-triggerOpen"), self._jQueryorigin.on(eventNames, function(event) {
//                         self._touchIsMeaningfulEvent(event) && self._open(event)
//                     })
//                 }
//                 if (self.__options.triggerOpen.mouseenter || self.__options.triggerOpen.touchstart && env.hasTouchCapability) {
//                     var eventNames = "";
//                     self.__options.triggerOpen.mouseenter && (eventNames += "mouseenter." + self.__namespace + "-triggerOpen "), self.__options.triggerOpen.touchstart && env.hasTouchCapability && (eventNames += "touchstart." + self.__namespace + "-triggerOpen"), self._jQueryorigin.on(eventNames, function(event) {
//                         !self._touchIsTouchEvent(event) && self._touchIsEmulatedEvent(event) || (self.__pointerIsOverOrigin = !0, self._openShortly(event))
//                     })
//                 }
//                 if (self.__options.triggerClose.mouseleave || self.__options.triggerClose.touchleave && env.hasTouchCapability) {
//                     var eventNames = "";
//                     self.__options.triggerClose.mouseleave && (eventNames += "mouseleave." + self.__namespace + "-triggerOpen "), self.__options.triggerClose.touchleave && env.hasTouchCapability && (eventNames += "touchend." + self.__namespace + "-triggerOpen touchcancel." + self.__namespace + "-triggerOpen"), self._jQueryorigin.on(eventNames, function(event) {
//                         self._touchIsMeaningfulEvent(event) && (self.__pointerIsOverOrigin = !1)
//                     })
//                 }
//                 return self
//             },
//             __prepareTooltip: function() {
//                 var self = this,
//                     p = self.__options.interactive ? "auto" : "";
//                 return self._jQuerytooltip.attr("id", self.__namespace).css({
//                     "pointer-events": p,
//                     zIndex: self.__options.zIndex
//                 }), jQuery.each(self.__previousThemes, function(i, theme) {
//                     self._jQuerytooltip.removeClass(theme)
//                 }), jQuery.each(self.__options.theme, function(i, theme) {
//                     self._jQuerytooltip.addClass(theme)
//                 }), self.__previousThemes = jQuery.merge([], self.__options.theme), self
//             },
//             __scrollHandler: function(event) {
//                 var self = this;
//                 if (self.__options.triggerClose.scroll) self._close(event);
//                 else if (bodyContains(self._jQueryorigin) && bodyContains(self._jQuerytooltip)) {
//                     var geo = null;
//                     if (event.target === env.window.document) self.__Geometry.origin.fixedLineage || self.__options.repositionOnScroll && self.reposition(event);
//                     else {
//                         geo = self.__geometry();
//                         var overflows = !1;
//                         if ("fixed" != self._jQueryorigin.css("position") && self.__jQueryoriginParents.each(function(i, el) {
//                                 var jQueryel = jQuery(el),
//                                     overflowX = jQueryel.css("overflow-x"),
//                                     overflowY = jQueryel.css("overflow-y");
//                                 if ("visible" != overflowX || "visible" != overflowY) {
//                                     var bcr = el.getBoundingClientRect();
//                                     if ("visible" != overflowX && (geo.origin.windowOffset.left < bcr.left || geo.origin.windowOffset.right > bcr.right)) return overflows = !0, !1;
//                                     if ("visible" != overflowY && (geo.origin.windowOffset.top < bcr.top || geo.origin.windowOffset.bottom > bcr.bottom)) return overflows = !0, !1
//                                 }
//                                 if ("fixed" == jQueryel.css("position")) return !1
//                             }), overflows) self._jQuerytooltip.css("visibility", "hidden");
//                         else if (self._jQuerytooltip.css("visibility", "visible"), self.__options.repositionOnScroll) self.reposition(event);
//                         else {
//                             var offsetLeft = geo.origin.offset.left - self.__Geometry.origin.offset.left,
//                                 offsetTop = geo.origin.offset.top - self.__Geometry.origin.offset.top;
//                             self._jQuerytooltip.css({
//                                 left: self.__lastPosition.coord.left + offsetLeft,
//                                 top: self.__lastPosition.coord.top + offsetTop
//                             })
//                         }
//                     }
//                     self._trigger({
//                         type: "scroll",
//                         event: event,
//                         geo: geo
//                     })
//                 }
//                 return self
//             },
//             __stateSet: function(state) {
//                 return this.__state = state, this._trigger({
//                     type: "state",
//                     state: state
//                 }), this
//             },
//             __timeoutsClear: function() {
//                 return clearTimeout(this.__timeouts.open), this.__timeouts.open = null, jQuery.each(this.__timeouts.close, function(i, timeout) {
//                     clearTimeout(timeout)
//                 }), this.__timeouts.close = [], this
//             },
//             __trackerStart: function() {
//                 var self = this,
//                     jQuerycontent = self._jQuerytooltip.find(".tooltipster-content");
//                 return self.__options.trackTooltip && (self.__contentBcr = jQuerycontent[0].getBoundingClientRect()), self.__tracker = setInterval(function() {
//                     if (bodyContains(self._jQueryorigin) && bodyContains(self._jQuerytooltip)) {
//                         if (self.__options.trackOrigin) {
//                             var g = self.__geometry(),
//                                 identical = !1;
//                             areEqual(g.origin.size, self.__Geometry.origin.size) && (self.__Geometry.origin.fixedLineage ? areEqual(g.origin.windowOffset, self.__Geometry.origin.windowOffset) && (identical = !0) : areEqual(g.origin.offset, self.__Geometry.origin.offset) && (identical = !0)), identical || (self.__options.triggerClose.mouseleave ? self._close() : self.reposition())
//                         }
//                         if (self.__options.trackTooltip) {
//                             var currentBcr = jQuerycontent[0].getBoundingClientRect();
//                             currentBcr.height === self.__contentBcr.height && currentBcr.width === self.__contentBcr.width || (self.reposition(), self.__contentBcr = currentBcr)
//                         }
//                     } else self._close()
//                 }, self.__options.trackerInterval), self
//             },
//             _close: function(event, callback, force) {
//                 var self = this,
//                     ok = !0;
//                 if (self._trigger({
//                         type: "close",
//                         event: event,
//                         stop: function() {
//                             ok = !1
//                         }
//                     }), ok || force) {
//                     callback && self.__callbacks.close.push(callback), self.__callbacks.open = [], self.__timeoutsClear();
//                     var finishCallbacks = function() {
//                         jQuery.each(self.__callbacks.close, function(i, c) {
//                             c.call(self, self, {
//                                 event: event,
//                                 origin: self._jQueryorigin[0]
//                             })
//                         }), self.__callbacks.close = []
//                     };
//                     if ("closed" != self.__state) {
//                         var necessary = !0,
//                             d = new Date,
//                             now = d.getTime(),
//                             newClosingTime = now + self.__options.animationDuration[1];
//                         if ("disappearing" == self.__state && newClosingTime > self.__closingTime && self.__options.animationDuration[1] > 0 && (necessary = !1), necessary) {
//                             self.__closingTime = newClosingTime, "disappearing" != self.__state && self.__stateSet("disappearing");
//                             var finish = function() {
//                                 clearInterval(self.__tracker), self._trigger({
//                                     type: "closing",
//                                     event: event
//                                 }), self._jQuerytooltip.off("." + self.__namespace + "-triggerClose").removeClass("tooltipster-dying"), jQuery(env.window).off("." + self.__namespace + "-triggerClose"), self.__jQueryoriginParents.each(function(i, el) {
//                                     jQuery(el).off("scroll." + self.__namespace + "-triggerClose")
//                                 }), self.__jQueryoriginParents = null, jQuery(env.window.document.body).off("." + self.__namespace + "-triggerClose"), self._jQueryorigin.off("." + self.__namespace + "-triggerClose"), self._off("dismissable"), self.__stateSet("closed"), self._trigger({
//                                     type: "after",
//                                     event: event
//                                 }), self.__options.functionAfter && self.__options.functionAfter.call(self, self, {
//                                     event: event,
//                                     origin: self._jQueryorigin[0]
//                                 }), finishCallbacks()
//                             };
//                             env.hasTransitions ? (self._jQuerytooltip.css({
//                                 "-moz-animation-duration": self.__options.animationDuration[1] + "ms",
//                                 "-ms-animation-duration": self.__options.animationDuration[1] + "ms",
//                                 "-o-animation-duration": self.__options.animationDuration[1] + "ms",
//                                 "-webkit-animation-duration": self.__options.animationDuration[1] + "ms",
//                                 "animation-duration": self.__options.animationDuration[1] + "ms",
//                                 "transition-duration": self.__options.animationDuration[1] + "ms"
//                             }), self._jQuerytooltip.clearQueue().removeClass("tooltipster-show").addClass("tooltipster-dying"), self.__options.animationDuration[1] > 0 && self._jQuerytooltip.delay(self.__options.animationDuration[1]), self._jQuerytooltip.queue(finish)) : self._jQuerytooltip.stop().fadeOut(self.__options.animationDuration[1], finish)
//                         }
//                     } else finishCallbacks()
//                 }
//                 return self
//             },
//             _off: function() {
//                 return this.__jQueryemitterPrivate.off.apply(this.__jQueryemitterPrivate, Array.prototype.slice.apply(arguments)), this
//             },
//             _on: function() {
//                 return this.__jQueryemitterPrivate.on.apply(this.__jQueryemitterPrivate, Array.prototype.slice.apply(arguments)), this
//             },
//             _one: function() {
//                 return this.__jQueryemitterPrivate.one.apply(this.__jQueryemitterPrivate, Array.prototype.slice.apply(arguments)), this
//             },
//             _open: function(event, callback) {
//                 var self = this;
//                 if (!self.__destroying && bodyContains(self._jQueryorigin) && self.__enabled) {
//                     var ok = !0;
//                     if ("closed" == self.__state && (self._trigger({
//                             type: "before",
//                             event: event,
//                             stop: function() {
//                                 ok = !1
//                             }
//                         }), ok && self.__options.functionBefore && (ok = self.__options.functionBefore.call(self, self, {
//                             event: event,
//                             origin: self._jQueryorigin[0]
//                         }))), ok !== !1 && null !== self.__Content) {
//                         callback && self.__callbacks.open.push(callback), self.__callbacks.close = [], self.__timeoutsClear();
//                         var extraTime, finish = function() {
//                             "stable" != self.__state && self.__stateSet("stable"), jQuery.each(self.__callbacks.open, function(i, c) {
//                                 c.call(self, self, {
//                                     origin: self._jQueryorigin[0],
//                                     tooltip: self._jQuerytooltip[0]
//                                 })
//                             }), self.__callbacks.open = []
//                         };
//                         if ("closed" !== self.__state) extraTime = 0, "disappearing" === self.__state ? (self.__stateSet("appearing"), env.hasTransitions ? (self._jQuerytooltip.clearQueue().removeClass("tooltipster-dying").addClass("tooltipster-show"), self.__options.animationDuration[0] > 0 && self._jQuerytooltip.delay(self.__options.animationDuration[0]), self._jQuerytooltip.queue(finish)) : self._jQuerytooltip.stop().fadeIn(finish)) : "stable" == self.__state && finish();
//                         else {
//                             if (self.__stateSet("appearing"), extraTime = self.__options.animationDuration[0], self.__contentInsert(), self.reposition(event, !0), env.hasTransitions ? (self._jQuerytooltip.addClass("tooltipster-" + self.__options.animation).addClass("tooltipster-initial").css({
//                                     "-moz-animation-duration": self.__options.animationDuration[0] + "ms",
//                                     "-ms-animation-duration": self.__options.animationDuration[0] + "ms",
//                                     "-o-animation-duration": self.__options.animationDuration[0] + "ms",
//                                     "-webkit-animation-duration": self.__options.animationDuration[0] + "ms",
//                                     "animation-duration": self.__options.animationDuration[0] + "ms",
//                                     "transition-duration": self.__options.animationDuration[0] + "ms"
//                                 }), setTimeout(function() {
//                                     "closed" != self.__state && (self._jQuerytooltip.addClass("tooltipster-show").removeClass("tooltipster-initial"), self.__options.animationDuration[0] > 0 && self._jQuerytooltip.delay(self.__options.animationDuration[0]), self._jQuerytooltip.queue(finish))
//                                 }, 0)) : self._jQuerytooltip.css("display", "none").fadeIn(self.__options.animationDuration[0], finish), self.__trackerStart(), jQuery(env.window).on("resize." + self.__namespace + "-triggerClose", function(e) {
//                                     var jQueryae = jQuery(document.activeElement);
//                                     (jQueryae.is("input") || jQueryae.is("textarea")) && jQuery.contains(self._jQuerytooltip[0], jQueryae[0]) || self.reposition(e)
//                                 }).on("scroll." + self.__namespace + "-triggerClose", function(e) {
//                                     self.__scrollHandler(e)
//                                 }), self.__jQueryoriginParents = self._jQueryorigin.parents(), self.__jQueryoriginParents.each(function(i, parent) {
//                                     jQuery(parent).on("scroll." + self.__namespace + "-triggerClose", function(e) {
//                                         self.__scrollHandler(e)
//                                     })
//                                 }), self.__options.triggerClose.mouseleave || self.__options.triggerClose.touchleave && env.hasTouchCapability) {
//                                 self._on("dismissable", function(event) {
//                                     event.dismissable ? event.delay ? (timeout = setTimeout(function() {
//                                         self._close(event.event)
//                                     }, event.delay), self.__timeouts.close.push(timeout)) : self._close(event) : clearTimeout(timeout)
//                                 });
//                                 var jQueryelements = self._jQueryorigin,
//                                     eventNamesIn = "",
//                                     eventNamesOut = "",
//                                     timeout = null;
//                                 self.__options.interactive && (jQueryelements = jQueryelements.add(self._jQuerytooltip)), self.__options.triggerClose.mouseleave && (eventNamesIn += "mouseenter." + self.__namespace + "-triggerClose ", eventNamesOut += "mouseleave." + self.__namespace + "-triggerClose "), self.__options.triggerClose.touchleave && env.hasTouchCapability && (eventNamesIn += "touchstart." + self.__namespace + "-triggerClose", eventNamesOut += "touchend." + self.__namespace + "-triggerClose touchcancel." + self.__namespace + "-triggerClose"), jQueryelements.on(eventNamesOut, function(event) {
//                                     if (self._touchIsTouchEvent(event) || !self._touchIsEmulatedEvent(event)) {
//                                         var delay = "mouseleave" == event.type ? self.__options.delay : self.__options.delayTouch;
//                                         self._trigger({
//                                             delay: delay[1],
//                                             dismissable: !0,
//                                             event: event,
//                                             type: "dismissable"
//                                         })
//                                     }
//                                 }).on(eventNamesIn, function(event) {
//                                     !self._touchIsTouchEvent(event) && self._touchIsEmulatedEvent(event) || self._trigger({
//                                         dismissable: !1,
//                                         event: event,
//                                         type: "dismissable"
//                                     })
//                                 })
//                             }
//                             self.__options.triggerClose.originClick && self._jQueryorigin.on("click." + self.__namespace + "-triggerClose", function(event) {
//                                 self._touchIsTouchEvent(event) || self._touchIsEmulatedEvent(event) || self._close(event)
//                             }), (self.__options.triggerClose.click || self.__options.triggerClose.tap && env.hasTouchCapability) && setTimeout(function() {
//                                 if ("closed" != self.__state) {
//                                     var eventNames = "",
//                                         jQuerybody = jQuery(env.window.document.body);
//                                     self.__options.triggerClose.click && (eventNames += "click." + self.__namespace + "-triggerClose "), self.__options.triggerClose.tap && env.hasTouchCapability && (eventNames += "touchend." + self.__namespace + "-triggerClose"), jQuerybody.on(eventNames, function(event) {
//                                         self._touchIsMeaningfulEvent(event) && (self._touchRecordEvent(event), self.__options.interactive && jQuery.contains(self._jQuerytooltip[0], event.target) || self._close(event))
//                                     }), self.__options.triggerClose.tap && env.hasTouchCapability && jQuerybody.on("touchstart." + self.__namespace + "-triggerClose", function(event) {
//                                         self._touchRecordEvent(event)
//                                     })
//                                 }
//                             }, 0), self._trigger("ready"), self.__options.functionReady && self.__options.functionReady.call(self, self, {
//                                 origin: self._jQueryorigin[0],
//                                 tooltip: self._jQuerytooltip[0]
//                             })
//                         }
//                         if (self.__options.timer > 0) {
//                             var timeout = setTimeout(function() {
//                                 self._close()
//                             }, self.__options.timer + extraTime);
//                             self.__timeouts.close.push(timeout)
//                         }
//                     }
//                 }
//                 return self
//             },
//             _openShortly: function(event) {
//                 var self = this,
//                     ok = !0;
//                 if ("stable" != self.__state && "appearing" != self.__state && !self.__timeouts.open && (self._trigger({
//                         type: "start",
//                         event: event,
//                         stop: function() {
//                             ok = !1
//                         }
//                     }), ok)) {
//                     var delay = 0 == event.type.indexOf("touch") ? self.__options.delayTouch : self.__options.delay;
//                     delay[0] ? self.__timeouts.open = setTimeout(function() {
//                         self.__timeouts.open = null, self.__pointerIsOverOrigin && self._touchIsMeaningfulEvent(event) ? (self._trigger("startend"), self._open(event)) : self._trigger("startcancel")
//                     }, delay[0]) : (self._trigger("startend"), self._open(event))
//                 }
//                 return self
//             },
//             _optionsExtract: function(pluginName, defaultOptions) {
//                 var self = this,
//                     options = jQuery.extend(!0, {}, defaultOptions),
//                     pluginOptions = self.__options[pluginName];
//                 return pluginOptions || (pluginOptions = {}, jQuery.each(defaultOptions, function(optionName, value) {
//                     var o = self.__options[optionName];
//                     void 0 !== o && (pluginOptions[optionName] = o)
//                 })), jQuery.each(options, function(optionName, value) {
//                     void 0 !== pluginOptions[optionName] && ("object" != typeof value || value instanceof Array || null == value || "object" != typeof pluginOptions[optionName] || pluginOptions[optionName] instanceof Array || null == pluginOptions[optionName] ? options[optionName] = pluginOptions[optionName] : jQuery.extend(options[optionName], pluginOptions[optionName]))
//                 }), options
//             },
//             _plug: function(pluginName) {
//                 var plugin = jQuery.tooltipster._plugin(pluginName);
//                 if (!plugin) throw new Error('The "' + pluginName + '" plugin is not defined');
//                 return plugin.instance && jQuery.tooltipster.__bridge(plugin.instance, this, plugin.name), this
//             },
//             _touchIsEmulatedEvent: function(event) {
//                 for (var isEmulated = !1, now = (new Date).getTime(), i = this.__touchEvents.length - 1; i >= 0; i--) {
//                     var e = this.__touchEvents[i];
//                     if (!(now - e.time < 500)) break;
//                     e.target === event.target && (isEmulated = !0)
//                 }
//                 return isEmulated
//             },
//             _touchIsMeaningfulEvent: function(event) {
//                 return this._touchIsTouchEvent(event) && !this._touchSwiped(event.target) || !this._touchIsTouchEvent(event) && !this._touchIsEmulatedEvent(event)
//             },
//             _touchIsTouchEvent: function(event) {
//                 return 0 == event.type.indexOf("touch")
//             },
//             _touchRecordEvent: function(event) {
//                 return this._touchIsTouchEvent(event) && (event.time = (new Date).getTime(), this.__touchEvents.push(event)), this
//             },
//             _touchSwiped: function(target) {
//                 for (var swiped = !1, i = this.__touchEvents.length - 1; i >= 0; i--) {
//                     var e = this.__touchEvents[i];
//                     if ("touchmove" == e.type) {
//                         swiped = !0;
//                         break
//                     }
//                     if ("touchstart" == e.type && target === e.target) break
//                 }
//                 return swiped
//             },
//             _trigger: function() {
//                 var args = Array.prototype.slice.apply(arguments);
//                 return "string" == typeof args[0] && (args[0] = {
//                     type: args[0]
//                 }), args[0].instance = this, args[0].origin = this._jQueryorigin ? this._jQueryorigin[0] : null, args[0].tooltip = this._jQuerytooltip ? this._jQuerytooltip[0] : null, this.__jQueryemitterPrivate.trigger.apply(this.__jQueryemitterPrivate, args), jQuery.tooltipster._trigger.apply(jQuery.tooltipster, args), this.__jQueryemitterPublic.trigger.apply(this.__jQueryemitterPublic, args), this
//             },
//             _unplug: function(pluginName) {
//                 var self = this;
//                 if (self[pluginName]) {
//                     var plugin = jQuery.tooltipster._plugin(pluginName);
//                     plugin.instance && jQuery.each(plugin.instance, function(methodName, fn) {
//                         self[methodName] && self[methodName].bridged === self[pluginName] && delete self[methodName]
//                     }), self[pluginName].__destroy && self[pluginName].__destroy(), delete self[pluginName]
//                 }
//                 return self
//             },
//             close: function(callback) {
//                 return this.__destroyed ? this.__destroyError() : this._close(null, callback), this
//             },
//             content: function(content) {
//                 var self = this;
//                 if (void 0 === content) return self.__Content;
//                 if (self.__destroyed) self.__destroyError();
//                 else if (self.__contentSet(content), null !== self.__Content) {
//                     if ("closed" !== self.__state && (self.__contentInsert(), self.reposition(), self.__options.updateAnimation))
//                         if (env.hasTransitions) {
//                             var animation = self.__options.updateAnimation;
//                             self._jQuerytooltip.addClass("tooltipster-update-" + animation), setTimeout(function() {
//                                 "closed" != self.__state && self._jQuerytooltip.removeClass("tooltipster-update-" + animation)
//                             }, 1e3)
//                         } else self._jQuerytooltip.fadeTo(200, .5, function() {
//                             "closed" != self.__state && self._jQuerytooltip.fadeTo(200, 1)
//                         })
//                 } else self._close();
//                 return self
//             },
//             destroy: function() {
//                 var self = this;
//                 if (self.__destroyed) self.__destroyError();
//                 else {
//                     "closed" != self.__state ? self.option("animationDuration", 0)._close(null, null, !0) : self.__timeoutsClear(), self._trigger("destroy"), self.__destroyed = !0, self._jQueryorigin.removeData(self.__namespace).off("." + self.__namespace + "-triggerOpen"), jQuery(env.window.document.body).off("." + self.__namespace + "-triggerOpen");
//                     var ns = self._jQueryorigin.data("tooltipster-ns");
//                     if (ns)
//                         if (1 === ns.length) {
//                             var title = null;
//                             "previous" == self.__options.restoration ? title = self._jQueryorigin.data("tooltipster-initialTitle") : "current" == self.__options.restoration && (title = "string" == typeof self.__Content ? self.__Content : jQuery("<div></div>").append(self.__Content).html()), title && self._jQueryorigin.attr("title", title), self._jQueryorigin.removeClass("tooltipstered"), self._jQueryorigin.removeData("tooltipster-ns").removeData("tooltipster-initialTitle")
//                         } else ns = jQuery.grep(ns, function(el, i) {
//                             return el !== self.__namespace
//                         }), self._jQueryorigin.data("tooltipster-ns", ns);
//                     self._trigger("destroyed"), self._off(), self.off(), self.__Content = null, self.__jQueryemitterPrivate = null, self.__jQueryemitterPublic = null,
//                         self.__options.parent = null, self._jQueryorigin = null, self._jQuerytooltip = null, jQuery.tooltipster.__instancesLatestArr = jQuery.grep(jQuery.tooltipster.__instancesLatestArr, function(el, i) {
//                             return self !== el
//                         }), clearInterval(self.__garbageCollector)
//                 }
//                 return self
//             },
//             disable: function() {
//                 return this.__destroyed ? (this.__destroyError(), this) : (this._close(), this.__enabled = !1, this)
//             },
//             elementOrigin: function() {
//                 return this.__destroyed ? void this.__destroyError() : this._jQueryorigin[0]
//             },
//             elementTooltip: function() {
//                 return this._jQuerytooltip ? this._jQuerytooltip[0] : null
//             },
//             enable: function() {
//                 return this.__enabled = !0, this
//             },
//             hide: function(callback) {
//                 return this.close(callback)
//             },
//             instance: function() {
//                 return this
//             },
//             off: function() {
//                 return this.__destroyed || this.__jQueryemitterPublic.off.apply(this.__jQueryemitterPublic, Array.prototype.slice.apply(arguments)), this
//             },
//             on: function() {
//                 return this.__destroyed ? this.__destroyError() : this.__jQueryemitterPublic.on.apply(this.__jQueryemitterPublic, Array.prototype.slice.apply(arguments)), this
//             },
//             one: function() {
//                 return this.__destroyed ? this.__destroyError() : this.__jQueryemitterPublic.one.apply(this.__jQueryemitterPublic, Array.prototype.slice.apply(arguments)), this
//             },
//             open: function(callback) {
//                 return this.__destroyed ? this.__destroyError() : this._open(null, callback), this
//             },
//             option: function(o, val) {
//                 return void 0 === val ? this.__options[o] : (this.__destroyed ? this.__destroyError() : (this.__options[o] = val, this.__optionsFormat(), jQuery.inArray(o, ["trigger", "triggerClose", "triggerOpen"]) >= 0 && this.__prepareOrigin(), "selfDestruction" === o && this.__prepareGC()), this)
//             },
//             reposition: function(event, tooltipIsDetached) {
//                 var self = this;
//                 return self.__destroyed ? self.__destroyError() : "closed" != self.__state && bodyContains(self._jQueryorigin) && (tooltipIsDetached || bodyContains(self._jQuerytooltip)) && (tooltipIsDetached || self._jQuerytooltip.detach(), self.__Geometry = self.__geometry(), self._trigger({
//                     type: "reposition",
//                     event: event,
//                     helper: {
//                         geo: self.__Geometry
//                     }
//                 })), self
//             },
//             show: function(callback) {
//                 return this.open(callback)
//             },
//             status: function() {
//                 return {
//                     destroyed: this.__destroyed,
//                     enabled: this.__enabled,
//                     open: "closed" !== this.__state,
//                     state: this.__state
//                 }
//             },
//             triggerHandler: function() {
//                 return this.__destroyed ? this.__destroyError() : this.__jQueryemitterPublic.triggerHandler.apply(this.__jQueryemitterPublic, Array.prototype.slice.apply(arguments)), this
//             }
//         }, jQuery.fn.tooltipster = function() {
//             var args = Array.prototype.slice.apply(arguments);
//             if (0 === this.length) return this;
//             if ("string" == typeof args[0]) {
//                 var v = "#*jQuery~&";
//                 return this.each(function() {
//                     var ns = jQuery(this).data("tooltipster-ns"),
//                         self = ns ? jQuery(this).data(ns[0]) : null;
//                     if (!self) throw new Error("You called Tooltipster's \"" + args[0] + '" method on an uninitialized element');
//                     if ("function" != typeof self[args[0]]) throw new Error('Unknown method "' + args[0] + '"');
//                     this.length > 1 && "content" == args[0] && (args[1] instanceof jQuery || "object" == typeof args[1] && null != args[1] && args[1].tagName) && !self.__options.contentCloning && self.__options.debug;
//                     var resp = self[args[0]](args[1], args[2]);
//                     if (resp !== self || "instance" === args[0]) return v = resp, !1
//                 }), "#*jQuery~&" !== v ? v : this
//             }
//             jQuery.tooltipster.__instancesLatestArr = [];
//             var multipleIsSet = args[0] && void 0 !== args[0].multiple,
//                 multiple = multipleIsSet && args[0].multiple || !multipleIsSet && defaults.multiple,
//                 contentIsSet = args[0] && void 0 !== args[0].content,
//                 content = contentIsSet && args[0].content || !contentIsSet && defaults.content,
//                 contentCloningIsSet = args[0] && void 0 !== args[0].contentCloning,
//                 contentCloning = contentCloningIsSet && args[0].contentCloning || !contentCloningIsSet && defaults.contentCloning,
//                 debugIsSet = args[0] && void 0 !== args[0].debug,
//                 debug = debugIsSet && args[0].debug || !debugIsSet && defaults.debug;
//             return this.length > 1 && (content instanceof jQuery || "object" == typeof content && null != content && content.tagName) && !contentCloning && debug, this.each(function() {
//                 var go = !1,
//                     jQuerythis = jQuery(this),
//                     ns = jQuerythis.data("tooltipster-ns"),
//                     obj = null;
//                 ns ? multiple && (go = !0) : go = !0, go && (obj = new jQuery.Tooltipster(this, args[0]), ns || (ns = []), ns.push(obj.__namespace), jQuerythis.data("tooltipster-ns", ns), jQuerythis.data(obj.__namespace, obj), obj.__options.functionInit && obj.__options.functionInit.call(obj, obj, {
//                     origin: this
//                 }), obj._trigger("init")), jQuery.tooltipster.__instancesLatestArr.push(obj)
//             }), this
//         }, Ruler.prototype = {
//             __init: function(jQuerytooltip) {
//                 this.__jQuerytooltip = jQuerytooltip, this.__jQuerytooltip.css({
//                     left: 0,
//                     overflow: "hidden",
//                     position: "absolute",
//                     top: 0
//                 }).find(".tooltipster-content").css("overflow", "auto"), this.jQuerycontainer = jQuery('<div class="tooltipster-ruler"></div>').append(this.__jQuerytooltip).appendTo(env.window.document.body)
//             },
//             __forceRedraw: function() {
//                 var jQueryp = this.__jQuerytooltip.parent();
//                 this.__jQuerytooltip.detach(), this.__jQuerytooltip.appendTo(jQueryp)
//             },
//             constrain: function(width, height) {
//                 return this.constraints = {
//                     width: width,
//                     height: height
//                 }, this.__jQuerytooltip.css({
//                     display: "block",
//                     height: "",
//                     overflow: "auto",
//                     width: width
//                 }), this
//             },
//             destroy: function() {
//                 this.__jQuerytooltip.detach().find(".tooltipster-content").css({
//                     display: "",
//                     overflow: ""
//                 }), this.jQuerycontainer.remove()
//             },
//             free: function() {
//                 return this.constraints = null, this.__jQuerytooltip.css({
//                     display: "",
//                     height: "",
//                     overflow: "visible",
//                     width: ""
//                 }), this
//             },
//             measure: function() {
//                 this.__forceRedraw();
//                 var tooltipBcr = this.__jQuerytooltip[0].getBoundingClientRect(),
//                     result = {
//                         size: {
//                             height: tooltipBcr.height || tooltipBcr.bottom - tooltipBcr.top,
//                             width: tooltipBcr.width || tooltipBcr.right - tooltipBcr.left
//                         }
//                     };
//                 if (this.constraints) {
//                     var jQuerycontent = this.__jQuerytooltip.find(".tooltipster-content"),
//                         height = this.__jQuerytooltip.outerHeight(),
//                         contentBcr = jQuerycontent[0].getBoundingClientRect(),
//                         fits = {
//                             height: height <= this.constraints.height,
//                             width: tooltipBcr.width <= this.constraints.width && contentBcr.width >= jQuerycontent[0].scrollWidth - 1
//                         };
//                     result.fits = fits.height && fits.width
//                 }
//                 return env.IE && env.IE <= 11 && result.size.width !== env.window.document.documentElement.clientWidth && (result.size.width = Math.ceil(result.size.width) + 1), result
//             }
//         };
//         var uA = navigator.userAgent.toLowerCase();
//         uA.indexOf("msie") != -1 ? env.IE = parseInt(uA.split("msie")[1]) : uA.toLowerCase().indexOf("trident") !== -1 && uA.indexOf(" rv:11") !== -1 ? env.IE = 11 : uA.toLowerCase().indexOf("edge/") != -1 && (env.IE = parseInt(uA.toLowerCase().split("edge/")[1]));
//         var pluginName = "tooltipster.sideTip";
//         return jQuery.tooltipster._plugin({
//             name: pluginName,
//             instance: {
//                 __defaults: function() {
//                     return {
//                         arrow: !0,
//                         distance: 6,
//                         functionPosition: null,
//                         maxWidth: null,
//                         minIntersection: 16,
//                         minWidth: 0,
//                         position: null,
//                         side: "top",
//                         viewportAware: !0
//                     }
//                 },
//                 __init: function(instance) {
//                     var self = this;
//                     self.__instance = instance, self.__namespace = "tooltipster-sideTip-" + Math.round(1e6 * Math.random()), self.__previousState = "closed", self.__options, self.__optionsFormat(), self.__instance._on("state." + self.__namespace, function(event) {
//                         "closed" == event.state ? self.__close() : "appearing" == event.state && "closed" == self.__previousState && self.__create(), self.__previousState = event.state
//                     }), self.__instance._on("options." + self.__namespace, function() {
//                         self.__optionsFormat()
//                     }), self.__instance._on("reposition." + self.__namespace, function(e) {
//                         self.__reposition(e.event, e.helper)
//                     })
//                 },
//                 __close: function() {
//                     this.__instance.content() instanceof jQuery && this.__instance.content().detach(), this.__instance._jQuerytooltip.remove(), this.__instance._jQuerytooltip = null
//                 },
//                 __create: function() {
//                     var jQueryhtml = jQuery('<div class="tooltipster-base tooltipster-sidetip"><div class="tooltipster-box"><div class="tooltipster-content"></div></div><div class="tooltipster-arrow"><div class="tooltipster-arrow-uncropped"><div class="tooltipster-arrow-border"></div><div class="tooltipster-arrow-background"></div></div></div></div>');
//                     this.__options.arrow || jQueryhtml.find(".tooltipster-box").css("margin", 0).end().find(".tooltipster-arrow").hide(), this.__options.minWidth && jQueryhtml.css("min-width", this.__options.minWidth + "px"), this.__options.maxWidth && jQueryhtml.css("max-width", this.__options.maxWidth + "px"), this.__instance._jQuerytooltip = jQueryhtml, this.__instance._trigger("created")
//                 },
//                 __destroy: function() {
//                     this.__instance._off("." + self.__namespace)
//                 },
//                 __optionsFormat: function() {
//                     var self = this;
//                     if (self.__options = self.__instance._optionsExtract(pluginName, self.__defaults()), self.__options.position && (self.__options.side = self.__options.position), "object" != typeof self.__options.distance && (self.__options.distance = [self.__options.distance]), self.__options.distance.length < 4 && (void 0 === self.__options.distance[1] && (self.__options.distance[1] = self.__options.distance[0]), void 0 === self.__options.distance[2] && (self.__options.distance[2] = self.__options.distance[0]), void 0 === self.__options.distance[3] && (self.__options.distance[3] = self.__options.distance[1]), self.__options.distance = {
//                             top: self.__options.distance[0],
//                             right: self.__options.distance[1],
//                             bottom: self.__options.distance[2],
//                             left: self.__options.distance[3]
//                         }), "string" == typeof self.__options.side) {
//                         var opposites = {
//                             top: "bottom",
//                             right: "left",
//                             bottom: "top",
//                             left: "right"
//                         };
//                         self.__options.side = [self.__options.side, opposites[self.__options.side]], "left" == self.__options.side[0] || "right" == self.__options.side[0] ? self.__options.side.push("top", "bottom") : self.__options.side.push("right", "left")
//                     }
//                     6 === jQuery.tooltipster._env.IE && self.__options.arrow !== !0 && (self.__options.arrow = !1)
//                 },
//                 __reposition: function(event, helper) {
//                     var finalResult, self = this,
//                         targets = self.__targetFind(helper),
//                         testResults = [];
//                     self.__instance._jQuerytooltip.detach();
//                     var jQueryclone = self.__instance._jQuerytooltip.clone(),
//                         ruler = jQuery.tooltipster._getRuler(jQueryclone),
//                         satisfied = !1,
//                         animation = self.__instance.option("animation");
//                     switch (animation && jQueryclone.removeClass("tooltipster-" + animation), jQuery.each(["window", "document"], function(i, container) {
//                         var takeTest = null;
//                         if (self.__instance._trigger({
//                                 container: container,
//                                 helper: helper,
//                                 satisfied: satisfied,
//                                 takeTest: function(bool) {
//                                     takeTest = bool
//                                 },
//                                 results: testResults,
//                                 type: "positionTest"
//                             }), 1 == takeTest || 0 != takeTest && 0 == satisfied && ("window" != container || self.__options.viewportAware))
//                             for (var i = 0; i < self.__options.side.length; i++) {
//                                 var distance = {
//                                         horizontal: 0,
//                                         vertical: 0
//                                     },
//                                     side = self.__options.side[i];
//                                 "top" == side || "bottom" == side ? distance.vertical = self.__options.distance[side] : distance.horizontal = self.__options.distance[side], self.__sideChange(jQueryclone, side), jQuery.each(["natural", "constrained"], function(i, mode) {
//                                     if (takeTest = null, self.__instance._trigger({
//                                             container: container,
//                                             event: event,
//                                             helper: helper,
//                                             mode: mode,
//                                             results: testResults,
//                                             satisfied: satisfied,
//                                             side: side,
//                                             takeTest: function(bool) {
//                                                 takeTest = bool
//                                             },
//                                             type: "positionTest"
//                                         }), 1 == takeTest || 0 != takeTest && 0 == satisfied) {
//                                         var testResult = {
//                                                 container: container,
//                                                 distance: distance,
//                                                 fits: null,
//                                                 mode: mode,
//                                                 outerSize: null,
//                                                 side: side,
//                                                 size: null,
//                                                 target: targets[side],
//                                                 whole: null
//                                             },
//                                             rulerConfigured = "natural" == mode ? ruler.free() : ruler.constrain(helper.geo.available[container][side].width - distance.horizontal, helper.geo.available[container][side].height - distance.vertical),
//                                             rulerResults = rulerConfigured.measure();
//                                         if (testResult.size = rulerResults.size, testResult.outerSize = {
//                                                 height: rulerResults.size.height + distance.vertical,
//                                                 width: rulerResults.size.width + distance.horizontal
//                                             }, "natural" == mode ? helper.geo.available[container][side].width >= testResult.outerSize.width && helper.geo.available[container][side].height >= testResult.outerSize.height ? testResult.fits = !0 : testResult.fits = !1 : testResult.fits = rulerResults.fits, "window" == container && (testResult.fits ? "top" == side || "bottom" == side ? testResult.whole = helper.geo.origin.windowOffset.right >= self.__options.minIntersection && helper.geo.window.size.width - helper.geo.origin.windowOffset.left >= self.__options.minIntersection : testResult.whole = helper.geo.origin.windowOffset.bottom >= self.__options.minIntersection && helper.geo.window.size.height - helper.geo.origin.windowOffset.top >= self.__options.minIntersection : testResult.whole = !1), testResults.push(testResult), testResult.whole) satisfied = !0;
//                                         else if ("natural" == testResult.mode && (testResult.fits || testResult.size.width <= helper.geo.available[container][side].width)) return !1
//                                     }
//                                 })
//                             }
//                     }), self.__instance._trigger({
//                         edit: function(r) {
//                             testResults = r
//                         },
//                         event: event,
//                         helper: helper,
//                         results: testResults,
//                         type: "positionTested"
//                     }), testResults.sort(function(a, b) {
//                         if (a.whole && !b.whole) return -1;
//                         if (!a.whole && b.whole) return 1;
//                         if (a.whole && b.whole) {
//                             var ai = self.__options.side.indexOf(a.side),
//                                 bi = self.__options.side.indexOf(b.side);
//                             return ai < bi ? -1 : ai > bi ? 1 : "natural" == a.mode ? -1 : 1
//                         }
//                         if (a.fits && !b.fits) return -1;
//                         if (!a.fits && b.fits) return 1;
//                         if (a.fits && b.fits) {
//                             var ai = self.__options.side.indexOf(a.side),
//                                 bi = self.__options.side.indexOf(b.side);
//                             return ai < bi ? -1 : ai > bi ? 1 : "natural" == a.mode ? -1 : 1
//                         }
//                         return "document" == a.container && "bottom" == a.side && "natural" == a.mode ? -1 : 1
//                     }), finalResult = testResults[0], finalResult.coord = {}, finalResult.side) {
//                         case "left":
//                         case "right":
//                             finalResult.coord.top = Math.floor(finalResult.target - finalResult.size.height / 2);
//                             break;
//                         case "bottom":
//                         case "top":
//                             finalResult.coord.left = Math.floor(finalResult.target - finalResult.size.width / 2)
//                     }
//                     switch (finalResult.side) {
//                         case "left":
//                             finalResult.coord.left = helper.geo.origin.windowOffset.left - finalResult.outerSize.width;
//                             break;
//                         case "right":
//                             finalResult.coord.left = helper.geo.origin.windowOffset.right + finalResult.distance.horizontal;
//                             break;
//                         case "top":
//                             finalResult.coord.top = helper.geo.origin.windowOffset.top - finalResult.outerSize.height;
//                             break;
//                         case "bottom":
//                             finalResult.coord.top = helper.geo.origin.windowOffset.bottom + finalResult.distance.vertical
//                     }
//                     "window" == finalResult.container ? "top" == finalResult.side || "bottom" == finalResult.side ? finalResult.coord.left < 0 ? helper.geo.origin.windowOffset.right - this.__options.minIntersection >= 0 ? finalResult.coord.left = 0 : finalResult.coord.left = helper.geo.origin.windowOffset.right - this.__options.minIntersection - 1 : finalResult.coord.left > helper.geo.window.size.width - finalResult.size.width && (helper.geo.origin.windowOffset.left + this.__options.minIntersection <= helper.geo.window.size.width ? finalResult.coord.left = helper.geo.window.size.width - finalResult.size.width : finalResult.coord.left = helper.geo.origin.windowOffset.left + this.__options.minIntersection + 1 - finalResult.size.width) : finalResult.coord.top < 0 ? helper.geo.origin.windowOffset.bottom - this.__options.minIntersection >= 0 ? finalResult.coord.top = 0 : finalResult.coord.top = helper.geo.origin.windowOffset.bottom - this.__options.minIntersection - 1 : finalResult.coord.top > helper.geo.window.size.height - finalResult.size.height && (helper.geo.origin.windowOffset.top + this.__options.minIntersection <= helper.geo.window.size.height ? finalResult.coord.top = helper.geo.window.size.height - finalResult.size.height : finalResult.coord.top = helper.geo.origin.windowOffset.top + this.__options.minIntersection + 1 - finalResult.size.height) : (finalResult.coord.left > helper.geo.window.size.width - finalResult.size.width && (finalResult.coord.left = helper.geo.window.size.width - finalResult.size.width), finalResult.coord.left < 0 && (finalResult.coord.left = 0)), self.__sideChange(jQueryclone, finalResult.side), helper.tooltipClone = jQueryclone[0], helper.tooltipParent = self.__instance.option("parent").parent[0], helper.mode = finalResult.mode, helper.whole = finalResult.whole, helper.origin = self.__instance._jQueryorigin[0], helper.tooltip = self.__instance._jQuerytooltip[0], delete finalResult.container, delete finalResult.fits, delete finalResult.mode, delete finalResult.outerSize, delete finalResult.whole, finalResult.distance = finalResult.distance.horizontal || finalResult.distance.vertical;
//                     var finalResultClone = jQuery.extend(!0, {}, finalResult);
//                     if (self.__instance._trigger({
//                             edit: function(result) {
//                                 finalResult = result
//                             },
//                             event: event,
//                             helper: helper,
//                             position: finalResultClone,
//                             type: "position"
//                         }), self.__options.functionPosition) {
//                         var result = self.__options.functionPosition.call(self, self.__instance, helper, finalResultClone);
//                         result && (finalResult = result)
//                     }
//                     ruler.destroy();
//                     var arrowCoord, maxVal;
//                     "top" == finalResult.side || "bottom" == finalResult.side ? (arrowCoord = {
//                         prop: "left",
//                         val: finalResult.target - finalResult.coord.left
//                     }, maxVal = finalResult.size.width - this.__options.minIntersection) : (arrowCoord = {
//                         prop: "top",
//                         val: finalResult.target - finalResult.coord.top
//                     }, maxVal = finalResult.size.height - this.__options.minIntersection), arrowCoord.val < this.__options.minIntersection ? arrowCoord.val = this.__options.minIntersection : arrowCoord.val > maxVal && (arrowCoord.val = maxVal);
//                     var originParentOffset;
//                     originParentOffset = helper.geo.origin.fixedLineage ? helper.geo.origin.windowOffset : {
//                         left: helper.geo.origin.windowOffset.left + helper.geo.window.scroll.left,
//                         top: helper.geo.origin.windowOffset.top + helper.geo.window.scroll.top
//                     }, finalResult.coord = {
//                         left: originParentOffset.left + (finalResult.coord.left - helper.geo.origin.windowOffset.left),
//                         top: originParentOffset.top + (finalResult.coord.top - helper.geo.origin.windowOffset.top)
//                     }, self.__sideChange(self.__instance._jQuerytooltip, finalResult.side), helper.geo.origin.fixedLineage ? self.__instance._jQuerytooltip.css("position", "fixed") : self.__instance._jQuerytooltip.css("position", ""), self.__instance._jQuerytooltip.css({
//                         left: finalResult.coord.left,
//                         top: finalResult.coord.top,
//                         height: finalResult.size.height,
//                         width: finalResult.size.width
//                     }).find(".tooltipster-arrow").css({
//                         left: "",
//                         top: ""
//                     }).css(arrowCoord.prop, arrowCoord.val), self.__instance._jQuerytooltip.appendTo(self.__instance.option("parent")), self.__instance._trigger({
//                         type: "repositioned",
//                         event: event,
//                         position: finalResult
//                     })
//                 },
//                 __sideChange: function(jQueryobj, side) {
//                     jQueryobj.removeClass("tooltipster-bottom").removeClass("tooltipster-left").removeClass("tooltipster-right").removeClass("tooltipster-top").addClass("tooltipster-" + side)
//                 },
//                 __targetFind: function(helper) {
//                     var target = {},
//                         rects = this.__instance._jQueryorigin[0].getClientRects();
//                     if (rects.length > 1) {
//                         var opacity = this.__instance._jQueryorigin.css("opacity");
//                         1 == opacity && (this.__instance._jQueryorigin.css("opacity", .99), rects = this.__instance._jQueryorigin[0].getClientRects(), this.__instance._jQueryorigin.css("opacity", 1))
//                     }
//                     if (rects.length < 2) target.top = Math.floor(helper.geo.origin.windowOffset.left + helper.geo.origin.size.width / 2), target.bottom = target.top, target.left = Math.floor(helper.geo.origin.windowOffset.top + helper.geo.origin.size.height / 2), target.right = target.left;
//                     else {
//                         var targetRect = rects[0];
//                         target.top = Math.floor(targetRect.left + (targetRect.right - targetRect.left) / 2), targetRect = rects.length > 2 ? rects[Math.ceil(rects.length / 2) - 1] : rects[0], target.right = Math.floor(targetRect.top + (targetRect.bottom - targetRect.top) / 2), targetRect = rects[rects.length - 1], target.bottom = Math.floor(targetRect.left + (targetRect.right - targetRect.left) / 2), targetRect = rects.length > 2 ? rects[Math.ceil((rects.length + 1) / 2) - 1] : rects[rects.length - 1], target.left = Math.floor(targetRect.top + (targetRect.bottom - targetRect.top) / 2)
//                     }
//                     return target
//                 }
//             }
//         }), jQuery
//     }),
//     function(root, factory) {
//         "function" == typeof define && define.amd ? define(["tooltipster"], function(a0) {
//             return factory(a0)
//         }) : "object" == typeof exports ? module.exports = factory(require("tooltipster")) : factory(jQuery)
//     }(this, function(jQuery) {
//         var pluginName = "laa.follower";
//         return jQuery.tooltipster._plugin({
//             name: pluginName,
//             instance: {
//                 __defaults: function() {
//                     return {
//                         anchor: "top-left",
//                         maxWidth: null,
//                         minWidth: 0,
//                         offset: [15, -15]
//                     }
//                 },
//                 __init: function(instance) {
//                     var self = this;
//                     return self.__displayed, self.__helper, self.__initialROS = instance.option("repositionOnScroll"), self.__instance = instance, self.__latestMouseEvent, self.__namespace = "tooltipster-follower-" + Math.round(1e6 * Math.random()), self.__openingTouchEnded, self.__pointerPosition, self.__previousState = "closed", self.__size, self.__options, self.__initialROS || self.__instance.option("repositionOnScroll", !0), self.__optionsFormat(), self.__instance._on("destroy." + self.__namespace, function() {
//                         self.__destroy()
//                     }), self.__instance._on("options." + self.__namespace, function() {
//                         self.__optionsFormat()
//                     }), self.__instance._on("reposition." + self.__namespace, function(event) {
//                         self.__reposition(event.event, event.helper)
//                     }), self.__instance._on("start." + self.__namespace, function(event) {
//                         self.__instance._jQueryorigin.on("mousemove." + self.__namespace, function(e) {
//                             self.__latestMouseEvent = e
//                         })
//                     }), self.__instance._one("startend." + self.__namespace + " startcancel." + self.__namespace, function(event) {
//                         self.__instance._jQueryorigin.off("mousemove." + self.__namespace), "startcancel" == event.type && (self.__latestMouseEvent = null)
//                     }), self.__instance._on("state." + self.__namespace, function(event) {
//                         "closed" == event.state ? self.__close() : "appearing" == event.state && "closed" == self.__previousState && self.__create(), self.__previousState = event.state
//                     }), self
//                 },
//                 __close: function() {
//                     return "object" == typeof this.__instance.content() && null !== this.__instance.content() && this.__instance.content().detach(), this.__instance._jQuerytooltip.remove(), this.__instance._jQuerytooltip = null, jQuery(jQuery.tooltipster._env.window.document).off("." + this.__namespace), this.__latestMouseEvent = null, this
//                 },
//                 __create: function() {
//                     var self = this,
//                         jQueryhtml = jQuery('<div class="tooltipster-base tooltipster-follower"><div class="tooltipster-box"><div class="tooltipster-content"></div></div></div>'),
//                         jQuerydocument = jQuery(jQuery.tooltipster._env.window.document);
//                     self.__options.minWidth && jQueryhtml.css("min-width", self.__options.minWidth + "px"), self.__options.maxWidth && jQueryhtml.css("max-width", self.__options.maxWidth + "px"), self.__instance._jQuerytooltip = jQueryhtml, self.__displayed = !1, self.__openingTouchEnded = !1, jQuerydocument.on("mousemove." + self.__namespace, function(event) {
//                         self.__openingTouchEnded && self.__displayed || self.__follow(event)
//                     });
//                     var triggerClose = self.__instance.option("triggerClose");
//                     return triggerClose.tap && jQuerydocument.on("touchend." + self.__namespace + " touchcancel." + self.__namespace, function(event) {
//                         self.__openingTouchEnded = !0
//                     }), self.__instance._trigger("created"), self
//                 },
//                 __destroy: function() {
//                     return this.__instance._off("." + this.__namespace), this.__initialROS || this.__instance.option("repositionOnScroll", !1), this
//                 },
//                 __follow: function(event) {
//                     if (event ? this.__latestMouseEvent = event : this.__latestMouseEvent && (event = this.__latestMouseEvent), event) {
//                         this.__displayed = !0;
//                         var coord = {},
//                             anchor = this.__options.anchor,
//                             offset = jQuery.merge([], this.__options.offset);
//                         switch (this.__helper.geo.window.scroll = {
//                             left: jQuery.tooltipster._env.window.scrollX || jQuery.tooltipster._env.window.document.documentElement.scrollLeft,
//                             top: jQuery.tooltipster._env.window.scrollY || jQuery.tooltipster._env.window.document.documentElement.scrollTop
//                         }, anchor) {
//                             case "top-left":
//                             case "left-center":
//                             case "bottom-left":
//                                 coord.left = event.pageX + offset[0];
//                                 break;
//                             case "top-center":
//                             case "bottom-center":
//                                 coord.left = event.pageX + offset[0] - this.__size.width / 2;
//                                 break;
//                             case "top-right":
//                             case "right-center":
//                             case "bottom-right":
//                                 coord.left = event.pageX + offset[0] - this.__size.width
//                         }
//                         switch (anchor) {
//                             case "top-left":
//                             case "top-center":
//                             case "top-right":
//                                 coord.top = event.pageY - offset[1];
//                                 break;
//                             case "left-center":
//                             case "right-center":
//                                 coord.top = event.pageY - offset[1] - this.__size.height / 2;
//                                 break;
//                             case "bottom-left":
//                             case "bottom-center":
//                             case "bottom-right":
//                                 coord.top = event.pageY - offset[1] - this.__size.height
//                         }
//                         if ("left-center" == anchor || "right-center" == anchor) {
//                             if ("right-center" == anchor) coord.left < this.__helper.geo.window.scroll.left && (event.pageX - offset[0] + this.__size.width <= this.__helper.geo.window.scroll.left + this.__helper.geo.window.size.width ? (anchor = "left-center", offset[0] = -offset[0], coord.left = event.pageX + offset[0]) : (anchor = "top-right", offset[1] = offset[0], coord = {
//                                 left: 0,
//                                 top: event.pageY - offset[1]
//                             }));
//                             else if (coord.left + this.__size.width > this.__helper.geo.window.scroll.left + this.__helper.geo.window.size.width) {
//                                 var coordLeft = event.pageX - offset[0] - this.__size.width;
//                                 coordLeft >= 0 ? (anchor = "right-center", offset[0] = -offset[0], coord.left = coordLeft) : (anchor = "top-left", offset[1] = -offset[0], coord = {
//                                     left: event.pageX + offset[0],
//                                     top: event.pageY - offset[1]
//                                 })
//                             }
//                             coord.top + this.__size.height > this.__helper.geo.window.scroll.top + this.__helper.geo.window.size.height && (coord.top = this.__helper.geo.window.scroll.top + this.__helper.geo.window.size.height - this.__size.height), coord.top < this.__helper.geo.window.scroll.top && (coord.top = this.__helper.geo.window.scroll.top), coord.top + this.__size.height > this.__helper.geo.document.size.height && (coord.top = this.__helper.geo.document.size.height - this.__size.height), coord.top < 0 && (coord.top = 0)
//                         }
//                         if ("left-center" != anchor && "right-center" != anchor) {
//                             coord.left + this.__size.width > this.__helper.geo.window.scroll.left + this.__helper.geo.window.size.width && (coord.left = this.__helper.geo.window.scroll.left + this.__helper.geo.window.size.width - this.__size.width), coord.left < 0 && (coord.left = 0);
//                             var pointerViewportY = event.pageY - this.__helper.geo.window.scroll.top;
//                             if (0 == anchor.indexOf("bottom")) coord.top < this.__helper.geo.window.scroll.top && (coord.top < 0 || pointerViewportY < this.__helper.geo.window.size.height - pointerViewportY && event.pageY + offset[1] + this.__size.height <= this.__helper.geo.document.size.height) && (coord.top = event.pageY + offset[1]);
//                             else {
//                                 var coordBottom = coord.top + this.__size.height;
//                                 if (coordBottom > this.__helper.geo.window.scroll.top + this.__helper.geo.window.size.height && (pointerViewportY > this.__helper.geo.window.size.height - pointerViewportY || pointerViewportY - offset[1] + this.__size.height <= this.__helper.geo.document.size.height)) {
//                                     var coordTop = event.pageY + offset[1] - this.__size.height;
//                                     coordTop >= 0 && (coord.top = coordTop)
//                                 }
//                             }
//                         }
//                         this.__helper.geo.origin.fixedLineage && (coord.left -= this.__helper.geo.window.scroll.left, coord.top -= this.__helper.geo.window.scroll.top);
//                         var position = {
//                             coord: coord
//                         };
//                         this.__instance._trigger({
//                             edit: function(p) {
//                                 position = p
//                             },
//                             event: event,
//                             helper: this.__helper,
//                             position: jQuery.extend(!0, {}, position),
//                             type: "follow"
//                         }), this.__instance._jQuerytooltip.css({
//                             left: position.coord.left,
//                             top: position.coord.top
//                         }).show()
//                     } else this.__instance._jQuerytooltip.hide();
//                     return this
//                 },
//                 __optionsFormat: function() {
//                     return this.__options = this.__instance._optionsExtract(pluginName, this.__defaults()), this
//                 },
//                 __reposition: function(event, helper) {
//                     var self = this,
//                         jQueryclone = self.__instance._jQuerytooltip.clone(),
//                         ruler = jQuery.tooltipster._getRuler(jQueryclone),
//                         animation = self.__instance.option("animation");
//                     animation && jQueryclone.removeClass("tooltipster-" + animation);
//                     var rulerResults = ruler.free().measure(),
//                         position = {
//                             size: rulerResults.size
//                         };
//                     helper.geo.origin.fixedLineage ? self.__instance._jQuerytooltip.css("position", "fixed") : self.__instance._jQuerytooltip.css("position", ""), self.__instance._trigger({
//                         edit: function(p) {
//                             position = p
//                         },
//                         event: event,
//                         helper: helper,
//                         position: jQuery.extend(!0, {}, position),
//                         tooltipClone: jQueryclone[0],
//                         type: "position"
//                     }), ruler.destroy(), self.__helper = helper, self.__size = position.size, self.__instance._jQuerytooltip.css({
//                         height: position.size.height,
//                         width: position.size.width
//                     });
//                     var e = jQuery.tooltipster._env.IE && "click" === event.type ? event : null;
//                     return self.__follow(e), self.__instance._jQuerytooltip.appendTo(self.__instance.option("parent")), self.__instance._trigger({
//                         type: "repositioned",
//                         event: event,
//                         position: {
//                             coord: {
//                                 left: 0,
//                                 top: 0
//                             },
//                             size: position.size
//                         }
//                     }), this
//                 }
//             }
//         }), jQuery
//     });
// var Util = function(jQuery) {
//         function toType(obj) {
//             return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase()
//         }

//         function isElement(obj) {
//             return (obj[0] || obj).nodeType
//         }

//         function getSpecialTransitionEndEvent() {
//             return {
//                 bindType: transition.end,
//                 delegateType: transition.end,
//                 handle: function(event) {
//                     if (jQuery(event.target).is(this)) return event.handleObj.handler.apply(this, arguments)
//                 }
//             }
//         }

//         function transitionEndTest() {
//             if (window.QUnit) return !1;
//             var el = document.createElement("bootstrap");
//             for (var name in TransitionEndEvent)
//                 if (void 0 !== el.style[name]) return {
//                     end: TransitionEndEvent[name]
//                 };
//             return !1
//         }

//         function transitionEndEmulator(duration) {
//             var _this = this,
//                 called = !1;
//             return jQuery(this).one(Util.TRANSITION_END, function() {
//                 called = !0
//             }), setTimeout(function() {
//                 called || Util.triggerTransitionEnd(_this)
//             }, duration), this
//         }

//         function setTransitionEndSupport() {
//             transition = transitionEndTest(), jQuery.fn.emulateTransitionEnd = transitionEndEmulator, Util.supportsTransitionEnd() && (jQuery.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent())
//         }
//         var transition = !1,
//             MAX_UID = 1e6,
//             TransitionEndEvent = {
//                 WebkitTransition: "webkitTransitionEnd",
//                 MozTransition: "transitionend",
//                 OTransition: "oTransitionEnd otransitionend",
//                 transition: "transitionend"
//             },
//             Util = {
//                 TRANSITION_END: "bsTransitionEnd",
//                 getUID: function(prefix) {
//                     do prefix += ~~(Math.random() * MAX_UID); while (document.getElementById(prefix));
//                     return prefix
//                 },
//                 getSelectorFromElement: function(element) {
//                     var selector = element.getAttribute("data-target");
//                     return selector || (selector = element.getAttribute("href") || "", selector = /^#[a-z]/i.test(selector) ? selector : null), selector
//                 },
//                 reflow: function(element) {
//                     return element.offsetHeight
//                 },
//                 triggerTransitionEnd: function(element) {
//                     jQuery(element).trigger(transition.end)
//                 },
//                 supportsTransitionEnd: function() {
//                     return Boolean(transition)
//                 },
//                 typeCheckConfig: function(componentName, config, configTypes) {
//                     for (var property in configTypes)
//                         if (configTypes.hasOwnProperty(property)) {
//                             var expectedTypes = configTypes[property],
//                                 value = config[property],
//                                 valueType = value && isElement(value) ? "element" : toType(value);
//                             if (!new RegExp(expectedTypes).test(valueType)) throw new Error(componentName.toUpperCase() + ": " + ('Option "' + property + '" provided type "' + valueType + '" ') + ('but expected type "' + expectedTypes + '".'))
//                         }
//                 }
//             };
//         return setTransitionEndSupport(), Util
//     }(jQuery),
//     _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
//         return typeof obj
//     } : function(obj) {
//         return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
//     },
//     _createClass = function() {
//         function defineProperties(target, props) {
//             for (var i = 0; i < props.length; i++) {
//                 var descriptor = props[i];
//                 descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor)
//             }
//         }
//         return function(Constructor, protoProps, staticProps) {
//             return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor
//         }
//     }(),
//     Collapse = function(jQuery) {
//         var NAME = "collapse",
//             VERSION = "4.0.0-alpha.6",
//             DATA_KEY = "bs.collapse",
//             EVENT_KEY = "." + DATA_KEY,
//             DATA_API_KEY = ".data-api",
//             JQUERY_NO_CONFLICT = jQuery.fn[NAME],
//             TRANSITION_DURATION = 600,
//             Default = {
//                 toggle: !0,
//                 parent: ""
//             },
//             DefaultType = {
//                 toggle: "boolean",
//                 parent: "string"
//             },
//             Event = {
//                 SHOW: "show" + EVENT_KEY,
//                 SHOWN: "shown" + EVENT_KEY,
//                 HIDE: "hide" + EVENT_KEY,
//                 HIDDEN: "hidden" + EVENT_KEY,
//                 CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
//             },
//             ClassName = {
//                 SHOW: "show",
//                 COLLAPSE: "collapse",
//                 COLLAPSING: "collapsing",
//                 COLLAPSED: "collapsed"
//             },
//             Dimension = {
//                 WIDTH: "width",
//                 HEIGHT: "height"
//             },
//             Selector = {
//                 ACTIVES: ".card > .show, .card > .collapsing",
//                 DATA_TOGGLE: '[data-toggle="collapse"]'
//             },
//             Collapse = function() {
//                 function Collapse(element, config) {
//                     _classCallCheck(this, Collapse), this._isTransitioning = !1, this._element = element, this._config = this._getConfig(config), this._triggerArray = jQuery.makeArray(jQuery('[data-toggle="collapse"][href="#' + element.id + '"],' + ('[data-toggle="collapse"][data-target="#' + element.id + '"]'))), this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle()
//                 }
//                 return Collapse.prototype.toggle = function() {
//                     jQuery(this._element).hasClass(ClassName.SHOW) ? this.hide() : this.show()
//                 }, Collapse.prototype.show = function() {
//                     var _this = this;
//                     if (this._isTransitioning) throw new Error("Collapse is transitioning");
//                     if (!jQuery(this._element).hasClass(ClassName.SHOW)) {
//                         var actives = void 0,
//                             activesData = void 0;
//                         if (this._parent && (actives = jQuery.makeArray(jQuery(this._parent).find(Selector.ACTIVES)), actives.length || (actives = null)), !(actives && (activesData = jQuery(actives).data(DATA_KEY), activesData && activesData._isTransitioning))) {
//                             var startEvent = jQuery.Event(Event.SHOW);
//                             if (jQuery(this._element).trigger(startEvent), !startEvent.isDefaultPrevented()) {
//                                 actives && (Collapse._jQueryInterface.call(jQuery(actives), "hide"), activesData || jQuery(actives).data(DATA_KEY, null));
//                                 var dimension = this._getDimension();
//                                 jQuery(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING), this._element.style[dimension] = 0, this._element.setAttribute("aria-expanded", !0), this._triggerArray.length && jQuery(this._triggerArray).removeClass(ClassName.COLLAPSED).attr("aria-expanded", !0), this.setTransitioning(!0);
//                                 var complete = function() {
//                                     jQuery(_this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW), _this._element.style[dimension] = "", _this.setTransitioning(!1), jQuery(_this._element).trigger(Event.SHOWN)
//                                 };
//                                 if (!Util.supportsTransitionEnd()) return void complete();
//                                 var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1),
//                                     scrollSize = "scroll" + capitalizedDimension;
//                                 jQuery(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION), this._element.style[dimension] = this._element[scrollSize] + "px"
//                             }
//                         }
//                     }
//                 }, Collapse.prototype.hide = function() {
//                     var _this2 = this;
//                     if (this._isTransitioning) throw new Error("Collapse is transitioning");
//                     if (jQuery(this._element).hasClass(ClassName.SHOW)) {
//                         var startEvent = jQuery.Event(Event.HIDE);
//                         if (jQuery(this._element).trigger(startEvent), !startEvent.isDefaultPrevented()) {
//                             var dimension = this._getDimension(),
//                                 offsetDimension = dimension === Dimension.WIDTH ? "offsetWidth" : "offsetHeight";
//                             this._element.style[dimension] = this._element[offsetDimension] + "px", Util.reflow(this._element),
//                                 jQuery(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW), this._element.setAttribute("aria-expanded", !1), this._triggerArray.length && jQuery(this._triggerArray).addClass(ClassName.COLLAPSED).attr("aria-expanded", !1), this.setTransitioning(!0);
//                             var complete = function() {
//                                 _this2.setTransitioning(!1), jQuery(_this2._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN)
//                             };
//                             return this._element.style[dimension] = "", Util.supportsTransitionEnd() ? void jQuery(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION) : void complete()
//                         }
//                     }
//                 }, Collapse.prototype.setTransitioning = function(isTransitioning) {
//                     this._isTransitioning = isTransitioning
//                 }, Collapse.prototype.dispose = function() {
//                     jQuery.removeData(this._element, DATA_KEY), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null
//                 }, Collapse.prototype._getConfig = function(config) {
//                     return config = jQuery.extend({}, Default, config), config.toggle = Boolean(config.toggle), Util.typeCheckConfig(NAME, config, DefaultType), config
//                 }, Collapse.prototype._getDimension = function() {
//                     var hasWidth = jQuery(this._element).hasClass(Dimension.WIDTH);
//                     return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT
//                 }, Collapse.prototype._getParent = function() {
//                     var _this3 = this,
//                         parent = jQuery(this._config.parent)[0],
//                         selector = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
//                     return jQuery(parent).find(selector).each(function(i, element) {
//                         _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element])
//                     }), parent
//                 }, Collapse.prototype._addAriaAndCollapsedClass = function(element, triggerArray) {
//                     if (element) {
//                         var isOpen = jQuery(element).hasClass(ClassName.SHOW);
//                         element.setAttribute("aria-expanded", isOpen), triggerArray.length && jQuery(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr("aria-expanded", isOpen)
//                     }
//                 }, Collapse._getTargetFromElement = function(element) {
//                     var selector = Util.getSelectorFromElement(element);
//                     return selector ? jQuery(selector)[0] : null
//                 }, Collapse._jQueryInterface = function(config) {
//                     return this.each(function() {
//                         var jQuerythis = jQuery(this),
//                             data = jQuerythis.data(DATA_KEY),
//                             _config = jQuery.extend({}, Default, jQuerythis.data(), "object" === ("undefined" == typeof config ? "undefined" : _typeof(config)) && config);
//                         if (!data && _config.toggle && /show|hide/.test(config) && (_config.toggle = !1), data || (data = new Collapse(this, _config), jQuerythis.data(DATA_KEY, data)), "string" == typeof config) {
//                             if (void 0 === data[config]) throw new Error('No method named "' + config + '"');
//                             data[config]()
//                         }
//                     })
//                 }, _createClass(Collapse, null, [{
//                     key: "VERSION",
//                     get: function() {
//                         return VERSION
//                     }
//                 }, {
//                     key: "Default",
//                     get: function() {
//                         return Default
//                     }
//                 }]), Collapse
//             }();
//         return jQuery(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function(event) {
//             event.preventDefault();
//             var target = Collapse._getTargetFromElement(this),
//                 data = jQuery(target).data(DATA_KEY),
//                 config = data ? "toggle" : jQuery(this).data();
//             Collapse._jQueryInterface.call(jQuery(target), config)
//         }), jQuery.fn[NAME] = Collapse._jQueryInterface, jQuery.fn[NAME].Constructor = Collapse, jQuery.fn[NAME].noConflict = function() {
//             return jQuery.fn[NAME] = JQUERY_NO_CONFLICT, Collapse._jQueryInterface
//         }, Collapse
//     }(jQuery),
//     jQuerybody = jQuery("body"),
//     windowWidth = 768;
// jQuery(function() {
//     rate(), rating(), tooltipster(), scrollToCollapseTop(), smoothScroll(), objectFitImages("img")
// }), jQuery(".btn-scroll").click(function() {
//     return jQuery("html, body").animate({
//         scrollTop: 0
//     }, 1e3), !1
// }), jQuery(window).scroll(function() {
//     jQuery(window).scrollTop() > 300 ? jQuery(".btn-scroll").addClass("active") : jQuery(".btn-scroll").removeClass("active")
// }), window.centerModal = function() {
//     jQuerythis = this !== window ? jQuery(this) : jQuery(".modal.show"), jQuerythis.css("display", "block");
//     var jQuerydialog = jQuerythis.find(".modal-dialog"),
//         offset = (jQuery(window).height() - jQuerydialog.height()) / 2,
//         bottomMargin = parseInt(jQuerydialog.css("marginBottom"), 10);
//     offset < bottomMargin && (offset = bottomMargin), jQuerydialog.css("margin-top", offset)
// };

jQuery(function(){
    // rate(),
    tooltipster(),
    scrollToCollapseTop();
});